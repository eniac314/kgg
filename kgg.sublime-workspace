{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"user",
				"UserInfoPayload"
			],
			[
				"S",
				"String"
			],
			[
				"de",
				"decomposer"
			],
			[
				"mem",
				"membersBlogIndex"
			],
			[
				"in",
				"inlines"
			],
			[
				"ligh",
				"lightBlue"
			],
			[
				"Ba",
				"BackgroundColor"
			],
			[
				"al",
				"alignBottom"
			],
			[
				"ru",
				"ruby"
			],
			[
				"writ",
				"writingsToStr"
			],
			[
				"kan",
				"kanji"
			],
			[
				"wi",
				"withDefault"
			],
			[
				"jap",
				"japExtractor"
			],
			[
				"star",
				"startsWithNoJap"
			],
			[
				"le",
				"legacyReading"
			],
			[
				"chom",
				"chompWhile"
			],
			[
				"get",
				"getChompedString"
			],
			[
				"html",
				"htmlRubyParser"
			],
			[
				"pa",
				"paddingXY"
			],
			[
				"Kan",
				"KanjiEditor"
			],
			[
				"swa",
				"swapUp"
			],
			[
				"remo",
				"removeCoreMeaning"
			],
			[
				"remove",
				"removeAnyMeaning"
			],
			[
				"ed",
				"editAnyMeanings"
			],
			[
				"editM",
				"EditMeanings"
			],
			[
				"Kanji",
				"KanjidicEntry"
			],
			[
				"grou",
				"groupColor"
			],
			[
				"B",
				"Background"
			],
			[
				"to",
				"toFloat"
			],
			[
				"mainContent",
				"mainContentFullScreen"
			],
			[
				"ht",
				"html"
			],
			[
				"padd",
				"paddingEach"
			],
			[
				"ali",
				"alignRight"
			],
			[
				"fix",
				"fixLittleTsu"
			],
			[
				"meain",
				"frenchMeaning"
			],
			[
				"cet",
				"centerY"
			],
			[
				"pass",
				"passive"
			],
			[
				"poten",
				"potentielle"
			],
			[
				"conf",
				"configView"
			],
			[
				"dic",
				"dictionnaire"
			],
			[
				"VTT",
				"VTTeForm"
			],
			[
				"re",
				"remove"
			],
			[
				"ver",
				"VerbsTableConfig"
			],
			[
				"showingB",
				"showingVerbQuiz"
			],
			[
				"Verbs",
				"VerbsTableConfig"
			],
			[
				"col",
				"columnData"
			],
			[
				"con",
				"conditionnal"
			],
			[
				"header",
				"headerInFrench"
			],
			[
				"he",
				"headerInFrench"
			],
			[
				"fil",
				"filterMap"
			],
			[
				"conjugateA",
				"conjugateAdjective"
			],
			[
				"answe",
				"answerType"
			],
			[
				"inter",
				"inderdictForm"
			],
			[
				"fi",
				"fill"
			],
			[
				"anser",
				"answered"
			],
			[
				"sc",
				"scrollbarY"
			],
			[
				"ans",
				"answer"
			],
			[
				"pitch",
				"pitchAccentsToString"
			],
			[
				"pitchAcc",
				"pitchAccentInput"
			],
			[
				"showing",
				"showingPitchAccents"
			],
			[
				"cen",
				"centerX"
			],
			[
				"show",
				"showParticle"
			],
			[
				"parseCo",
				"parseCorrected"
			],
			[
				"acc",
				"accent"
			],
			[
				"st",
				"startingPoint"
			],
			[
				"pi",
				"pitchAccentToSvg"
			],
			[
				"pit",
				"pitchAccentFromCodeString"
			],
			[
				"morae",
				"moraeDecomp"
			],
			[
				"mo",
				"moraeDecomposition"
			],
			[
				"Pit",
				"PitchAccent"
			],
			[
				"fla",
				"flattenJap"
			],
			[
				"ad",
				"adjectives"
			],
			[
				"na",
				"naKeyYouShiQuizzed"
			],
			[
				"Qui",
				"QuizDisplay"
			],
			[
				"Adjective",
				"AdjectiveForm"
			],
			[
				"Key",
				"KeiYouShi"
			],
			[
				"Adje",
				"AdjectiveForm"
			],
			[
				"del",
				"delim2"
			],
			[
				"fl",
				"flatStr"
			],
			[
				"IKeiY",
				"IKeiYouShi"
			],
			[
				"IKe",
				"IKeiYouShi"
			],
			[
				"Ke",
				"KeiYouShi"
			],
			[
				"cent",
				"centerX"
			],
			[
				"s",
				"shrink"
			],
			[
				"te",
				"teForm"
			],
			[
				"お",
				"お休みなさい"
			],
			[
				"replca",
				"replaceExpressionKana"
			],
			[
				"cu",
				"currentMatch"
			],
			[
				"repl",
				"replaceExpressionKana"
			],
			[
				"su",
				"surface"
			],
			[
				"prei",
				"prefix"
			],
			[
				"from",
				"fromList"
			],
			[
				"off",
				"offWhite"
			],
			[
				"sh",
				"shrink"
			],
			[
				"ma",
				"markdown"
			],
			[
				"kanji",
				"kanjiQuizRevealEverything"
			],
			[
				"Cli",
				"ClickableJapaneseString"
			],
			[
				"man",
				"manual"
			],
			[
				"rea",
				"kanjiReadingQuizzes"
			],
			[
				"kanjiQ",
				"mnnKanjiQuizLesson"
			],
			[
				"lesson",
				"lessonView"
			],
			[
				"read",
				"kanjiReadingQuizzes"
			],
			[
				"less",
				"lessonView"
			],
			[
				"E",
				"Element"
			],
			[
				"Kanjid",
				"Kanjidic"
			],
			[
				"H",
				"HtmlAttr"
			],
			[
				"cli",
				"clickableReadingView"
			],
			[
				"yomu",
				"yomuRenshuView"
			],
			[
				"Pla",
				"PlainCJS"
			],
			[
				"clic",
				"clickableJstr"
			],
			[
				"Yo",
				"yomuRenshuSample"
			],
			[
				"les",
				"lessonNameParser"
			],
			[
				"curre",
				"currentJstr"
			],
			[
				"reading",
				"readingToClickableReading"
			],
			[
				"mb",
				"mbPluginResult"
			],
			[
				"cone",
				"connexionDropped"
			],
			[
				"arre",
				"arrêter"
			],
			[
				"new",
				"newTabLink"
			],
			[
				"term",
				"termine"
			],
			[
				"augm",
				"augmente"
			],
			[
				"par",
				"parseNotesInChoice"
			],
			[
				"verbs",
				"verbsTransitivity"
			],
			[
				"Verb",
				"VerbsIndex"
			],
			[
				"move",
				"moveUp"
			],
			[
				"cor",
				"correctAnswer"
			],
			[
				"corre",
				"correctAnswer"
			],
			[
				"filt",
				"filterMap"
			],
			[
				"choice",
				"choiceView"
			]
		]
	},
	"buffers":
	[
		{
			"file": "elm-pkg-js/coms.js",
			"settings":
			{
				"buffer_size": 898,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJwAAAAAAAAAAAAAAIgAAAAAAAAAiAAAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAIQAAAAAAAAAhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAACEAAAAAAAAAiQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQAAAAAAAAAhAAAAAAAAAAAAAAAAADRA"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "host"
					},
					"BQAAAG8AAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAABwAAAAAAAAAAYAAABwYXJlbnRwAAAAAAAAAHEAAAAAAAAAAAAAAHEAAAAAAAAAcgAAAAAAAAAAAAAAcgAAAAAAAABzAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwAAAAAAAAB1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAAzwIAAAAAAACEAgAAZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oYXBwKSB7CiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLCAoZXZlbnQpID0+IHsKICAgIGNvbnNvbGUubG9nKCJNZXNzYWdlIGZyb20gaG9zdDoiLCBldmVudC5kYXRhKTsKfSk7CgogIGFwcC5wb3J0cy5nZXRHZW9sb2Muc3Vic2NyaWJlKGFzeW5jIGZ1bmN0aW9uKCkgewogICAgZ2V0TG9jYXRpb24oYXBwKQogIH0pCn0KCmZ1bmN0aW9uIGdldExvY2F0aW9uKGFwcCkgewogIHZhciBvcHRpb25zID0gewogICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlLAogICAgdGltZW91dDogNTAwMCwKICAgIG1heGltdW1BZ2U6IDAKICB9OwoKCiAgaWYgKG5hdmlnYXRvci5nZW9sb2NhdGlvbikgewogICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGFwcC5wb3J0cy5nZW9sb2Muc2VuZCwKICAgICAgICBmdW5jdGlvbihlcnJvcikgewogICAgICAgICAgYXBwLnBvcnRzLmdlb2xvYy5zZW5kKCJnZW9sb2NhdGlvbiBub3QgYWxsb3dlZCIpOwogICAgICAgICAgfSwgb3B0aW9ucyk7CiAgfSBlbHNlIHsKICAgIGFwcC5wb3J0cy5nZW9sb2Muc2VuZCgibm8gZ2VvbG9jYXRpb24iKTsKICAgIGNvbnNvbGUubG9nKCJubyBnZW9sb2NhdGlvbiIpOwogIH0KfSA",
					"AQAAAAAAAAABAAAAcwAAAAAAAABzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"EQAAAM4CAAAAAAAA0QIAAAAAAAAAAAAAyAIAAAAAAADLAgAAAAAAAAAAAAChAgAAAAAAAKQCAAAAAAAAAAAAAHACAAAAAAAAcwIAAAAAAAAAAAAAYwIAAAAAAABmAgAAAAAAAAAAAABNAgAAAAAAAFACAAAAAAAAAAAAAD4CAAAAAAAAQQIAAAAAAAAAAAAA/AEAAAAAAAD/AQAAAAAAAAAAAADeAQAAAAAAAOEBAAAAAAAAAAAAAJYBAAAAAAAAmQEAAAAAAAAAAAAAdQEAAAAAAAB4AQAAAAAAAAAAAABtAQAAAAAAAHABAAAAAAAAAAAAAFYBAAAAAAAAWQEAAAAAAAAAAAAAPgEAAAAAAABBAQAAAAAAAAAAAAAbAQAAAAAAAB4BAAAAAAAAAAAAAAcBAAAAAAAACgEAAAAAAAAAAAAA6wAAAAAAAADuAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wAAAAAAAADPAgAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AwAAAOUAAAAAAAAA6AAAAAAAAAAAAAAAzAAAAAAAAADPAAAAAAAAAAAAAACXAAAAAAAAAJoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwAAAAAAAADnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAACwMAAAAAAAALAwAAZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oYXBwKSB7CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIChldmVudCkgPT4gewogICAgICAgIGNvbnNvbGUubG9nKCJNZXNzYWdlIGZyb20gaG9zdDoiLCBldmVudC5kYXRhKTsKICAgIH0pOwoKICAgIC8vIGFwcC5wb3J0cy5nZXRHZW9sb2Muc3Vic2NyaWJlKGFzeW5jIGZ1bmN0aW9uKCkgewogICAgLy8gICAgIGdldExvY2F0aW9uKGFwcCkKICAgIC8vIH0pCn0KCi8vIGZ1bmN0aW9uIGdldExvY2F0aW9uKGFwcCkgewovLyAgICAgdmFyIG9wdGlvbnMgPSB7Ci8vICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5IDogdHJ1ZSwKLy8gICAgICAgICB0aW1lb3V0IDogNTAwMCwKLy8gICAgICAgICBtYXhpbXVtQWdlIDogMAovLyAgICAgfTsKCi8vICAgICBpZiAobmF2aWdhdG9yLmdlb2xvY2F0aW9uKSB7Ci8vICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihhcHAucG9ydHMuZ2VvbG9jLnNlbmQsCi8vICAgICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7Ci8vICAgICAgICAgICAgICAgICBhcHAucG9ydHMuZ2VvbG9jLnNlbmQoImdlb2xvY2F0aW9uIG5vdCBhbGxvd2VkIik7Ci8vICAgICAgICAgICAgIH0sCi8vICAgICAgICAgICAgIG9wdGlvbnMpOwovLyAgICAgfSBlbHNlIHsKLy8gICAgICAgICBhcHAucG9ydHMuZ2VvbG9jLnNlbmQoIm5vIGdlb2xvY2F0aW9uIik7Ci8vICAgICAgICAgY29uc29sZS5sb2coIm5vIGdlb2xvY2F0aW9uIik7Ci8vICAgICB9Ci8vIH0",
					"AQAAAAAAAAABAAAAjgEAAAAAAACOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACMAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwAAAAAAAAAjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"paste",
					null,
					"AQAAACMAAAAAAAAAVwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwAAAAAAAAAjAAAAAAAAAAAAAAAAAERA"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFcAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwAAAAAAAABXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "kgg-"
					},
					"BgAAAD4AAAAAAAAAPwAAAAAAAAAAAAAAPwAAAAAAAAA/AAAAAAAAABEAAABIZWxsbyBmcm9tIGlmcmFtZUgAAAAAAAAASAAAAAAAAAAEAAAAICAgID8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAEIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwAAAAAAAAA+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "loaded"
					},
					"BgAAAEIAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAEUAAAAAAAAAAAAAAEUAAAAAAAAARgAAAAAAAAAAAAAARgAAAAAAAABHAAAAAAAAAAAAAABHAAAAAAAAAEgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgAAAAAAAABCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAAPgMAAAAAAAA+AwAAZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oYXBwKSB7CiAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKCJrZ2ctbG9hZGVkIiwgIioiKTsKCiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIChldmVudCkgPT4gewogICAgICAgIGNvbnNvbGUubG9nKCJNZXNzYWdlIGZyb20gaG9zdDoiLCBldmVudC5kYXRhKTsKICAgIH0pOwoKICAgIC8vIGFwcC5wb3J0cy5nZXRHZW9sb2Muc3Vic2NyaWJlKGFzeW5jIGZ1bmN0aW9uKCkgewogICAgLy8gICAgIGdldExvY2F0aW9uKGFwcCkKICAgIC8vIH0pCn0KCi8vIGZ1bmN0aW9uIGdldExvY2F0aW9uKGFwcCkgewovLyAgICAgdmFyIG9wdGlvbnMgPSB7Ci8vICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5IDogdHJ1ZSwKLy8gICAgICAgICB0aW1lb3V0IDogNTAwMCwKLy8gICAgICAgICBtYXhpbXVtQWdlIDogMAovLyAgICAgfTsKCi8vICAgICBpZiAobmF2aWdhdG9yLmdlb2xvY2F0aW9uKSB7Ci8vICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihhcHAucG9ydHMuZ2VvbG9jLnNlbmQsCi8vICAgICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7Ci8vICAgICAgICAgICAgICAgICBhcHAucG9ydHMuZ2VvbG9jLnNlbmQoImdlb2xvY2F0aW9uIG5vdCBhbGxvd2VkIik7Ci8vICAgICAgICAgICAgIH0sCi8vICAgICAgICAgICAgIG9wdGlvbnMpOwovLyAgICAgfSBlbHNlIHsKLy8gICAgICAgICBhcHAucG9ydHMuZ2VvbG9jLnNlbmQoIm5vIGdlb2xvY2F0aW9uIik7Ci8vICAgICAgICAgY29uc29sZS5sb2coIm5vIGdlb2xvY2F0aW9uIik7Ci8vICAgICB9Ci8vIH0",
					"AQAAAAAAAAABAAAAswAAAAAAAACzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"cut",
					null,
					"AQAAACMAAAAAAAAAIwAAAAAAAAAtAAAAd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZSgia2dnLWxvYWRlZCIsICIqIik7",
					"AQAAAAAAAAABAAAAIwAAAAAAAABQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"BAAAAFgAAAAAAAAAWQAAAAAAAAAAAAAAWQAAAAAAAABdAAAAAAAAAAAAAABdAAAAAAAAAF8AAAAAAAAAAAAAAF8AAAAAAAAAYQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAAAAAAAAABYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"paste",
					null,
					"AQAAAGEAAAAAAAAAjgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQAAAAAAAABhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					2,
					"left_delete",
					null,
					"AgAAAH0AAAAAAAAAfQAAAAAAAAAJAAAAZ2ctbG9hZGVkfAAAAAAAAAB8AAAAAAAAAAEAAABr",
					"AQAAAAAAAAABAAAAfQAAAAAAAACGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "JSON/"
					},
					"BQAAAHsAAAAAAAAAfAAAAAAAAAAAAAAAfAAAAAAAAAB9AAAAAAAAAAAAAAB9AAAAAAAAAH4AAAAAAAAAAAAAAH4AAAAAAAAAfwAAAAAAAAAAAAAAfwAAAAAAAACAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewAAAAAAAAB7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"left_delete",
					null,
					"AQAAAH8AAAAAAAAAfwAAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAH8AAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwAAAAAAAAB/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"left_delete",
					null,
					"AQAAAH8AAAAAAAAAfwAAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": ".stri"
					},
					"BQAAAH8AAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACBAAAAAAAAAAAAAACBAAAAAAAAAIIAAAAAAAAAAAAAAIIAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAACEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwAAAAAAAAB/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"LSP-typescript\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							46,
							79,
							1
						],
						"trigger": "stringify"
					},
					"BgAAAIMAAAAAAAAAgwAAAAAAAAABAAAAaYIAAAAAAAAAggAAAAAAAAABAAAAcoEAAAAAAAAAgQAAAAAAAAABAAAAdIAAAAAAAAAAgAAAAAAAAAABAAAAc38AAAAAAAAAfwAAAAAAAAABAAAALn8AAAAAAAAAiQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAAAAAAAAACEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAIkAAAAAAAAAigAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAIwAAAAAAAAAjQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAAAAAAAAACMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					2,
					"left_delete",
					null,
					"AgAAAIsAAAAAAAAAiwAAAAAAAAABAAAAIooAAAAAAAAAigAAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAAjAAAAAAAAACMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIoAAAAAAAAAjAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					2,
					"left_delete",
					null,
					"AgAAAIsAAAAAAAAAiwAAAAAAAAABAAAAfYoAAAAAAAAAigAAAAAAAAABAAAAew",
					"AQAAAAAAAAABAAAAjAAAAAAAAACMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "en"
					},
					"AgAAAIoAAAAAAAAAiwAAAAAAAAAAAAAAiwAAAAAAAACMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"left_delete",
					null,
					"AQAAAIsAAAAAAAAAiwAAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAjAAAAAAAAACMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "ce"
					},
					"AgAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					2,
					"left_delete",
					null,
					"AgAAAIwAAAAAAAAAjAAAAAAAAAABAAAAZYsAAAAAAAAAiwAAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAjQAAAAAAAACNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "ven"
					},
					"AwAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAACNAAAAAAAAAI4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":2,\"session_name\":\"LSP-typescript\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							56,
							89,
							1
						],
						"trigger": "event"
					},
					"CwAAAI0AAAAAAAAAjQAAAAAAAAABAAAAbowAAAAAAAAAjAAAAAAAAAABAAAAZYsAAAAAAAAAiwAAAAAAAAABAAAAdosAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAACMAAAAAAAAAIwAAAAAAAAAAQAAAGWLAAAAAAAAAIsAAAAAAAAAAQAAAGOLAAAAAAAAAIwAAAAAAAAAAAAAAIsAAAAAAAAAiwAAAAAAAAABAAAAbooAAAAAAAAAigAAAAAAAAABAAAAZYoAAAAAAAAAjwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": ".data"
					},
					"BQAAAI8AAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACRAAAAAAAAAAAAAACRAAAAAAAAAJIAAAAAAAAAAAAAAJIAAAAAAAAAkwAAAAAAAAAAAAAAkwAAAAAAAACUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAATwMAAAAAAABVAwAAZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oYXBwKSB7CiAgICAKCiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIChldmVudCkgPT4gewogICAgICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoZXZlbnQuZGF0YSksICIqIik7CiAgICAgICAgY29uc29sZS5sb2coIk1lc3NhZ2UgZnJvbSBob3N0OiIsIGV2ZW50LmRhdGEpOwogICAgfSk7CgogICAgLy8gYXBwLnBvcnRzLmdldEdlb2xvYy5zdWJzY3JpYmUoYXN5bmMgZnVuY3Rpb24oKSB7CiAgICAvLyAgICAgZ2V0TG9jYXRpb24oYXBwKQogICAgLy8gfSkKfQoKLy8gZnVuY3Rpb24gZ2V0TG9jYXRpb24oYXBwKSB7Ci8vICAgICB2YXIgb3B0aW9ucyA9IHsKLy8gICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3kgOiB0cnVlLAovLyAgICAgICAgIHRpbWVvdXQgOiA1MDAwLAovLyAgICAgICAgIG1heGltdW1BZ2UgOiAwCi8vICAgICB9OwoKLy8gICAgIGlmIChuYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHsKLy8gICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGFwcC5wb3J0cy5nZW9sb2Muc2VuZCwKLy8gICAgICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHsKLy8gICAgICAgICAgICAgICAgIGFwcC5wb3J0cy5nZW9sb2Muc2VuZCgiZ2VvbG9jYXRpb24gbm90IGFsbG93ZWQiKTsKLy8gICAgICAgICAgICAgfSwKLy8gICAgICAgICAgICAgb3B0aW9ucyk7Ci8vICAgICB9IGVsc2UgewovLyAgICAgICAgIGFwcC5wb3J0cy5nZW9sb2Muc2VuZCgibm8gZ2VvbG9jYXRpb24iKTsKLy8gICAgICAgICBjb25zb2xlLmxvZygibm8gZ2VvbG9jYXRpb24iKTsKLy8gICAgIH0KLy8gfQ",
					"AQAAAAAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJ8AAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwAAAAAAAACfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"paste",
					null,
					"AQAAAJ8AAAAAAAAA0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwAAAAAAAACfAAAAAAAAAAAAAAAAAFRA"
				],
				[
					124,
					1,
					"paste",
					null,
					"AgAAAKkAAAAAAAAAtwAAAAAAAAAAAAAAtwAAAAAAAAC3AAAAAAAAAAYAAABnZW9sb2M",
					"AQAAAAAAAAABAAAAqQAAAAAAAACvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"left_delete",
					null,
					"AQAAAL0AAAAAAAAAvQAAAAAAAAAZAAAAImdlb2xvY2F0aW9uIG5vdCBhbGxvd2VkIg",
					"AQAAAAAAAAABAAAAvQAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "eben"
					},
					"BAAAAL0AAAAAAAAAvgAAAAAAAAAAAAAAvgAAAAAAAAC/AAAAAAAAAAAAAAC/AAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAwQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQAAAAAAAAC9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					3,
					"left_delete",
					null,
					"AwAAAMAAAAAAAAAAwAAAAAAAAAABAAAAbr8AAAAAAAAAvwAAAAAAAAABAAAAZb4AAAAAAAAAvgAAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAwQAAAAAAAADBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "vent.d"
					},
					"BgAAAL4AAAAAAAAAvwAAAAAAAAAAAAAAvwAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMEAAAAAAAAAAAAAAMEAAAAAAAAAwgAAAAAAAAAAAAAAwgAAAAAAAADDAAAAAAAAAAAAAADDAAAAAAAAAMQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvgAAAAAAAAC+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": "ata"
					},
					"AwAAAMQAAAAAAAAAxQAAAAAAAAAAAAAAxQAAAAAAAADGAAAAAAAAAAAAAADGAAAAAAAAAMcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAAAAAAAAADEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAAggMAAAAAAACCAwAAZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oYXBwKSB7CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIChldmVudCkgPT4gewogICAgICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoZXZlbnQuZGF0YSksICIqIik7CiAgICAgICAgYXBwLnBvcnRzLmZyb21QYXJlbnRQb3J0LnNlbmQoZXZlbnQuZGF0YSk7CiAgICAgICAgY29uc29sZS5sb2coIk1lc3NhZ2UgZnJvbSBob3N0OiIsIGV2ZW50LmRhdGEpOwogICAgfSk7CgogICAgLy8gYXBwLnBvcnRzLmdldEdlb2xvYy5zdWJzY3JpYmUoYXN5bmMgZnVuY3Rpb24oKSB7CiAgICAvLyAgICAgZ2V0TG9jYXRpb24oYXBwKQogICAgLy8gfSkKfQoKLy8gZnVuY3Rpb24gZ2V0TG9jYXRpb24oYXBwKSB7Ci8vICAgICB2YXIgb3B0aW9ucyA9IHsKLy8gICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3kgOiB0cnVlLAovLyAgICAgICAgIHRpbWVvdXQgOiA1MDAwLAovLyAgICAgICAgIG1heGltdW1BZ2UgOiAwCi8vICAgICB9OwoKLy8gICAgIGlmIChuYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHsKLy8gICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGFwcC5wb3J0cy5nZW9sb2Muc2VuZCwKLy8gICAgICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHsKLy8gICAgICAgICAgICAgICAgIGFwcC5wb3J0cy5nZW9sb2Muc2VuZCgiZ2VvbG9jYXRpb24gbm90IGFsbG93ZWQiKTsKLy8gICAgICAgICAgICAgfSwKLy8gICAgICAgICAgICAgb3B0aW9ucyk7Ci8vICAgICB9IGVsc2UgewovLyAgICAgICAgIGFwcC5wb3J0cy5nZW9sb2Muc2VuZCgibm8gZ2VvbG9jYXRpb24iKTsKLy8gICAgICAgICBjb25zb2xlLmxvZygibm8gZ2VvbG9jYXRpb24iKTsKLy8gICAgIH0KLy8gfQ",
					"AQAAAAAAAAABAAAAxwAAAAAAAADHAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Game.elm",
			"settings":
			{
				"buffer_size": 18807,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					33,
					1,
					"left_delete",
					null,
					"AQAAAAMCAAAAAAAAAwIAAAAAAAAkAAAAY2FzZSBnZXRVc2VyTmFtZSBtb2RlbC5hdXRoUGx1Z2luIG9m",
					"AQAAAAAAAAABAAAAAwIAAAAAAAAnAgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAAGECAAAAAAAAYQIAAAAAAAA7AAAAXyAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lLCBBdWRpby5jbWROb25lICk",
					"AQAAAAAAAAABAAAAYQIAAAAAAACcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					4,
					"left_delete",
					null,
					"BAAAABcCAAAAAAAAFwIAAAAAAAABAAAAPhYCAAAAAAAAFgIAAAAAAAABAAAALRUCAAAAAAAAFQIAAAAAAAABAAAAIBQCAAAAAAAAFAIAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAGAIAAAAAAAAYAgAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAAFAIAAAAAAAAUAgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					2,
					"left_delete",
					null,
					"AgAAABUCAAAAAAAAFQIAAAAAAAAPAAAAIEF1ZGlvLmNtZE5vbmUgFAIAAAAAAAAUAgAAAAAAAAEAAAAs",
					"AQAAAAAAAAABAAAAFQIAAAAAAAAkAgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAAFAIAAAAAAAAUAgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAABYCAAAAAAAAFwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgIAAAAAAAAWAgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert_completion",
					{
						"completion": "nkb",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "nkb"
					},
					"AQAAABcCAAAAAAAAGgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwIAAAAAAAAXAgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					4,
					"left_delete",
					null,
					"BAAAABkCAAAAAAAAGQIAAAAAAAABAAAAYhgCAAAAAAAAGAIAAAAAAAABAAAAaxcCAAAAAAAAFwIAAAAAAAABAAAAbhYCAAAAAAAAFgIAAAAAAAABAAAAXA",
					"AQAAAAAAAAABAAAAGgIAAAAAAAAaAgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABYCAAAAAAAAFwIAAAAAAAAAAAAAFwIAAAAAAAAjAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgIAAAAAAAAWAgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"left_delete",
					null,
					"AQAAAB8CAAAAAAAAHwIAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAIwIAAAAAAAAjAgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "Err"
					},
					"AwAAAB8CAAAAAAAAIAIAAAAAAAAAAAAAIAIAAAAAAAAhAgAAAAAAAAAAAAAhAgAAAAAAACICAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwIAAAAAAAAfAgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " _"
					},
					"AgAAACICAAAAAAAAIwIAAAAAAAAAAAAAIwIAAAAAAAAkAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgIAAAAAAAAiAgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " -"
					},
					"AgAAACQCAAAAAAAAJQIAAAAAAAAAAAAAJQIAAAAAAAAmAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAIAAAAAAAAkAgAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACYCAAAAAAAAJwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgIAAAAAAAAmAgAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"left_delete",
					null,
					"AQAAACYCAAAAAAAAJgIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAJwIAAAAAAAAnAgAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAACYCAAAAAAAAJwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgIAAAAAAAAmAgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACcCAAAAAAAAKAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwIAAAAAAAAnAgAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAACgCAAAAAAAAKQIAAAAAAAAAAAAAKQIAAAAAAAAxAgAAAAAAAAAAAAAxAgAAAAAAADUCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAIAAAAAAAAoAgAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAACgCAAAAAAAAKQIAAAAAAAAAAAAAKQIAAAAAAAAxAgAAAAAAAAAAAAAxAgAAAAAAADUCAAAAAAAAAAAAADYCAAAAAAAANgIAAAAAAAAMAAAAICAgICAgICAgICAg",
					"AQAAAAAAAAABAAAAKAIAAAAAAAAoAgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"paste",
					null,
					"AQAAADUCAAAAAAAASAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQIAAAAAAAA1AgAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAyUsAAAAAAACKUwAAcG9ydCBtb2R1bGUgR2FtZSBleHBvc2luZyAoLi4pCgppbXBvcnQgQXBpQ2FsbHMKaW1wb3J0IERpY3QKaW1wb3J0IEhlbHBlcnMgZXhwb3NpbmcgKHNodWZmbGVTZWVkKQppbXBvcnQgSnNvbi5EZWNvZGUgYXMgRAppbXBvcnQgSnNvbi5FbmNvZGUgYXMgRQppbXBvcnQgTGFtZGVyYSBleHBvc2luZyAoYnJvYWRjYXN0LCBzZW5kVG9Gcm9udGVuZCkKaW1wb3J0IExpc3QuRXh0cmEKaW1wb3J0IFJhbmRvbQppbXBvcnQgU2V0CmltcG9ydCBUaW1lCmltcG9ydCBUeXBlcyBleHBvc2luZyAoLi4pCgoKcG9ydCB0b1BhcmVudFBvcnQgOiBFLlZhbHVlIC0+IENtZCBtc2cKCgpwb3J0IGZyb21QYXJlbnRQb3J0IDogKEQuVmFsdWUgLT4gbXNnKSAtPiBTdWIgbXNnCgoKZnJvbVBhcmVudCBtb2RlbCBkVmFsID0KICAgIGNhc2UgRC5kZWNvZGVWYWx1ZSBmcm9tUGFyZW50UGF5bG9hZCBkVmFsIG9mCiAgICAgICAgT2sgKFVzZXJJbmZvUGF5bG9hZCB1c2VybmFtZSBzZXNzaW9uQ29va2llKSAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCiAgICAgICAgRXJyIF8gLT4gCiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKdHlwZSBGcm9tUGFyZW50UGF5bG9hZAogICAgPSBVc2VySW5mb1BheWxvYWQgU3RyaW5nIFN0cmluZwoKCmZyb21QYXJlbnRQYXlsb2FkID0KICAgIEQub25lT2YgWyB1c2VySW5mb1BheWxvYWQgXQoKCnVzZXJJbmZvUGF5bG9hZCA9CiAgICBELm1hcDIgVXNlckluZm9QYXlsb2FkCiAgICAgICAgKEQuZmllbGQgImNvb2tpZSIgRC5zdHJpbmcpCiAgICAgICAgKEQuZmllbGQgInVzZXJuYW1lIiBELnN0cmluZykKCgp1cGRhdGVDb25maWcgOgogICAgQmFja2VuZE1vZGVsCiAgICAtPiBHYW1lSWQKICAgIC0+IHsga2FuamlTZXQgOiBLYW5qaVNldCwgcm91bmRMZW5ndGggOiBJbnQsIHN0YXJ0aW5nQ291bnRkb3duIDogSW50IH0KICAgIC0+ICggQmFja2VuZE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCnVwZGF0ZUNvbmZpZyBtb2RlbCBnYW1lSWQgY29uZmlnID0KICAgIGNhc2UgRGljdC5nZXQgZ2FtZUlkIG1vZGVsLmtnZ2FtZXMgb2YKICAgICAgICBKdXN0IGdhbWUgLT4KICAgICAgICAgICAgY2FzZSBnYW1lLmdhbWVTdGF0ZSBvZgogICAgICAgICAgICAgICAgTG9iYnkgXyAtPgogICAgICAgICAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgICAgICAgICBuZXdHYW1lID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgZ2FtZSB8IGdhbWVTdGF0ZSA9IExvYmJ5IGNvbmZpZyB9CiAgICAgICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBrZ2dhbWVzID0gRGljdC5pbnNlcnQgZ2FtZUlkIG5ld0dhbWUgbW9kZWwua2dnYW1lcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3RHYW1lIG5ld0dhbWUKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCiAgICAgICAgXyAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKY3JlYXRlR2FtZSA6IEJhY2tlbmRNb2RlbCAtPiBUaW1lLlBvc2l4IC0+IFBsYXllciAtPiB7IGthbmppU2V0IDogS2FuamlTZXQsIHJvdW5kTGVuZ3RoIDogSW50LCBzdGFydGluZ0NvdW50ZG93biA6IEludCB9IC0+ICggQmFja2VuZE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmNyZWF0ZUdhbWUgbW9kZWwgbm93IGhvc3QgY29uZmlnID0KICAgIGxldAogICAgICAgIG5leHRJZCA9CiAgICAgICAgICAgIERpY3Qua2V5cyBtb2RlbC5rZ2dhbWVzCiAgICAgICAgICAgICAgICB8PiBMaXN0LmZvbGRyIG1heCAtMQogICAgICAgICAgICAgICAgfD4gKFxuIC0+IG4gKyAxKQoKICAgICAgICBuZXdHYW1lID0KICAgICAgICAgICAgeyBnYW1lSWQgPSBuZXh0SWQKICAgICAgICAgICAgLCBob3N0ID0gaG9zdAogICAgICAgICAgICAsIHBsYXllcnMgPSBbIGhvc3QgXQogICAgICAgICAgICAsIGdhbWVTdGF0ZSA9IExvYmJ5IGNvbmZpZwogICAgICAgICAgICAsIGxhc3RVcGRhdGVkID0gVGltZS5wb3NpeFRvTWlsbGlzIG5vdwogICAgICAgICAgICAsIGJ1ZmZlcmluZyA9IEZhbHNlCiAgICAgICAgICAgICwgaW5pdGlhbEJ1ZmZlciA9IEZhbHNlCgogICAgICAgICAgICAtLSwgcm91bmRMZW5ndGggOiBJbnQKICAgICAgICAgICAgfQogICAgaW4KICAgICggeyBtb2RlbCB8IGtnZ2FtZXMgPSBEaWN0Lmluc2VydCBuZXh0SWQgbmV3R2FtZSBtb2RlbC5rZ2dhbWVzIH0sIGJyb2FkY2FzdEdhbWUgbmV3R2FtZSApCgoKam9pbkdhbWUgOiBCYWNrZW5kTW9kZWwgLT4gUGxheWVyIC0+IEdhbWVJZCAtPiAoIEJhY2tlbmRNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQpqb2luR2FtZSBtb2RlbCBwbGF5ZXIgZ2FtZUlkID0KICAgIGNhc2UgRGljdC5nZXQgZ2FtZUlkIG1vZGVsLmtnZ2FtZXMgb2YKICAgICAgICBKdXN0IGdhbWUgLT4KICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICBuZXdHYW1lID0KICAgICAgICAgICAgICAgICAgICB7IGdhbWUKICAgICAgICAgICAgICAgICAgICAgICAgfCBwbGF5ZXJzID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCA8fCBMaXN0Lm1lbWJlciBwbGF5ZXIgZ2FtZS5wbGF5ZXJzIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIgOjogZ2FtZS5wbGF5ZXJzCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUucGxheWVycwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgaW4KICAgICAgICAgICAgKCB7IG1vZGVsIHwga2dnYW1lcyA9IERpY3QuaW5zZXJ0IGdhbWVJZCBuZXdHYW1lIG1vZGVsLmtnZ2FtZXMgfSwgYnJvYWRjYXN0R2FtZSBuZXdHYW1lICkKCiAgICAgICAgXyAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKbGVhdmVHYW1lIDogQmFja2VuZE1vZGVsIC0+IFBsYXllciAtPiBHYW1lSWQgLT4gKCBCYWNrZW5kTW9kZWwsIENtZCBCYWNrZW5kTXNnICkKbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQgPQogICAgY2FzZSBEaWN0LmdldCBnYW1lSWQgbW9kZWwua2dnYW1lcyBvZgogICAgICAgIEp1c3QgZ2FtZSAtPgogICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgIG5ld0dhbWUgPQogICAgICAgICAgICAgICAgICAgIHsgZ2FtZQogICAgICAgICAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgTGlzdC5tZW1iZXIgcGxheWVyIGdhbWUucGxheWVycyB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGlzdC5FeHRyYS5yZW1vdmUgcGxheWVyIGdhbWUucGxheWVycwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lLnBsYXllcnMKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIGluCiAgICAgICAgICAgICggeyBtb2RlbCB8IGtnZ2FtZXMgPSBEaWN0Lmluc2VydCBnYW1lSWQgbmV3R2FtZSBtb2RlbC5rZ2dhbWVzIH0sIGJyb2FkY2FzdEdhbWUgbmV3R2FtZSApCgogICAgICAgIF8gLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCmxhdW5jaFBsYXkgOiBCYWNrZW5kTW9kZWwgLT4gR2FtZUlkIC0+ICggQmFja2VuZE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmxhdW5jaFBsYXkgbW9kZWwgZ2FtZUlkID0KICAgIGNhc2UgRGljdC5nZXQgZ2FtZUlkIG1vZGVsLmtnZ2FtZXMgb2YKICAgICAgICBKdXN0IGdhbWUgLT4KICAgICAgICAgICAgY2FzZSBnYW1lLmdhbWVTdGF0ZSBvZgogICAgICAgICAgICAgICAgTG9iYnkgY29uZmlnIC0+CiAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgICggbmV3U2VlZCwga2FuamlGb3JUaGlzR2FtZSwgYnVmZmVyZWRLYW5qaSApID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcKCBzLCByICkgLT4gKCBzLCBMaXN0LmRyb3AgNSByLCBMaXN0LnRha2UgNSByICkpIDx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBjb25maWcua2FuamlTZXQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSmxwdFNldCBsZXZlbHMgLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExpc3QuZmlsdGVyTWFwIChcbiAtPiBEaWN0LmdldCBuIGpscHQpIGxldmVscwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHw+IExpc3QuY29uY2F0TWFwIFN0cmluZy50b0xpc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8PiBzaHVmZmxlU2VlZCBtb2RlbC5zZWVkCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXN0b21LYW5qaVNldCBrYW5qaUxpc3QgLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggbW9kZWwuc2VlZCwga2FuamlMaXN0ICkKCiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRLYW5qaSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0LmhlYWQgYnVmZmVyZWRLYW5qaSB8PiBNYXliZS53aXRoRGVmYXVsdCAn4p2MJwoKICAgICAgICAgICAgICAgICAgICAgICAgYWxsVGhlV29yZHMgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGljdC5lbXB0eQoKICAgICAgICAgICAgICAgICAgICAgICAgbmV3R2FtZVN0YXRlID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluUGxheSA8fAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc2NvcmUgPSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBjdXJyZW50S2FuamkgPSBjdXJyZW50S2FuamkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHJlbWFpbmluZ0thbmppID0ga2FuamlGb3JUaGlzR2FtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgYnVmZmVyZWRLYW5qaSA9IExpc3QudGFpbCBidWZmZXJlZEthbmppIHw+IE1heWJlLndpdGhEZWZhdWx0IFtdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBrYW5qaVNlZW4gPSBbXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgd29yZHMgPSBEaWN0LmVtcHR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBhbGxvd2VkV29yZHMgPSBhbGxUaGVXb3JkcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgcmVxdWVzdGVkU2tpcCA9IFtdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCB0aW1lVGlsbFJvdW5kRW5kID0gY29uZmlnLnJvdW5kTGVuZ3RoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCB0aW1lVGlsbEdhbWVPdmVyID0gY29uZmlnLnN0YXJ0aW5nQ291bnRkb3duCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCByb3VuZExlbmd0aCA9IGNvbmZpZy5yb3VuZExlbmd0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgc3RhcnRpbmdDb3VudGRvd24gPSBjb25maWcuc3RhcnRpbmdDb3VudGRvd24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBuZXdHYW1lID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgZ2FtZSB8IGdhbWVTdGF0ZSA9IG5ld0dhbWVTdGF0ZSwgYnVmZmVyaW5nID0gVHJ1ZSwgaW5pdGlhbEJ1ZmZlciA9IFRydWUgfQogICAgICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAgICAgKCB7IG1vZGVsIHwga2dnYW1lcyA9IERpY3QuaW5zZXJ0IGdhbWVJZCBuZXdHYW1lIG1vZGVsLmtnZ2FtZXMsIHNlZWQgPSBuZXdTZWVkIH0KICAgICAgICAgICAgICAgICAgICAsIENtZC5iYXRjaCBbIEFwaUNhbGxzLmdldEFsbFRoZVdvcmRzIGdhbWVJZCBidWZmZXJlZEthbmppIF0KICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCiAgICAgICAgXyAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKcnVuR2FtZXMgOiBCYWNrZW5kTW9kZWwgLT4gVGltZS5Qb3NpeCAtPiAoIEJhY2tlbmRNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQpydW5HYW1lcyBtb2RlbCBub3cgPQogICAgTGlzdC5mb2xkcgogICAgICAgIChcZyAoIGN1cnJlbnRNb2RlbCwgY21kcyApIC0+CiAgICAgICAgICAgIGlmIGdhbWVSdW5uaW5nIGcgdGhlbgogICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgKCBuZXdNb2RlbCwgbmV3Q21kICkgPQogICAgICAgICAgICAgICAgICAgICAgICBydW5HYW1lIGN1cnJlbnRNb2RlbCBub3cgZy5nYW1lSWQKICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAoIHsgY3VycmVudE1vZGVsIHwga2dnYW1lcyA9IERpY3QudW5pb24gbmV3TW9kZWwua2dnYW1lcyBjdXJyZW50TW9kZWwua2dnYW1lcyB9CiAgICAgICAgICAgICAgICAsIG5ld0NtZCA6OiBjbWRzCiAgICAgICAgICAgICAgICApCgogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAoIGN1cnJlbnRNb2RlbCwgY21kcyApCiAgICAgICAgKQogICAgICAgICggbW9kZWwsIFtdICkKICAgICAgICAoRGljdC52YWx1ZXMgbW9kZWwua2dnYW1lcykKICAgICAgICB8PiBUdXBsZS5tYXBTZWNvbmQgQ21kLmJhdGNoCgoKcnVuR2FtZSA6IEJhY2tlbmRNb2RlbCAtPiBUaW1lLlBvc2l4IC0+IEdhbWVJZCAtPiAoIEJhY2tlbmRNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQpydW5HYW1lIG1vZGVsIG5vdyBnYW1lSWQgPQogICAgY2FzZSBEaWN0LmdldCBnYW1lSWQgbW9kZWwua2dnYW1lcyBvZgogICAgICAgIEp1c3QgZ2FtZSAtPgogICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgIHRpbWVTdGFtcGVkTW9kZWwgPQogICAgICAgICAgICAgICAgICAgIGFkZFRpbWVTdGFtcE1vZGVsIG1vZGVsIGdhbWVJZCBub3cKICAgICAgICAgICAgaW4KICAgICAgICAgICAgY2FzZSBnYW1lLmdhbWVTdGF0ZSBvZgogICAgICAgICAgICAgICAgTG9iYnkgY29uZmlnIC0+CiAgICAgICAgICAgICAgICAgICAgbGF1bmNoUGxheSB0aW1lU3RhbXBlZE1vZGVsIGdhbWVJZAoKICAgICAgICAgICAgICAgIEluUGxheSBfIC0+CiAgICAgICAgICAgICAgICAgICAgdG9OZXh0Um91bmQgdGltZVN0YW1wZWRNb2RlbCBnYW1lSWQKCiAgICAgICAgICAgICAgICBWaWN0b3J5IF8gLT4KICAgICAgICAgICAgICAgICAgICAoIHRpbWVTdGFtcGVkTW9kZWwsIENtZC5ub25lICkKCiAgICAgICAgICAgICAgICBHYW1lT3ZlciBfIC0+CiAgICAgICAgICAgICAgICAgICAgKCB0aW1lU3RhbXBlZE1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIF8gLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnJlcXVlc3ROZXh0S2FuamkgOiBCYWNrZW5kTW9kZWwgLT4gR2FtZUlkIC0+IFBsYXllciAtPiAoIEJhY2tlbmRNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQpyZXF1ZXN0TmV4dEthbmppIG1vZGVsIGdhbWVJZCBwbGF5ZXIgPQogICAgY2FzZSBEaWN0LmdldCBnYW1lSWQgbW9kZWwua2dnYW1lcyBvZgogICAgICAgIEp1c3QgZ2FtZSAtPgogICAgICAgICAgICBjYXNlIGdhbWUuZ2FtZVN0YXRlIG9mCiAgICAgICAgICAgICAgICBJblBsYXkgc3Vic3RhdGUgLT4KICAgICAgICAgICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgICAgICAgICAgbmV3R2FtZVN0YXRlID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluUGxheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3Vic3RhdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCByZXF1ZXN0ZWRTa2lwID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCA8fCBMaXN0Lm1lbWJlciBwbGF5ZXIgc3Vic3RhdGUucmVxdWVzdGVkU2tpcCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyIDo6IHN1YnN0YXRlLnJlcXVlc3RlZFNraXAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic3RhdGUucmVxdWVzdGVkU2tpcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0dhbWUgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBnYW1lIHwgZ2FtZVN0YXRlID0gbmV3R2FtZVN0YXRlIH0KICAgICAgICAgICAgICAgICAgICBpbgogICAgICAgICAgICAgICAgICAgICggeyBtb2RlbCB8IGtnZ2FtZXMgPSBEaWN0Lmluc2VydCBnYW1lSWQgbmV3R2FtZSBtb2RlbC5rZ2dhbWVzIH0sIGJyb2FkY2FzdEdhbWUgbmV3R2FtZSApCgogICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCiAgICAgICAgXyAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKYWxsUGxheWVyUmVxdWVzdGVkTmV4dEthbmppIGdhbWUgPQogICAgY2FzZSBnYW1lLmdhbWVTdGF0ZSBvZgogICAgICAgIEluUGxheSBzdWJzdGF0ZSAtPgogICAgICAgICAgICBTZXQuZnJvbUxpc3QgKExpc3QubWFwIC5pZCBnYW1lLnBsYXllcnMpID09IFNldC5mcm9tTGlzdCAoTGlzdC5tYXAgLmlkIHN1YnN0YXRlLnJlcXVlc3RlZFNraXApCgogICAgICAgIF8gLT4KICAgICAgICAgICAgRmFsc2UKCgphZGRXb3JkIDogQmFja2VuZE1vZGVsIC0+IEdhbWVJZCAtPiBQbGF5ZXIgLT4gU3RyaW5nIC0+ICggQmFja2VuZE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkID0KICAgIGNhc2UgRGljdC5nZXQgZ2FtZUlkIG1vZGVsLmtnZ2FtZXMgb2YKICAgICAgICBKdXN0IGdhbWUgLT4KICAgICAgICAgICAgY2FzZSBnYW1lLmdhbWVTdGF0ZSBvZgogICAgICAgICAgICAgICAgSW5QbGF5IHN1YnN0YXRlIC0+CiAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRXb3JkcyA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEaWN0LmdldCBwbGF5ZXIuaWQgc3Vic3RhdGUud29yZHMgfD4gTWF5YmUud2l0aERlZmF1bHQgW10KCiAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlck9mUGxheWVycyA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0Lmxlbmd0aCBnYW1lLnBsYXllcnMKCiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVCb251cyA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9vciAoMTAgLyB0b0Zsb2F0IG51bWJlck9mUGxheWVycykKCiAgICAgICAgICAgICAgICAgICAgICAgIHJvdW5kVGltZUJvbnVzID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb29yICg1IC8gdG9GbG9hdCBudW1iZXJPZlBsYXllcnMpCgogICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVHYW1lIG5zID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0dhbWUgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGdhbWUgfCBnYW1lU3RhdGUgPSBJblBsYXkgbnMgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICggeyBtb2RlbCB8IGtnZ2FtZXMgPSBEaWN0Lmluc2VydCBnYW1lSWQgbmV3R2FtZSBtb2RlbC5rZ2dhbWVzIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgQ21kLmJhdGNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyBicm9hZGNhc3RHYW1lIG5ld0dhbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGlmIG5vdCA8fCBjYW5BZGRXb3JkIHdvcmQgZ2FtZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRUb0Zyb250ZW5kIHBsYXllci5pZCAoV3JvbmdXb3JkVEYgd29yZCkKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENtZC5ub25lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICAgICAgbmV3U3Vic3RhdGUgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgY2FuQWRkV29yZCB3b3JkIGdhbWUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3Vic3RhdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzY29yZSA9IHN1YnN0YXRlLnNjb3JlICsgMTAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCB3b3JkcyA9IERpY3QuaW5zZXJ0IHBsYXllci5pZCAod29yZCA6OiBjdXJyZW50V29yZHMpIHN1YnN0YXRlLndvcmRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgdGltZVRpbGxSb3VuZEVuZCA9IHN1YnN0YXRlLnRpbWVUaWxsUm91bmRFbmQgKyByb3VuZFRpbWVCb251cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHRpbWVUaWxsR2FtZU92ZXIgPSBzdWJzdGF0ZS50aW1lVGlsbEdhbWVPdmVyICsgdGltZUJvbnVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN1YnN0YXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdGltZVRpbGxSb3VuZEVuZCA9IHN1YnN0YXRlLnRpbWVUaWxsUm91bmRFbmQgLSByb3VuZFRpbWVCb251cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHRpbWVUaWxsR2FtZU92ZXIgPSBzdWJzdGF0ZS50aW1lVGlsbEdhbWVPdmVyIC0gdGltZUJvbnVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlR2FtZSBuZXdTdWJzdGF0ZQoKICAgICAgICAgICAgICAgIF8gLT4KICAgICAgICAgICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIE5vdGhpbmcgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCmNhbkFkZFdvcmQgOiBTdHJpbmcgLT4gS2FuamlHdWVzc2luZ0dhbWUgLT4gQm9vbApjYW5BZGRXb3JkIHdvcmQgZ2FtZSA9CiAgICBjYXNlIGdhbWUuZ2FtZVN0YXRlIG9mCiAgICAgICAgSW5QbGF5IHN1YnN0YXRlIC0+CiAgICAgICAgICAgIGNhc2UgRGljdC5nZXQgc3Vic3RhdGUuY3VycmVudEthbmppIHN1YnN0YXRlLmFsbG93ZWRXb3JkcyBvZgogICAgICAgICAgICAgICAgSnVzdCByZWxldmFudEFsbG93ZWRXb3JkcyAtPgogICAgICAgICAgICAgICAgICAgIChub3QgPHwgTGlzdC5tZW1iZXIgd29yZCAoTGlzdC5jb25jYXQgPHwgRGljdC52YWx1ZXMgc3Vic3RhdGUud29yZHMpKQogICAgICAgICAgICAgICAgICAgICAgICAmJiBMaXN0Lm1lbWJlciB3b3JkIHJlbGV2YW50QWxsb3dlZFdvcmRzCgogICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgIEZhbHNlCgogICAgICAgIF8gLT4KICAgICAgICAgICAgRmFsc2UKCgp0b05leHRSb3VuZCA6IEJhY2tlbmRNb2RlbCAtPiBHYW1lSWQgLT4gKCBCYWNrZW5kTW9kZWwsIENtZCBCYWNrZW5kTXNnICkKdG9OZXh0Um91bmQgbW9kZWwgZ2FtZUlkID0KICAgIGNhc2UgRGljdC5nZXQgZ2FtZUlkIG1vZGVsLmtnZ2FtZXMgb2YKICAgICAgICBKdXN0IGdhbWUgLT4KICAgICAgICAgICAgY2FzZSBnYW1lLmdhbWVTdGF0ZSBvZgogICAgICAgICAgICAgICAgSW5QbGF5IHN1YnN0YXRlIC0+CiAgICAgICAgICAgICAgICAgICAgaWYgZ2FtZS5pbml0aWFsQnVmZmVyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9Nb3JlVGltZSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic3RhdGUudGltZVRpbGxHYW1lT3ZlciA8PSAxCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91bmRPdmVyID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzdGF0ZS50aW1lVGlsbFJvdW5kRW5kIDw9IDEKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdHYW1lU3RhdGUgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3Vic3RhdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0aW1lVGlsbFJvdW5kRW5kID0gbWF4IDAgPHwgc3Vic3RhdGUudGltZVRpbGxSb3VuZEVuZCAtIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCB0aW1lVGlsbEdhbWVPdmVyID0gbWF4IDAgPHwgc3Vic3RhdGUudGltZVRpbGxHYW1lT3ZlciAtIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlR2FtZSBncyA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0dhbWUgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBnYW1lIHwgZ2FtZVN0YXRlID0gSW5QbGF5IGdzIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgbW9kZWwgfCBrZ2dhbWVzID0gRGljdC5pbnNlcnQgZ2FtZUlkIG5ld0dhbWUgbW9kZWwua2dnYW1lcyB9CiAgICAgICAgICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vTW9yZVRpbWUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3R2FtZSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgZ2FtZSB8IGdhbWVTdGF0ZSA9IEdhbWVPdmVyIHsgc2NvcmUgPSBzdWJzdGF0ZS5zY29yZSB9IH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBrZ2dhbWVzID0gRGljdC5pbnNlcnQgZ2FtZUlkIG5ld0dhbWUgbW9kZWwua2dnYW1lcyB9LCBicm9hZGNhc3RHYW1lIG5ld0dhbWUgKQoKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiBhbGxQbGF5ZXJSZXF1ZXN0ZWROZXh0S2FuamkgZ2FtZSAmJiAobm90IDx8IGdhbWUuYnVmZmVyaW5nKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkTmV4dEthbmppICh1cGRhdGVHYW1lIHsgbmV3R2FtZVN0YXRlIHwgcmVxdWVzdGVkU2tpcCA9IFtdIH0pIGdhbWVJZAoKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiByb3VuZE92ZXIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZE5leHRLYW5qaSAodXBkYXRlR2FtZSBuZXdHYW1lU3RhdGUpIGdhbWVJZAoKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKCB1cGRhdGVHYW1lIG5ld0dhbWVTdGF0ZSwgYnJvYWRjYXN0R2FtZVRpbWVzIHsgZ2FtZSB8IGdhbWVTdGF0ZSA9IEluUGxheSBuZXdHYW1lU3RhdGUgfSApCgogICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCiAgICAgICAgXyAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKbG9hZE5leHRLYW5qaSA6IEJhY2tlbmRNb2RlbCAtPiBHYW1lSWQgLT4gKCBCYWNrZW5kTW9kZWwsIENtZCBCYWNrZW5kTXNnICkKbG9hZE5leHRLYW5qaSBtb2RlbCBnYW1lSWQgPQogICAgY2FzZSBEaWN0LmdldCBnYW1lSWQgbW9kZWwua2dnYW1lcyBvZgogICAgICAgIEp1c3QgZ2FtZSAtPgogICAgICAgICAgICBjYXNlIGdhbWUuZ2FtZVN0YXRlIG9mCiAgICAgICAgICAgICAgICBJblBsYXkgc3Vic3RhdGUgLT4KICAgICAgICAgICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgICAgICAgICAgbWJOZXh0S2FuamlUb0J1ZmZlciA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0LmhlYWQgc3Vic3RhdGUucmVtYWluaW5nS2FuamkKCiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUdhbWUgbmdzIGJ1ZmZlcmluZyBjbWQgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3R2FtZSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgZ2FtZSB8IGdhbWVTdGF0ZSA9IG5ncywgYnVmZmVyaW5nID0gYnVmZmVyaW5nIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBrZ2dhbWVzID0gRGljdC5pbnNlcnQgZ2FtZUlkIG5ld0dhbWUgbW9kZWwua2dnYW1lcyB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIENtZC5iYXRjaCBbIGJyb2FkY2FzdEdhbWUgbmV3R2FtZSwgY21kIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBpbgogICAgICAgICAgICAgICAgICAgIGNhc2Ugc3Vic3RhdGUuYnVmZmVyZWRLYW5qaSBvZgogICAgICAgICAgICAgICAgICAgICAgICBbXSAtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlR2FtZSAoVmljdG9yeSB7IHNjb3JlID0gc3Vic3RhdGUuc2NvcmUgfSkgRmFsc2UgQ21kLm5vbmUKCiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRLYW5qaSA6OiB0YWlsIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVHYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEluUGxheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN1YnN0YXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGN1cnJlbnRLYW5qaSA9IG5leHRLYW5qaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBrYW5qaVNlZW4gPSBzdWJzdGF0ZS5jdXJyZW50S2FuamkgOjogc3Vic3RhdGUua2FuamlTZWVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHRpbWVUaWxsUm91bmRFbmQgPSBzdWJzdGF0ZS5yb3VuZExlbmd0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCByZW1haW5pbmdLYW5qaSA9IExpc3QudGFpbCBzdWJzdGF0ZS5yZW1haW5pbmdLYW5qaSB8PiBNYXliZS53aXRoRGVmYXVsdCBbXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBidWZmZXJlZEthbmppID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXliZS5tYXAgKFxua2IgLT4gdGFpbCArKyBbIG5rYiBdKSBtYk5leHRLYW5qaVRvQnVmZmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHw+IE1heWJlLndpdGhEZWZhdWx0IHN1YnN0YXRlLmJ1ZmZlcmVkS2FuamkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKE1heWJlLm1hcCAoXG5rYiAtPiBBcGlDYWxscy5nZXRXb3JkcyBnYW1lSWQgbmtiKSBtYk5leHRLYW5qaVRvQnVmZmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHw+IE1heWJlLndpdGhEZWZhdWx0IENtZC5ub25lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgIF8gLT4KICAgICAgICAgICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIE5vdGhpbmcgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCmdhbWVSdW5uaW5nIDogS2FuamlHdWVzc2luZ0dhbWUgLT4gQm9vbApnYW1lUnVubmluZyBnYW1lID0KICAgIGNhc2UgZ2FtZS5nYW1lU3RhdGUgb2YKICAgICAgICBJblBsYXkgXyAtPgogICAgICAgICAgICBUcnVlCgogICAgICAgIF8gLT4KICAgICAgICAgICAgRmFsc2UKCgpnYW1lc1J1bm5pbmcgOiBCYWNrZW5kTW9kZWwgLT4gQm9vbApnYW1lc1J1bm5pbmcgeyBrZ2dhbWVzIH0gPQogICAgTGlzdC5hbnkKICAgICAgICAoXGcgLT4KICAgICAgICAgICAgY2FzZSBnLmdhbWVTdGF0ZSBvZgogICAgICAgICAgICAgICAgSW5QbGF5IF8gLT4KICAgICAgICAgICAgICAgICAgICBUcnVlCgogICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgIEZhbHNlCiAgICAgICAgKQogICAgICAgIChEaWN0LnZhbHVlcyBrZ2dhbWVzKQoKCmFkZFRpbWVTdGFtcCA6IEthbmppR3Vlc3NpbmdHYW1lIC0+IFRpbWUuUG9zaXggLT4gS2FuamlHdWVzc2luZ0dhbWUKYWRkVGltZVN0YW1wIGdhbWUgbm93ID0KICAgIHsgZ2FtZSB8IGxhc3RVcGRhdGVkID0gVGltZS5wb3NpeFRvTWlsbGlzIG5vdyB9CgoKYWRkVGltZVN0YW1wTW9kZWwgOiBCYWNrZW5kTW9kZWwgLT4gR2FtZUlkIC0+IFRpbWUuUG9zaXggLT4gQmFja2VuZE1vZGVsCmFkZFRpbWVTdGFtcE1vZGVsIG1vZGVsIGdhbWVJZCBub3cgPQogICAgY2FzZSBEaWN0LmdldCBnYW1lSWQgbW9kZWwua2dnYW1lcyBvZgogICAgICAgIEp1c3QgZ2FtZSAtPgogICAgICAgICAgICB7IG1vZGVsIHwga2dnYW1lcyA9IERpY3QuaW5zZXJ0IGdhbWVJZCB7IGdhbWUgfCBsYXN0VXBkYXRlZCA9IFRpbWUucG9zaXhUb01pbGxpcyBub3cgfSBtb2RlbC5rZ2dhbWVzIH0KCiAgICAgICAgXyAtPgogICAgICAgICAgICBtb2RlbAoKCmJyb2FkY2FzdEdhbWUgOiBLYW5qaUd1ZXNzaW5nR2FtZSAtPiBDbWQgQmFja2VuZE1zZwpicm9hZGNhc3RHYW1lIGdhbWUgPQogICAgbGV0CiAgICAgICAgZ2FtZVN0YXRlTGlnaHQgPQogICAgICAgICAgICBjYXNlIGdhbWUuZ2FtZVN0YXRlIG9mCiAgICAgICAgICAgICAgICBJblBsYXkgc3Vic3RhdGUgLT4KICAgICAgICAgICAgICAgICAgICBJblBsYXkgeyBzdWJzdGF0ZSB8IGFsbG93ZWRXb3JkcyA9IERpY3QuZW1wdHksIHJlbWFpbmluZ0thbmppID0gW10gfQoKICAgICAgICAgICAgICAgIF8gLT4KICAgICAgICAgICAgICAgICAgICBnYW1lLmdhbWVTdGF0ZQogICAgaW4KICAgIGJyb2FkY2FzdCA8fCBHYW1lQnJvYWRjYXN0VEYgeyBnYW1lIHwgZ2FtZVN0YXRlID0gZ2FtZVN0YXRlTGlnaHQgfQoKCmJyb2FkY2FzdEdhbWVUaW1lcyA6IEthbmppR3Vlc3NpbmdHYW1lIC0+IENtZCBCYWNrZW5kTXNnCmJyb2FkY2FzdEdhbWVUaW1lcyBnYW1lID0KICAgIGNhc2UgZ2FtZS5nYW1lU3RhdGUgb2YKICAgICAgICBJblBsYXkgc3Vic3RhdGUgLT4KICAgICAgICAgICAgYnJvYWRjYXN0IDx8CiAgICAgICAgICAgICAgICBHYW1lVGltZXNCcm9hZGNhc3RURgogICAgICAgICAgICAgICAgICAgIHsgZ2FtZUlkID0gZ2FtZS5nYW1lSWQKICAgICAgICAgICAgICAgICAgICAsIGxhc3RVcGRhdGVkID0gZ2FtZS5sYXN0VXBkYXRlZAogICAgICAgICAgICAgICAgICAgICwgdGltZVRpbGxHYW1lT3ZlciA9IHN1YnN0YXRlLnRpbWVUaWxsR2FtZU92ZXIKICAgICAgICAgICAgICAgICAgICAsIHRpbWVUaWxsUm91bmRFbmQgPSBzdWJzdGF0ZS50aW1lVGlsbFJvdW5kRW5kCiAgICAgICAgICAgICAgICAgICAgLCBidWZmZXJpbmcgPSBnYW1lLmJ1ZmZlcmluZwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgXyAtPgogICAgICAgICAgICBDbWQubm9uZQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKcmFuZG9tSkxQVEthbmppTGlzdCA6IFJhbmRvbS5TZWVkIC0+IEludCAtPiAoIFJhbmRvbS5TZWVkLCBMaXN0IENoYXIgKQpyYW5kb21KTFBUS2FuamlMaXN0IHNlZWQgbGV2ZWwgPQogICAgY2FzZSBEaWN0LmdldCBsZXZlbCBqbHB0IG9mCiAgICAgICAgSnVzdCBrYW5qaVN0ciAtPgogICAgICAgICAgICBzaHVmZmxlU2VlZCBzZWVkIChTdHJpbmcudG9MaXN0IGthbmppU3RyKQoKICAgICAgICBfIC0+CiAgICAgICAgICAgICggc2VlZCwgW10gKQoKCmpscHQgPQogICAgRGljdC5mcm9tTGlzdAogICAgICAgIFsgKCA1LCAi5pel5LiA5Zu95Lq65bm05aSn5Y2B5LqM5pys5Lit6ZW35Ye65LiJ5pmC6KGM6KaL5pyI5YiG5b6M5YmN55Sf5LqU6ZaT5LiK5p2x5Zub5LuK6YeR5Lmd5YWl5a2m6auY5YaG5a2Q5aSW5YWr5YWt5LiL5p2l5rCX5bCP5LiD5bGx6Kmx5aWz5YyX5Y2I55m+5pu45YWI5ZCN5bed5Y2D5rC05Y2K55S36KW/6Zu75qCh6Kqe5Zyf5pyo6IGe6aOf6LuK5L2V5Y2X5LiH5q+O55m95aSp5q+N54Gr5Y+z6Kqt5Y+L5bem5LyR54i26Zuo5bqX5pWZ5aOy55+l6LW36KiAIiApCiAgICAgICAgLCAoIDQsICLkvJrlkIzkuovoh6rnpL7nmbrogIXlnLDmpa3mlrnmlrDloLTlk6Hnq4vplovmiYvlipvllY/ku6PmmI7li5Xkuqznm67pgJrnkIbkvZPnlLDkuLvpoYzmhI/kuI3kvZznlKjluqblvLflhazmjIHph47ku6XmgJ3lrrbkuJblpJrmraPlronpmaLlv4PnlYzmloflhYPph43ov5HogIPnlLvmtbfpgZPpm4bliKXniankvb/lk4HoqIjmrbvnibnnp4Hlp4vmnJ3pgYvntYLlj7DluoPkvY/nhKHnnJ/mnInlj6PlsJHnlLrmlpnlt6Xlu7rnqbrmgKXmraLpgIHliIfou6LnoJTotrPnqbbmpb3nnYDnl4Xos6rlvoXoqabml4/pioDml6nmmKDopqrpqJPoi7HljLvku5XljrvlkbPlhpnlrZfnrZTlpJzpn7Pms6jluLDlj6TmrYzosrfmgqrlm7PpgLHlrqTmranpoqjntJnpu5LoirHmmKXotaTpnZLppKjlsYvoibLotbDnp4vlpI/nv5Lpp4XmtIvml4XmnI3lpJXlgJ/mm5zpo7LogonosrjloILps6Xpo6/li4nlhqzmmLzojLblvJ/niZvprZrlhYTniqzlprnlp4nmvKIiICkKICAgICAgICAsICggMywgIuaUv+itsOawkemAo+WvvumDqOWQiOW4guWGheebuOWumuWbnumBuOexs+Wun+mWouaxuuWFqOihqOaIpue1jOacgOePvuiqv+WMluW9k+e0hOmmluazleaAp+eahOimgeWItuayu+WLmeaIkOacn+WPlumDveWSjOapn+W5s+WKoOWPl+e2mumAsuaVsOiomOWIneaMh+aoqeaUr+eUo+eCueWgsea4iOa0u+WOn+WFseW+l+ino+S6pOizh+S6iOWQkemam+WLnemdouWRiuWPjeWIpOiqjeWPguWIqee1hOS/oeWcqOS7tuWBtOS7u+W8leaxguaJgOasoeaYqOirluWumOWil+S/guaEn+aDheaKleekuuWkieaJk+ebtOS4oeW8j+eiuuaenOWuueW/hea8lOats+S6ieirh+iDveS9jee9rua1geagvOeWkemBjuWxgOaUvuW4uOeKtueQg+iBt+S4juS+m+W9ueani+WJsui6q+iyu+S7mOeUseiqrOmbo+WEquWkq+WPjuaWreefs+mBlea2iOelnueVquimj+ihk+WCmeWuheWus+mFjeitpuiCsuW4reioquS5l+aui+aDs+WjsOWKqeWKtOS+i+eEtumZkOi/veWVhuiRieS8neWDjeW9ouaZr+iQveWlvemAgOmgreiyoOa4oeWkseW3ruacq+WuiOiLpeeorue+juWRveemj+acm+mdnuims+Wvn+auteaoqua3seeUs+anmOiyoea4r+itmOWRvOmBlOiJr+mYquWAmeeoi+a6gOaVl+WApOeqgeWFiei3r+enkeepjeS7luWHpuWkquWuouWQpuW4q+eZu+aYk+mAn+WtmOmjm+auuuWPt+WNmOW6p+egtOmZpOWujOmZjeiyrOaNleWNsee1puiLpui/juWckuWFt+i+nuWboOmmrOaEm+WvjOW9vOacquiInuS6oeWGt+mBqeWppuWvhOi+vOmhlOmhnuS9meeOi+i/lOWmu+iDjOeGseWuv+iWrOmZuumgvOimmuiIuemAlOioseaKnOS+v+eVmee9quWKqueyvuaVo+mdmeWpmuWWnOa1rue1tuW5uOaKvOWAkuetieiAgeabsuaJleW6reW+kuWLpOmBheWxhembkeaLm+WbsOasoOabtOWIu+izm+aKseeKr+aBkOaBr+mBoOaIu+mhmOe1tei2iuassueXm+eskeS6kuadn+S8vOWIl+aOoumAg+mBiui/t+WkouWQm+mWiee3kuaKmOiNieaarumFkuaCsuaZtOaOm+WIsOWvneaal+ebl+WQuOmZveW+oeatr+W/mOmbquWQueWomOiqpOa0l+aFo+ekvOeqk+aYlOiyp+aAkuazs+elluadr+eWsueahumztOiFueeFmeecoOaAluiAs+mggueuseaZqeWvkumrquW/meaJjemdtOaBpeWBtuWBieeMq+W5vuiqsCIgKQogICAgICAgICwgKCAyLCAi5YWa5Y2U57eP5Yy66aCY55yM6Kit5L+d5pS556ys57WQ5rS+5bqc5p+75aeU6LuN5qGI562W5Zuj5ZCE5bO26Z2p5p2R5Yui5rib5YaN56iO5Za25q+U6Ziy6KOc5aKD5bCO5Ymv566X6Ly46L+w57ea6L6y5bee5q2m6LGh5Z+f6aGN5qyn5ouF5rqW6LOe6L666YCg6KKr5oqA5L2O5b6p56e75YCL6ZaA6Kqy6ISz5qW15ZCr6JS16YeP5Z6L5rOB6Yed5bCC6LC35Y+y6ZqO566h5YW15o6l57Sw5Yq55Li45rm+6Yyy55yB5pen5qmL5bK45ZGo5p2Q5oi45aSu5Yi457eo5o2c56u56LaF5Lim55mC5o6h5qOu56u25LuL5qC56LKp5q205bCG5bmF6Iis6LK/6Kyb5p6X6KOF6Ku45YqH5rKz6Iiq6YmE5YWQ56aB5Y2w6YCG5o+b5LmF55+t5rK55pq06Lyq5Y2g5qSN5riF5YCN5Z2H5YSE5Zyn6Iq4572y5Ly45YGc54iG6Zm4546J5rOi5biv5bu257695Zu65YmH5Lmx5pmu5ris6LGK5Y6a6b2i5Zuy5Y2S55Wl5om/6aCG5bKp57e06Lu95LqG5bqB5Z+O5oKj5bGk54mI5Luk6KeS57Wh5pCN5Yuf6KOP5LuP57i+56+J6LKo5re35piH5rGg6KGA5rip5a2j5pif5rC46JGX6KqM5bqr5YiK5YOP6aaZ5Z2C5bqV5biD5a+65a6H5beo6ZyH5biM6Kem5L6d57GN5rGa5p6a6KSH6YO15Luy5qCE5pyt5p2/6aqo5YK+5bGK5be754eD6Leh5YyF6aeQ5byx57S56ZuH5pu/6aCQ54S857Ch56ug6IeT5b6L6LSI54Wn6JaE576k56eS5aWl6Kmw5Y+M5Yi657SU57+M5b+r54mH5pWs5oKp5rOJ55qu5ryB6I2S6LKv56Gs5Z+L5p+x56Wt6KKL562G6KiT5rW056ul5a6d5bCB6IO456CC5aGp6LOi6IWV5YWG5bqK5q+b57eR5bCK56Wd5p+U5q6/5r+D5ray6KGj6IKp6Zu25bm86I235rOK6buE55SY6Iej5rWF5o6D6Zuy5o6Y5o2o6Luf5rKI5YeN5Lmz5oGL57SF6YOK6IWw54Kt6LiK5YaK5YuH5qKw6I+c54+N5Y215rmW5Zar5bmy6Jmr5Yi35rmv5rq26Ymx5raZ5Yy55a2r6Yut5p6d5aGX6LuS5q+S5Y+r5oud5rC35Lm+5qOS56WI5ou+57KJ57O457a/5rGX6YqF5rm/55O25ZKy5Y+s57y26Zq76ISC6JK46IKM6ICV6YiN5rOl6ZqF54Gv6L6b56Oo6bqm5aeT562S6by757KS6Kme6IOD55Wz5py66Iaa5r+v5aGU5rK454Gw6I+T5bi95p6v5ra86Iif6LKd56ym5oaO55q/6IKv54el55Wc5Z2K5oyf5puH5ru05Ly6IiApCiAgICAgICAgXQo",
					"AQAAAAAAAAABAAAASAIAAAAAAABIAgAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					2,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAcG9ydA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"left_delete",
					null,
					"AQAAAF0AAAAAAAAAXQAAAAAAAAAvAAAAaW1wb3J0IEpzb24uRGVjb2RlIGFzIEQKaW1wb3J0IEpzb24uRW5jb2RlIGFzIEU",
					"AQAAAAAAAAABAAAAjAAAAAAAAABdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"cut",
					null,
					"AQAAAOcAAAAAAAAA5wAAAAAAAAAZAgAAb3J0IHRvUGFyZW50UG9ydCA6IEUuVmFsdWUgLT4gQ21kIG1zZwoKCnBvcnQgZnJvbVBhcmVudFBvcnQgOiAoRC5WYWx1ZSAtPiBtc2cpIC0+IFN1YiBtc2cKCgpmcm9tUGFyZW50IG1vZGVsIGRWYWwgPQogICAgY2FzZSBELmRlY29kZVZhbHVlIGZyb21QYXJlbnRQYXlsb2FkIGRWYWwgb2YKICAgICAgICBPayAoVXNlckluZm9QYXlsb2FkIHVzZXJuYW1lIHNlc3Npb25Db29raWUpIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCiAgICAgICAgRXJyIF8gLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnR5cGUgRnJvbVBhcmVudFBheWxvYWQKICAgID0gVXNlckluZm9QYXlsb2FkIFN0cmluZyBTdHJpbmcKCgpmcm9tUGFyZW50UGF5bG9hZCA9CiAgICBELm9uZU9mIFsgdXNlckluZm9QYXlsb2FkIF0KCgp1c2VySW5mb1BheWxvYWQgPQogICAgRC5tYXAyIFVzZXJJbmZvUGF5bG9hZAogICAgICAgIChELmZpZWxkICJjb29raWUiIEQuc3RyaW5nKQogICAgICAgIChELmZpZWxkICJ1c2VybmFtZSIgRC5zdHJpbmcp",
					"AQAAAAAAAAABAAAA5wAAAAAAAAAAAwAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"left_delete",
					null,
					"AQAAAOYAAAAAAAAA5gAAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAA5wAAAAAAAADnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAA5gAAAAAAAADmAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Types.elm",
			"settings":
			{
				"buffer_size": 6934,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					84,
					1,
					"cut",
					null,
					"AQAAACwIAAAAAAAALAgAAAAAAAAbAAAAfCBHb3RJbmZvRnJvbVBhcmVudCBELlZhbHVl",
					"AQAAAAAAAAABAAAALAgAAAAAAABHCAAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJ0EAAAAAAAAngQAAAAAAAAAAAAAngQAAAAAAACiBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQQAAAAAAACdBAAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"paste",
					null,
					"AQAAAKIEAAAAAAAAvQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogQAAAAAAACiBAAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAFxsAAAAAAAAcGwAAbW9kdWxlIFR5cGVzIGV4cG9zaW5nICguLikKCmltcG9ydCBCcm93c2VyIGV4cG9zaW5nIChVcmxSZXF1ZXN0KQppbXBvcnQgQnJvd3Nlci5OYXZpZ2F0aW9uIGV4cG9zaW5nIChLZXkpCmltcG9ydCBDb2RlYwppbXBvcnQgRGljdCBleHBvc2luZyAoLi4pCmltcG9ydCBIdHRwCmltcG9ydCBKc29uLkRlY29kZSBhcyBECmltcG9ydCBMYW1kZXJhIGV4cG9zaW5nIChDbGllbnRJZCwgU2Vzc2lvbklkKQppbXBvcnQgUmFuZG9tIGV4cG9zaW5nIChTZWVkKQppbXBvcnQgVGltZSBleHBvc2luZyAoUG9zaXgpCmltcG9ydCBVcmwgZXhwb3NpbmcgKFVybCkKCgp0eXBlIGFsaWFzIEZyb250ZW5kTW9kZWwgPQogICAgeyBrZXkgOiBLZXkKICAgICwgbWVzc2FnZSA6IFN0cmluZwogICAgLCBrZ2dhbWVzIDogRGljdCBJbnQgS2FuamlHdWVzc2luZ0dhbWUKICAgICwgdGhpc1BsYXllciA6IE1heWJlIFBsYXllcgogICAgLCBwbGF5ZXJzIDogTGlzdCBQbGF5ZXIKICAgICwga2dnV29yZElucHV0IDogTWF5YmUgU3RyaW5nCiAgICAsIGtnZ1dyb25nV29yZEJ1ZmZlciA6IE1heWJlIFN0cmluZwogICAgLCBrZ2dDb25maWdJbnB1dHMgOgogICAgICAgIHsga2dnUmFuZG9tS2FuamlJbnB1dCA6IE1heWJlIFN0cmluZwogICAgICAgICwga2dnUm91bmRMZW5ndGhJbnB1dCA6IE1heWJlIFN0cmluZwogICAgICAgICwga2dnU3RhcnRpbmdDb3VudGRvd25JbnB1dCA6IE1heWJlIFN0cmluZwogICAgICAgIH0KICAgICwga2dnU3luY2luZyA6IEJvb2wKICAgICwgbm93IDogVGltZS5Qb3NpeAogICAgfQoKCnR5cGUgYWxpYXMgQmFja2VuZE1vZGVsID0KICAgIHsgbWVzc2FnZSA6IFN0cmluZwogICAgLCBrZ2dhbWVzIDogRGljdCBJbnQgS2FuamlHdWVzc2luZ0dhbWUKICAgICwgcGxheWVycyA6CiAgICAgICAgRGljdAogICAgICAgICAgICBTZXNzaW9uSWQKICAgICAgICAgICAgeyBwbGF5ZXIgOiBQbGF5ZXIKICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgOiBQaHBTZXNzaW9uSWQKICAgICAgICAgICAgfQogICAgLCBzZWVkIDogU2VlZAogICAgfQoKCnR5cGUgYWxpYXMgVXNlcm5hbWUgPQogICAgU3RyaW5nCgoKdHlwZSBhbGlhcyBQaHBTZXNzaW9uSWQgPQogICAgU3RyaW5nCgoKdHlwZSBGcm9udGVuZE1zZwogICAgPSBVcmxDbGlja2VkIFVybFJlcXVlc3QKICAgIHwgVXJsQ2hhbmdlZCBVcmwKICAgIHwgR290SW5mb0Zyb21QYXJlbnQgRC5WYWx1ZQogICAgfCBSZXFHZXRLZXkKICAgIHwgS2dnU2V0Q3VzdG9tS2FuamlTZXQgU3RyaW5nCiAgICB8IEtnZ1NldEthbmppU2V0IEthbmppU2V0IEludAogICAgfCBLZ2dTdGFydEdhbWUgR2FtZUlkCiAgICB8IEtnZ1dvcmRJbnB1dCBTdHJpbmcKICAgIHwgS2dnSG9zdEdhbWUKICAgIHwgS2dnSm9pbkdhbWUgSW50CiAgICB8IEtnZ0xlYXZlR2FtZSBJbnQKICAgIHwgS2dnU2VuZFdvcmQgR2FtZUlkCiAgICB8IEtnZ1JlcXVlc3ROZXh0S2FuamkgR2FtZUlkCiAgICB8IEdvdFRpbWVGIFRpbWUuUG9zaXgKICAgIHwgU2VuZFRvQmFja2VuZFdpdGhUaW1lIFRvQmFja2VuZAogICAgfCBOb09wRnJvbnRlbmRNc2cKCgp0eXBlIFRvQmFja2VuZAogICAgPSBHZXRLZXlzVEIKICAgIHwgUGxheWVySW5mb1N1Ym1pdHRlZFRCIFVzZXJuYW1lIFBocFNlc3Npb25JZAogICAgfCBDcmVhdGVHYW1lVEIgUGxheWVyIHsga2FuamlTZXQgOiBLYW5qaVNldCwgcm91bmRMZW5ndGggOiBJbnQsIHN0YXJ0aW5nQ291bnRkb3duIDogSW50IH0gVGltZS5Qb3NpeAogICAgfCBKb2luVEIgUGxheWVyIEdhbWVJZAogICAgfCBMZWF2ZVRCIFBsYXllciBHYW1lSWQKICAgIHwgVXBkYXRlQ29uZmlnVEIgR2FtZUlkIHsga2FuamlTZXQgOiBLYW5qaVNldCwgcm91bmRMZW5ndGggOiBJbnQsIHN0YXJ0aW5nQ291bnRkb3duIDogSW50IH0KICAgIHwgU3RhcnRUQiBHYW1lSWQgVGltZS5Qb3NpeAogICAgfCBSZXF1ZXN0TmV4dEthbmppVEIgR2FtZUlkIFBsYXllcgogICAgfCBBZGRXb3JkVEIgR2FtZUlkIFBsYXllciBTdHJpbmcKICAgIHwgTm9PcFRCCgoKdHlwZSBCYWNrZW5kTXNnCiAgICA9IENsaWVudENvbm5lY3RlZCBTZXNzaW9uSWQgQ2xpZW50SWQKICAgIHwgQ2xpZW50RGlzY29ubmVjdGVkIFNlc3Npb25JZCBDbGllbnRJZAogICAgCiAgICB8IEdvdEpNZGljdFNlYXJjaFJlc3VsdHMgR2FtZUlkIENoYXIgKFJlc3VsdCBIdHRwLkVycm9yIChMaXN0IEphcERpY3RFbnRyeSkpCiAgICB8IEdldEtleXMKICAgIHwgR290S2V5cyAoUmVzdWx0IEh0dHAuRXJyb3IgU3RyaW5nKQogICAgfCBHb3RUaW1lIFRpbWUuUG9zaXgKICAgIHwgUnVuR2FtZXMgVGltZS5Qb3NpeAogICAgfCBOb09wQmFja2VuZE1zZwoKCnR5cGUgVG9Gcm9udGVuZAogICAgPSBUb0Zyb250ZW5kTXNnVEYgU3RyaW5nCiAgICB8IEdhbWVCcm9hZGNhc3RURiBLYW5qaUd1ZXNzaW5nR2FtZQogICAgfCBHYW1lVGltZXNCcm9hZGNhc3RURgogICAgICAgIHsgZ2FtZUlkIDogR2FtZUlkCiAgICAgICAgLCBsYXN0VXBkYXRlZCA6IEludAogICAgICAgICwgdGltZVRpbGxHYW1lT3ZlciA6IEludAogICAgICAgICwgdGltZVRpbGxSb3VuZEVuZCA6IEludAogICAgICAgICwgYnVmZmVyaW5nIDogQm9vbAogICAgICAgIH0KICAgIHwgV3JvbmdXb3JkVEYgU3RyaW5nCiAgICB8IFBsYXllckluZm9SZWdpc3RlcmVkVEYgUGxheWVyCiAgICB8IE5vT3BURgoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKdHlwZSBTdGF0dXMKICAgID0gSW5pdGlhbAogICAgfCBXYWl0aW5nCiAgICB8IFN1Y2Nlc3MKICAgIHwgRmFpbHVyZQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKdHlwZSBhbGlhcyBQbGF5ZXIgPQogICAgeyBpZCA6IENsaWVudElkCiAgICAsIG5hbWUgOiBVc2VybmFtZQogICAgfQoKCnR5cGUgYWxpYXMgUGxheWVySWQgPQogICAgSW50CgoKdHlwZSBhbGlhcyBHYW1lSWQgPQogICAgSW50CgoKdHlwZSBhbGlhcyBLYW5qaUd1ZXNzaW5nR2FtZSA9CiAgICB7IGdhbWVJZCA6IEludAogICAgLCBob3N0IDogUGxheWVyCiAgICAsIHBsYXllcnMgOiBMaXN0IFBsYXllcgogICAgLCBnYW1lU3RhdGUgOiBLR0dhbWVTdGF0ZQogICAgLCBsYXN0VXBkYXRlZCA6IEludAogICAgLCBidWZmZXJpbmcgOiBCb29sCiAgICAsIGluaXRpYWxCdWZmZXIgOiBCb29sCgogICAgLS0sIHJvdW5kTGVuZ3RoIDogSW50CiAgICB9CgoKdHlwZSBLR0dhbWVTdGF0ZQogICAgPSBMb2JieQogICAgICAgIHsga2FuamlTZXQgOiBLYW5qaVNldAogICAgICAgICwgcm91bmRMZW5ndGggOiBJbnQKICAgICAgICAsIHN0YXJ0aW5nQ291bnRkb3duIDogSW50CiAgICAgICAgfQogICAgfCBJblBsYXkKICAgICAgICB7IHNjb3JlIDogSW50CiAgICAgICAgLCBjdXJyZW50S2FuamkgOiBDaGFyCiAgICAgICAgLCByZW1haW5pbmdLYW5qaSA6IExpc3QgQ2hhcgogICAgICAgICwgYnVmZmVyZWRLYW5qaSA6IExpc3QgQ2hhcgogICAgICAgICwga2FuamlTZWVuIDogTGlzdCBDaGFyCiAgICAgICAgLCB3b3JkcyA6IERpY3QgQ2xpZW50SWQgKExpc3QgU3RyaW5nKQogICAgICAgICwgYWxsb3dlZFdvcmRzIDogRGljdCBDaGFyIChMaXN0IFN0cmluZykKICAgICAgICAsIHJlcXVlc3RlZFNraXAgOiBMaXN0IFBsYXllcgogICAgICAgICwgdGltZVRpbGxSb3VuZEVuZCA6IEludAogICAgICAgICwgdGltZVRpbGxHYW1lT3ZlciA6IEludAogICAgICAgICwgcm91bmRMZW5ndGggOiBJbnQKICAgICAgICAsIHN0YXJ0aW5nQ291bnRkb3duIDogSW50CiAgICAgICAgfQogICAgfCBWaWN0b3J5IHsgc2NvcmUgOiBJbnQgfQogICAgfCBHYW1lT3ZlciB7IHNjb3JlIDogSW50IH0KCgp0eXBlIEthbmppU2V0CiAgICA9IEpscHRTZXQgKExpc3QgSW50KQogICAgfCBDdXN0b21LYW5qaVNldCAoTGlzdCBDaGFyKQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKdHlwZSBhbGlhcyBLYW5qaWRpY0VudHJ5ID0KICAgIHsga2FuamkgOiBTdHJpbmcKICAgICwgY3BWYWx1ZXMgOiBMaXN0ICggU3RyaW5nLCBTdHJpbmcgKQogICAgLCByYWRWYWx1ZXMgOiBMaXN0ICggU3RyaW5nLCBJbnQgKQoKICAgIC0tIG1pc2MKICAgICwgZ3JhZGUgOiBNYXliZSBJbnQKICAgICwgc3Ryb2tlQ291bnQgOiBMaXN0IEludAogICAgLCB2YXJpYW50cyA6IExpc3QgKCAoIFN0cmluZywgU3RyaW5nICksIE1heWJlIFN0cmluZyApCiAgICAsIGZyZXEgOiBNYXliZSBJbnQKICAgICwgcmFkTmFtZSA6IExpc3QgU3RyaW5nCiAgICAsIGpscHQgOiBNYXliZSBJbnQKCiAgICAtLQogICAgLCBkaWNOdW1iZXIgOiBMaXN0ICggU3RyaW5nLCBTdHJpbmcgKQogICAgLCBxdWVyeUNvZGUgOiBMaXN0ICggU3RyaW5nLCBTdHJpbmcgKQogICAgLCBza2lwTWlzc2NsYXNzIDogTGlzdCAoIFN0cmluZywgU3RyaW5nICkKCiAgICAtLSByZWFkaW5nL21lYW5pbmcKICAgICwgcmVhZGluZ3MgOiBMaXN0IHsgclR5cGUgOiBTdHJpbmcsIG9uVHlwZSA6IE1heWJlIFN0cmluZywgclN0YXR1cyA6IE1heWJlIFN0cmluZywgcmVhZGluZyA6IFN0cmluZyB9CiAgICAsIG1lYW5pbmdzIDogTGlzdCAoIFN0cmluZywgU3RyaW5nICkKICAgICwgbmFub3JpIDogTGlzdCBTdHJpbmcKCiAgICAtLSBjdXN0b20gZmllbGRzCiAgICAsIGNvcmVNZWFuaW5ncyA6IExpc3QgKCBTdHJpbmcsIFN0cmluZyApCiAgICAsIGV4YW1wbGVzIDogTGlzdCAoIFN0cmluZywgU3RyaW5nICkKICAgICwgZGVjb21wb3NpdGlvbiA6IE1heWJlIFN0cmluZwogICAgLCBldHltb2xvZ3kgOiBNYXliZSB7IGhpbnQgOiBNYXliZSBTdHJpbmcsIGV0eW0gOiBNYXliZSBTdHJpbmcgfQogICAgfQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIEpNRGljdAoKCnR5cGUgYWxpYXMgSmFwRGljdEVudHJ5ID0KICAgIHsgZW50X3NlcSA6IEludAogICAgLCBrX2VsZSA6IExpc3QgS2FuamlFbGVtZW50CiAgICAsIHJfZWxlIDogTGlzdCBSZWFkaW5nRWxlbWVudAogICAgLCBzZW5zZSA6IExpc3QgU2Vuc2UKICAgICwgc2hvd2luZ0V2ZXJ5U2Vuc2UgOiBCb29sCiAgICB9CgoKdHlwZSBhbGlhcyBLYW5qaUVsZW1lbnQgPQogICAgeyBrZWIgOiBTdHJpbmcKICAgICwga19pbmYgOiBMaXN0IFN0cmluZwogICAgLCBrX3ByaSA6IExpc3QgU3RyaW5nCiAgICB9CgoKdHlwZSBhbGlhcyBSZWFkaW5nRWxlbWVudCA9CiAgICB7IHJlYiA6IFN0cmluZwogICAgLCByZV9ub2thbmppIDogQm9vbAogICAgLCByZV9yZXN0ciA6IExpc3QgU3RyaW5nCiAgICAsIHJlX2luZiA6IExpc3QgU3RyaW5nCiAgICAsIHJlX3ByaSA6IExpc3QgU3RyaW5nCiAgICB9CgoKdHlwZSBhbGlhcyBTZW5zZSA9CiAgICB7IHN0YWdrIDogTGlzdCBTdHJpbmcKICAgICwgc3RhZ3IgOiBMaXN0IFN0cmluZwogICAgLCBwb3MgOiBMaXN0IFN0cmluZwogICAgLCB4cmVmIDogTGlzdCBTdHJpbmcKICAgICwgYW50IDogTGlzdCBTdHJpbmcKICAgICwgZmllbGQgOiBMaXN0IFN0cmluZwogICAgLCBtaXNjIDogTGlzdCBTdHJpbmcKICAgICwgc19pbmYgOiBMaXN0IFN0cmluZwogICAgLCBsc291cmNlIDogTGlzdCBMU291cmNlCiAgICAsIGRpYWwgOiBMaXN0IFN0cmluZwogICAgLCBnbG9zcyA6IExpc3QgR2xvc3MKICAgICwgZXhhbXBsZSA6IExpc3QgRXhhbXBsZQogICAgfQoKCnR5cGUgTFNvdXJjZQogICAgPSBMU291cmNlCiAgICAgICAgU3RyaW5nCiAgICAgICAgeyB4bWxMYW5nIDogTWF5YmUgU3RyaW5nIC0tIGRlZiBlbmcKICAgICAgICAsIGxzX3R5cGUgOiBNYXliZSBTdHJpbmcKICAgICAgICAsIGxzX3dhc2VpIDogQm9vbAogICAgICAgIH0KCgp0eXBlIEdsb3NzCiAgICA9IEdsb3NzCiAgICAgICAgU3RyaW5nCiAgICAgICAgeyB4bWxMYW5nIDogTWF5YmUgU3RyaW5nIC0tIGRlZiBlbmcKICAgICAgICAsIGdfZ2VuZCA6IE1heWJlIFN0cmluZwogICAgICAgICwgZ190eXBlIDogTWF5YmUgU3RyaW5nCiAgICAgICAgfQoKCnR5cGUgYWxpYXMgRXhhbXBsZSA9CiAgICB7IGV4X3NyY2UgOiBTdHJpbmcKICAgICwgZXhfdGV4dCA6IFN0cmluZwogICAgLCBleF9zZW50IDogTGlzdCBFeF9zZW50CiAgICB9CgoKdHlwZSBFeF9zZW50CiAgICA9IEV4X3NlbnQKICAgICAgICBTdHJpbmcKICAgICAgICB7IHhtbExhbmcgOiBNYXliZSBTdHJpbmcKICAgICAgICAsIGV4X3NyY2UgOiBNYXliZSBTdHJpbmcKICAgICAgICB9CgoKdHlwZSBKTWRpY3RMYW5ndWFnZQogICAgPSBTZWFyY2hJbkZyZW5jaAogICAgfCBTZWFyY2hJbkVuZ2xpc2gKICAgIHwgU2VhcmNoRXZlcnl0aGluZwoKCnR5cGUgYWxpYXMgSk1kaWN0RnJvbUphcFNlYXJjaCA9CiAgICB7IHNlYXJjaFN0ciA6IFN0cmluZwogICAgLCBoYXNLYW5qaSA6IEJvb2wKICAgICwgdGFyZ2V0TGFuZ3VhZ2UgOiBKTWRpY3RMYW5ndWFnZQogICAgfQoKCnR5cGUgYWxpYXMgSk1kaWN0VG9KYXBTZWFyY2ggPQogICAgeyBzZWFyY2hTdHIgOiBTdHJpbmcKICAgICwgdGFyZ2V0TGFuZ3VhZ2UgOiBKTWRpY3RMYW5ndWFnZQogICAgfQoKCnR5cGUgYWxpYXMgVGF0b2ViYUV4YW1wbGUgPQogICAgeyB0ZXh0IDogU3RyaW5nCiAgICAsIHRyYW5zbGF0aW9ucyA6IExpc3QgVGF0b2ViYVRyYW5zbGF0aW9uCiAgICAsIHRyYW5zY3JpcHRpb25zIDogTGlzdCBUYXRvZWJhVHJhbnNjcmlwdGlvbgogICAgfQoKCnR5cGUgYWxpYXMgVGF0b2ViYVRyYW5zbGF0aW9uID0KICAgICggU3RyaW5nLCBTdHJpbmcgKQoKCnR5cGUgYWxpYXMgVGF0b2ViYVRyYW5zY3JpcHRpb24gPQogICAgU3RyaW5nCg",
					"AQAAAAAAAAABAAAAvQQAAAAAAAC9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAuAQAAAAAAAC4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "String"
					},
					"BwAAALYEAAAAAAAAtwQAAAAAAAAAAAAAtwQAAAAAAAC3BAAAAAAAAAcAAABELlZhbHVltwQAAAAAAAC4BAAAAAAAAAAAAAC4BAAAAAAAALkEAAAAAAAAAAAAALkEAAAAAAAAugQAAAAAAAAAAAAAugQAAAAAAAC7BAAAAAAAAAAAAAC7BAAAAAAAALwEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgQAAAAAAAC9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAAvAQAAAAAAAC8BAAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAvAQAAAAAAAC8BAAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAWwQAAAAAAABbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAWwQAAAAAAABbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAWGwAAbW9kdWxlIFR5cGVzIGV4cG9zaW5nICguLikKCmltcG9ydCBCcm93c2VyIGV4cG9zaW5nIChVcmxSZXF1ZXN0KQppbXBvcnQgQnJvd3Nlci5OYXZpZ2F0aW9uIGV4cG9zaW5nIChLZXkpCmltcG9ydCBDb2RlYwppbXBvcnQgRGljdCBleHBvc2luZyAoLi4pCmltcG9ydCBIdHRwCmltcG9ydCBKc29uLkRlY29kZSBhcyBECmltcG9ydCBMYW1kZXJhIGV4cG9zaW5nIChDbGllbnRJZCwgU2Vzc2lvbklkKQppbXBvcnQgUmFuZG9tIGV4cG9zaW5nIChTZWVkKQppbXBvcnQgVGltZSBleHBvc2luZyAoUG9zaXgpCmltcG9ydCBVcmwgZXhwb3NpbmcgKFVybCkKCgp0eXBlIGFsaWFzIEZyb250ZW5kTW9kZWwgPQogICAgeyBrZXkgOiBLZXkKICAgICwgbWVzc2FnZSA6IFN0cmluZwogICAgLCBrZ2dhbWVzIDogRGljdCBJbnQgS2FuamlHdWVzc2luZ0dhbWUKICAgICwgdGhpc1BsYXllciA6IE1heWJlIFBsYXllcgogICAgLCBwbGF5ZXJzIDogTGlzdCBQbGF5ZXIKICAgICwga2dnV29yZElucHV0IDogTWF5YmUgU3RyaW5nCiAgICAsIGtnZ1dyb25nV29yZEJ1ZmZlciA6IE1heWJlIFN0cmluZwogICAgLCBrZ2dDb25maWdJbnB1dHMgOgogICAgICAgIHsga2dnUmFuZG9tS2FuamlJbnB1dCA6IE1heWJlIFN0cmluZwogICAgICAgICwga2dnUm91bmRMZW5ndGhJbnB1dCA6IE1heWJlIFN0cmluZwogICAgICAgICwga2dnU3RhcnRpbmdDb3VudGRvd25JbnB1dCA6IE1heWJlIFN0cmluZwogICAgICAgIH0KICAgICwga2dnU3luY2luZyA6IEJvb2wKICAgICwgbm93IDogVGltZS5Qb3NpeAogICAgfQoKCnR5cGUgYWxpYXMgQmFja2VuZE1vZGVsID0KICAgIHsgbWVzc2FnZSA6IFN0cmluZwogICAgLCBrZ2dhbWVzIDogRGljdCBJbnQgS2FuamlHdWVzc2luZ0dhbWUKICAgICwgcGxheWVycyA6CiAgICAgICAgRGljdAogICAgICAgICAgICBTZXNzaW9uSWQKICAgICAgICAgICAgeyBwbGF5ZXIgOiBQbGF5ZXIKICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgOiBQaHBTZXNzaW9uSWQKICAgICAgICAgICAgfQogICAgLCBzZWVkIDogU2VlZAogICAgfQoKCnR5cGUgYWxpYXMgVXNlcm5hbWUgPQogICAgU3RyaW5nCgoKdHlwZSBhbGlhcyBQaHBTZXNzaW9uSWQgPQogICAgU3RyaW5nCgoKdHlwZSBGcm9udGVuZE1zZwogICAgPSBVcmxDbGlja2VkIFVybFJlcXVlc3QKICAgIHwgVXJsQ2hhbmdlZCBVcmwKICAgIHwgR290SW5mb0Zyb21QYXJlbnQgU3RyaW5nCiAgICB8IFJlcUdldEtleQogICAgfCBLZ2dTZXRDdXN0b21LYW5qaVNldCBTdHJpbmcKICAgIHwgS2dnU2V0S2FuamlTZXQgS2FuamlTZXQgSW50CiAgICB8IEtnZ1N0YXJ0R2FtZSBHYW1lSWQKICAgIHwgS2dnV29yZElucHV0IFN0cmluZwogICAgfCBLZ2dIb3N0R2FtZQogICAgfCBLZ2dKb2luR2FtZSBJbnQKICAgIHwgS2dnTGVhdmVHYW1lIEludAogICAgfCBLZ2dTZW5kV29yZCBHYW1lSWQKICAgIHwgS2dnUmVxdWVzdE5leHRLYW5qaSBHYW1lSWQKICAgIHwgR290VGltZUYgVGltZS5Qb3NpeAogICAgfCBTZW5kVG9CYWNrZW5kV2l0aFRpbWUgVG9CYWNrZW5kCiAgICB8IE5vT3BGcm9udGVuZE1zZwoKCnR5cGUgVG9CYWNrZW5kCiAgICA9IEdldEtleXNUQgogICAgfCBQbGF5ZXJJbmZvU3VibWl0dGVkVEIgVXNlcm5hbWUgUGhwU2Vzc2lvbklkCiAgICB8IENyZWF0ZUdhbWVUQiBQbGF5ZXIgeyBrYW5qaVNldCA6IEthbmppU2V0LCByb3VuZExlbmd0aCA6IEludCwgc3RhcnRpbmdDb3VudGRvd24gOiBJbnQgfSBUaW1lLlBvc2l4CiAgICB8IEpvaW5UQiBQbGF5ZXIgR2FtZUlkCiAgICB8IExlYXZlVEIgUGxheWVyIEdhbWVJZAogICAgfCBVcGRhdGVDb25maWdUQiBHYW1lSWQgeyBrYW5qaVNldCA6IEthbmppU2V0LCByb3VuZExlbmd0aCA6IEludCwgc3RhcnRpbmdDb3VudGRvd24gOiBJbnQgfQogICAgfCBTdGFydFRCIEdhbWVJZCBUaW1lLlBvc2l4CiAgICB8IFJlcXVlc3ROZXh0S2FuamlUQiBHYW1lSWQgUGxheWVyCiAgICB8IEFkZFdvcmRUQiBHYW1lSWQgUGxheWVyIFN0cmluZwogICAgfCBOb09wVEIKCgp0eXBlIEJhY2tlbmRNc2cKICAgID0gQ2xpZW50Q29ubmVjdGVkIFNlc3Npb25JZCBDbGllbnRJZAogICAgfCBDbGllbnREaXNjb25uZWN0ZWQgU2Vzc2lvbklkIENsaWVudElkCiAgICB8IEdvdEpNZGljdFNlYXJjaFJlc3VsdHMgR2FtZUlkIENoYXIgKFJlc3VsdCBIdHRwLkVycm9yIChMaXN0IEphcERpY3RFbnRyeSkpCiAgICB8IEdldEtleXMKICAgIHwgR290S2V5cyAoUmVzdWx0IEh0dHAuRXJyb3IgU3RyaW5nKQogICAgfCBHb3RUaW1lIFRpbWUuUG9zaXgKICAgIHwgUnVuR2FtZXMgVGltZS5Qb3NpeAogICAgfCBOb09wQmFja2VuZE1zZwoKCnR5cGUgVG9Gcm9udGVuZAogICAgPSBUb0Zyb250ZW5kTXNnVEYgU3RyaW5nCiAgICB8IEdhbWVCcm9hZGNhc3RURiBLYW5qaUd1ZXNzaW5nR2FtZQogICAgfCBHYW1lVGltZXNCcm9hZGNhc3RURgogICAgICAgIHsgZ2FtZUlkIDogR2FtZUlkCiAgICAgICAgLCBsYXN0VXBkYXRlZCA6IEludAogICAgICAgICwgdGltZVRpbGxHYW1lT3ZlciA6IEludAogICAgICAgICwgdGltZVRpbGxSb3VuZEVuZCA6IEludAogICAgICAgICwgYnVmZmVyaW5nIDogQm9vbAogICAgICAgIH0KICAgIHwgV3JvbmdXb3JkVEYgU3RyaW5nCiAgICB8IFBsYXllckluZm9SZWdpc3RlcmVkVEYgUGxheWVyCiAgICB8IE5vT3BURgoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKdHlwZSBTdGF0dXMKICAgID0gSW5pdGlhbAogICAgfCBXYWl0aW5nCiAgICB8IFN1Y2Nlc3MKICAgIHwgRmFpbHVyZQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKdHlwZSBhbGlhcyBQbGF5ZXIgPQogICAgeyBpZCA6IENsaWVudElkCiAgICAsIG5hbWUgOiBVc2VybmFtZQogICAgfQoKCnR5cGUgYWxpYXMgUGxheWVySWQgPQogICAgSW50CgoKdHlwZSBhbGlhcyBHYW1lSWQgPQogICAgSW50CgoKdHlwZSBhbGlhcyBLYW5qaUd1ZXNzaW5nR2FtZSA9CiAgICB7IGdhbWVJZCA6IEludAogICAgLCBob3N0IDogUGxheWVyCiAgICAsIHBsYXllcnMgOiBMaXN0IFBsYXllcgogICAgLCBnYW1lU3RhdGUgOiBLR0dhbWVTdGF0ZQogICAgLCBsYXN0VXBkYXRlZCA6IEludAogICAgLCBidWZmZXJpbmcgOiBCb29sCiAgICAsIGluaXRpYWxCdWZmZXIgOiBCb29sCgogICAgLS0sIHJvdW5kTGVuZ3RoIDogSW50CiAgICB9CgoKdHlwZSBLR0dhbWVTdGF0ZQogICAgPSBMb2JieQogICAgICAgIHsga2FuamlTZXQgOiBLYW5qaVNldAogICAgICAgICwgcm91bmRMZW5ndGggOiBJbnQKICAgICAgICAsIHN0YXJ0aW5nQ291bnRkb3duIDogSW50CiAgICAgICAgfQogICAgfCBJblBsYXkKICAgICAgICB7IHNjb3JlIDogSW50CiAgICAgICAgLCBjdXJyZW50S2FuamkgOiBDaGFyCiAgICAgICAgLCByZW1haW5pbmdLYW5qaSA6IExpc3QgQ2hhcgogICAgICAgICwgYnVmZmVyZWRLYW5qaSA6IExpc3QgQ2hhcgogICAgICAgICwga2FuamlTZWVuIDogTGlzdCBDaGFyCiAgICAgICAgLCB3b3JkcyA6IERpY3QgQ2xpZW50SWQgKExpc3QgU3RyaW5nKQogICAgICAgICwgYWxsb3dlZFdvcmRzIDogRGljdCBDaGFyIChMaXN0IFN0cmluZykKICAgICAgICAsIHJlcXVlc3RlZFNraXAgOiBMaXN0IFBsYXllcgogICAgICAgICwgdGltZVRpbGxSb3VuZEVuZCA6IEludAogICAgICAgICwgdGltZVRpbGxHYW1lT3ZlciA6IEludAogICAgICAgICwgcm91bmRMZW5ndGggOiBJbnQKICAgICAgICAsIHN0YXJ0aW5nQ291bnRkb3duIDogSW50CiAgICAgICAgfQogICAgfCBWaWN0b3J5IHsgc2NvcmUgOiBJbnQgfQogICAgfCBHYW1lT3ZlciB7IHNjb3JlIDogSW50IH0KCgp0eXBlIEthbmppU2V0CiAgICA9IEpscHRTZXQgKExpc3QgSW50KQogICAgfCBDdXN0b21LYW5qaVNldCAoTGlzdCBDaGFyKQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKdHlwZSBhbGlhcyBLYW5qaWRpY0VudHJ5ID0KICAgIHsga2FuamkgOiBTdHJpbmcKICAgICwgY3BWYWx1ZXMgOiBMaXN0ICggU3RyaW5nLCBTdHJpbmcgKQogICAgLCByYWRWYWx1ZXMgOiBMaXN0ICggU3RyaW5nLCBJbnQgKQoKICAgIC0tIG1pc2MKICAgICwgZ3JhZGUgOiBNYXliZSBJbnQKICAgICwgc3Ryb2tlQ291bnQgOiBMaXN0IEludAogICAgLCB2YXJpYW50cyA6IExpc3QgKCAoIFN0cmluZywgU3RyaW5nICksIE1heWJlIFN0cmluZyApCiAgICAsIGZyZXEgOiBNYXliZSBJbnQKICAgICwgcmFkTmFtZSA6IExpc3QgU3RyaW5nCiAgICAsIGpscHQgOiBNYXliZSBJbnQKCiAgICAtLQogICAgLCBkaWNOdW1iZXIgOiBMaXN0ICggU3RyaW5nLCBTdHJpbmcgKQogICAgLCBxdWVyeUNvZGUgOiBMaXN0ICggU3RyaW5nLCBTdHJpbmcgKQogICAgLCBza2lwTWlzc2NsYXNzIDogTGlzdCAoIFN0cmluZywgU3RyaW5nICkKCiAgICAtLSByZWFkaW5nL21lYW5pbmcKICAgICwgcmVhZGluZ3MgOiBMaXN0IHsgclR5cGUgOiBTdHJpbmcsIG9uVHlwZSA6IE1heWJlIFN0cmluZywgclN0YXR1cyA6IE1heWJlIFN0cmluZywgcmVhZGluZyA6IFN0cmluZyB9CiAgICAsIG1lYW5pbmdzIDogTGlzdCAoIFN0cmluZywgU3RyaW5nICkKICAgICwgbmFub3JpIDogTGlzdCBTdHJpbmcKCiAgICAtLSBjdXN0b20gZmllbGRzCiAgICAsIGNvcmVNZWFuaW5ncyA6IExpc3QgKCBTdHJpbmcsIFN0cmluZyApCiAgICAsIGV4YW1wbGVzIDogTGlzdCAoIFN0cmluZywgU3RyaW5nICkKICAgICwgZGVjb21wb3NpdGlvbiA6IE1heWJlIFN0cmluZwogICAgLCBldHltb2xvZ3kgOiBNYXliZSB7IGhpbnQgOiBNYXliZSBTdHJpbmcsIGV0eW0gOiBNYXliZSBTdHJpbmcgfQogICAgfQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIEpNRGljdAoKCnR5cGUgYWxpYXMgSmFwRGljdEVudHJ5ID0KICAgIHsgZW50X3NlcSA6IEludAogICAgLCBrX2VsZSA6IExpc3QgS2FuamlFbGVtZW50CiAgICAsIHJfZWxlIDogTGlzdCBSZWFkaW5nRWxlbWVudAogICAgLCBzZW5zZSA6IExpc3QgU2Vuc2UKICAgICwgc2hvd2luZ0V2ZXJ5U2Vuc2UgOiBCb29sCiAgICB9CgoKdHlwZSBhbGlhcyBLYW5qaUVsZW1lbnQgPQogICAgeyBrZWIgOiBTdHJpbmcKICAgICwga19pbmYgOiBMaXN0IFN0cmluZwogICAgLCBrX3ByaSA6IExpc3QgU3RyaW5nCiAgICB9CgoKdHlwZSBhbGlhcyBSZWFkaW5nRWxlbWVudCA9CiAgICB7IHJlYiA6IFN0cmluZwogICAgLCByZV9ub2thbmppIDogQm9vbAogICAgLCByZV9yZXN0ciA6IExpc3QgU3RyaW5nCiAgICAsIHJlX2luZiA6IExpc3QgU3RyaW5nCiAgICAsIHJlX3ByaSA6IExpc3QgU3RyaW5nCiAgICB9CgoKdHlwZSBhbGlhcyBTZW5zZSA9CiAgICB7IHN0YWdrIDogTGlzdCBTdHJpbmcKICAgICwgc3RhZ3IgOiBMaXN0IFN0cmluZwogICAgLCBwb3MgOiBMaXN0IFN0cmluZwogICAgLCB4cmVmIDogTGlzdCBTdHJpbmcKICAgICwgYW50IDogTGlzdCBTdHJpbmcKICAgICwgZmllbGQgOiBMaXN0IFN0cmluZwogICAgLCBtaXNjIDogTGlzdCBTdHJpbmcKICAgICwgc19pbmYgOiBMaXN0IFN0cmluZwogICAgLCBsc291cmNlIDogTGlzdCBMU291cmNlCiAgICAsIGRpYWwgOiBMaXN0IFN0cmluZwogICAgLCBnbG9zcyA6IExpc3QgR2xvc3MKICAgICwgZXhhbXBsZSA6IExpc3QgRXhhbXBsZQogICAgfQoKCnR5cGUgTFNvdXJjZQogICAgPSBMU291cmNlCiAgICAgICAgU3RyaW5nCiAgICAgICAgeyB4bWxMYW5nIDogTWF5YmUgU3RyaW5nIC0tIGRlZiBlbmcKICAgICAgICAsIGxzX3R5cGUgOiBNYXliZSBTdHJpbmcKICAgICAgICAsIGxzX3dhc2VpIDogQm9vbAogICAgICAgIH0KCgp0eXBlIEdsb3NzCiAgICA9IEdsb3NzCiAgICAgICAgU3RyaW5nCiAgICAgICAgeyB4bWxMYW5nIDogTWF5YmUgU3RyaW5nIC0tIGRlZiBlbmcKICAgICAgICAsIGdfZ2VuZCA6IE1heWJlIFN0cmluZwogICAgICAgICwgZ190eXBlIDogTWF5YmUgU3RyaW5nCiAgICAgICAgfQoKCnR5cGUgYWxpYXMgRXhhbXBsZSA9CiAgICB7IGV4X3NyY2UgOiBTdHJpbmcKICAgICwgZXhfdGV4dCA6IFN0cmluZwogICAgLCBleF9zZW50IDogTGlzdCBFeF9zZW50CiAgICB9CgoKdHlwZSBFeF9zZW50CiAgICA9IEV4X3NlbnQKICAgICAgICBTdHJpbmcKICAgICAgICB7IHhtbExhbmcgOiBNYXliZSBTdHJpbmcKICAgICAgICAsIGV4X3NyY2UgOiBNYXliZSBTdHJpbmcKICAgICAgICB9CgoKdHlwZSBKTWRpY3RMYW5ndWFnZQogICAgPSBTZWFyY2hJbkZyZW5jaAogICAgfCBTZWFyY2hJbkVuZ2xpc2gKICAgIHwgU2VhcmNoRXZlcnl0aGluZwoKCnR5cGUgYWxpYXMgSk1kaWN0RnJvbUphcFNlYXJjaCA9CiAgICB7IHNlYXJjaFN0ciA6IFN0cmluZwogICAgLCBoYXNLYW5qaSA6IEJvb2wKICAgICwgdGFyZ2V0TGFuZ3VhZ2UgOiBKTWRpY3RMYW5ndWFnZQogICAgfQoKCnR5cGUgYWxpYXMgSk1kaWN0VG9KYXBTZWFyY2ggPQogICAgeyBzZWFyY2hTdHIgOiBTdHJpbmcKICAgICwgdGFyZ2V0TGFuZ3VhZ2UgOiBKTWRpY3RMYW5ndWFnZQogICAgfQoKCnR5cGUgYWxpYXMgVGF0b2ViYUV4YW1wbGUgPQogICAgeyB0ZXh0IDogU3RyaW5nCiAgICAsIHRyYW5zbGF0aW9ucyA6IExpc3QgVGF0b2ViYVRyYW5zbGF0aW9uCiAgICAsIHRyYW5zY3JpcHRpb25zIDogTGlzdCBUYXRvZWJhVHJhbnNjcmlwdGlvbgogICAgfQoKCnR5cGUgYWxpYXMgVGF0b2ViYVRyYW5zbGF0aW9uID0KICAgICggU3RyaW5nLCBTdHJpbmcgKQoKCnR5cGUgYWxpYXMgVGF0b2ViYVRyYW5zY3JpcHRpb24gPQogICAgU3RyaW5nCgAAAAAAAAAAFhsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwQAAAAAAABbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAWwQAAAAAAABbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAWwQAAAAAAABbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAWwQAAAAAAABbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAWGwAAbW9kdWxlIFR5cGVzIGV4cG9zaW5nICguLikKCmltcG9ydCBCcm93c2VyIGV4cG9zaW5nIChVcmxSZXF1ZXN0KQppbXBvcnQgQnJvd3Nlci5OYXZpZ2F0aW9uIGV4cG9zaW5nIChLZXkpCmltcG9ydCBDb2RlYwppbXBvcnQgRGljdCBleHBvc2luZyAoLi4pCmltcG9ydCBIdHRwCmltcG9ydCBKc29uLkRlY29kZSBhcyBECmltcG9ydCBMYW1kZXJhIGV4cG9zaW5nIChDbGllbnRJZCwgU2Vzc2lvbklkKQppbXBvcnQgUmFuZG9tIGV4cG9zaW5nIChTZWVkKQppbXBvcnQgVGltZSBleHBvc2luZyAoUG9zaXgpCmltcG9ydCBVcmwgZXhwb3NpbmcgKFVybCkKCgp0eXBlIGFsaWFzIEZyb250ZW5kTW9kZWwgPQogICAgeyBrZXkgOiBLZXkKICAgICwgbWVzc2FnZSA6IFN0cmluZwogICAgLCBrZ2dhbWVzIDogRGljdCBJbnQgS2FuamlHdWVzc2luZ0dhbWUKICAgICwgdGhpc1BsYXllciA6IE1heWJlIFBsYXllcgogICAgLCBwbGF5ZXJzIDogTGlzdCBQbGF5ZXIKICAgICwga2dnV29yZElucHV0IDogTWF5YmUgU3RyaW5nCiAgICAsIGtnZ1dyb25nV29yZEJ1ZmZlciA6IE1heWJlIFN0cmluZwogICAgLCBrZ2dDb25maWdJbnB1dHMgOgogICAgICAgIHsga2dnUmFuZG9tS2FuamlJbnB1dCA6IE1heWJlIFN0cmluZwogICAgICAgICwga2dnUm91bmRMZW5ndGhJbnB1dCA6IE1heWJlIFN0cmluZwogICAgICAgICwga2dnU3RhcnRpbmdDb3VudGRvd25JbnB1dCA6IE1heWJlIFN0cmluZwogICAgICAgIH0KICAgICwga2dnU3luY2luZyA6IEJvb2wKICAgICwgbm93IDogVGltZS5Qb3NpeAogICAgfQoKCnR5cGUgYWxpYXMgQmFja2VuZE1vZGVsID0KICAgIHsgbWVzc2FnZSA6IFN0cmluZwogICAgLCBrZ2dhbWVzIDogRGljdCBJbnQgS2FuamlHdWVzc2luZ0dhbWUKICAgICwgcGxheWVycyA6CiAgICAgICAgRGljdAogICAgICAgICAgICBTZXNzaW9uSWQKICAgICAgICAgICAgeyBwbGF5ZXIgOiBQbGF5ZXIKICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgOiBQaHBTZXNzaW9uSWQKICAgICAgICAgICAgfQogICAgLCBzZWVkIDogU2VlZAogICAgfQoKCnR5cGUgYWxpYXMgVXNlcm5hbWUgPQogICAgU3RyaW5nCgoKdHlwZSBhbGlhcyBQaHBTZXNzaW9uSWQgPQogICAgU3RyaW5nCgoKdHlwZSBGcm9udGVuZE1zZwogICAgPSBVcmxDbGlja2VkIFVybFJlcXVlc3QKICAgIHwgVXJsQ2hhbmdlZCBVcmwKICAgIHwgR290SW5mb0Zyb21QYXJlbnQgU3RyaW5nCiAgICB8IFJlcUdldEtleQogICAgfCBLZ2dTZXRDdXN0b21LYW5qaVNldCBTdHJpbmcKICAgIHwgS2dnU2V0S2FuamlTZXQgS2FuamlTZXQgSW50CiAgICB8IEtnZ1N0YXJ0R2FtZSBHYW1lSWQKICAgIHwgS2dnV29yZElucHV0IFN0cmluZwogICAgfCBLZ2dIb3N0R2FtZQogICAgfCBLZ2dKb2luR2FtZSBJbnQKICAgIHwgS2dnTGVhdmVHYW1lIEludAogICAgfCBLZ2dTZW5kV29yZCBHYW1lSWQKICAgIHwgS2dnUmVxdWVzdE5leHRLYW5qaSBHYW1lSWQKICAgIHwgR290VGltZUYgVGltZS5Qb3NpeAogICAgfCBTZW5kVG9CYWNrZW5kV2l0aFRpbWUgVG9CYWNrZW5kCiAgICB8IE5vT3BGcm9udGVuZE1zZwoKCnR5cGUgVG9CYWNrZW5kCiAgICA9IEdldEtleXNUQgogICAgfCBQbGF5ZXJJbmZvU3VibWl0dGVkVEIgVXNlcm5hbWUgUGhwU2Vzc2lvbklkCiAgICB8IENyZWF0ZUdhbWVUQiBQbGF5ZXIgeyBrYW5qaVNldCA6IEthbmppU2V0LCByb3VuZExlbmd0aCA6IEludCwgc3RhcnRpbmdDb3VudGRvd24gOiBJbnQgfSBUaW1lLlBvc2l4CiAgICB8IEpvaW5UQiBQbGF5ZXIgR2FtZUlkCiAgICB8IExlYXZlVEIgUGxheWVyIEdhbWVJZAogICAgfCBVcGRhdGVDb25maWdUQiBHYW1lSWQgeyBrYW5qaVNldCA6IEthbmppU2V0LCByb3VuZExlbmd0aCA6IEludCwgc3RhcnRpbmdDb3VudGRvd24gOiBJbnQgfQogICAgfCBTdGFydFRCIEdhbWVJZCBUaW1lLlBvc2l4CiAgICB8IFJlcXVlc3ROZXh0S2FuamlUQiBHYW1lSWQgUGxheWVyCiAgICB8IEFkZFdvcmRUQiBHYW1lSWQgUGxheWVyIFN0cmluZwogICAgfCBOb09wVEIKCgp0eXBlIEJhY2tlbmRNc2cKICAgID0gQ2xpZW50Q29ubmVjdGVkIFNlc3Npb25JZCBDbGllbnRJZAogICAgfCBDbGllbnREaXNjb25uZWN0ZWQgU2Vzc2lvbklkIENsaWVudElkCiAgICB8IEdvdEpNZGljdFNlYXJjaFJlc3VsdHMgR2FtZUlkIENoYXIgKFJlc3VsdCBIdHRwLkVycm9yIChMaXN0IEphcERpY3RFbnRyeSkpCiAgICB8IEdldEtleXMKICAgIHwgR290S2V5cyAoUmVzdWx0IEh0dHAuRXJyb3IgU3RyaW5nKQogICAgfCBHb3RUaW1lIFRpbWUuUG9zaXgKICAgIHwgUnVuR2FtZXMgVGltZS5Qb3NpeAogICAgfCBOb09wQmFja2VuZE1zZwoKCnR5cGUgVG9Gcm9udGVuZAogICAgPSBUb0Zyb250ZW5kTXNnVEYgU3RyaW5nCiAgICB8IEdhbWVCcm9hZGNhc3RURiBLYW5qaUd1ZXNzaW5nR2FtZQogICAgfCBHYW1lVGltZXNCcm9hZGNhc3RURgogICAgICAgIHsgZ2FtZUlkIDogR2FtZUlkCiAgICAgICAgLCBsYXN0VXBkYXRlZCA6IEludAogICAgICAgICwgdGltZVRpbGxHYW1lT3ZlciA6IEludAogICAgICAgICwgdGltZVRpbGxSb3VuZEVuZCA6IEludAogICAgICAgICwgYnVmZmVyaW5nIDogQm9vbAogICAgICAgIH0KICAgIHwgV3JvbmdXb3JkVEYgU3RyaW5nCiAgICB8IFBsYXllckluZm9SZWdpc3RlcmVkVEYgUGxheWVyCiAgICB8IE5vT3BURgoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKdHlwZSBTdGF0dXMKICAgID0gSW5pdGlhbAogICAgfCBXYWl0aW5nCiAgICB8IFN1Y2Nlc3MKICAgIHwgRmFpbHVyZQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKdHlwZSBhbGlhcyBQbGF5ZXIgPQogICAgeyBpZCA6IENsaWVudElkCiAgICAsIG5hbWUgOiBVc2VybmFtZQogICAgfQoKCnR5cGUgYWxpYXMgUGxheWVySWQgPQogICAgSW50CgoKdHlwZSBhbGlhcyBHYW1lSWQgPQogICAgSW50CgoKdHlwZSBhbGlhcyBLYW5qaUd1ZXNzaW5nR2FtZSA9CiAgICB7IGdhbWVJZCA6IEludAogICAgLCBob3N0IDogUGxheWVyCiAgICAsIHBsYXllcnMgOiBMaXN0IFBsYXllcgogICAgLCBnYW1lU3RhdGUgOiBLR0dhbWVTdGF0ZQogICAgLCBsYXN0VXBkYXRlZCA6IEludAogICAgLCBidWZmZXJpbmcgOiBCb29sCiAgICAsIGluaXRpYWxCdWZmZXIgOiBCb29sCgogICAgLS0sIHJvdW5kTGVuZ3RoIDogSW50CiAgICB9CgoKdHlwZSBLR0dhbWVTdGF0ZQogICAgPSBMb2JieQogICAgICAgIHsga2FuamlTZXQgOiBLYW5qaVNldAogICAgICAgICwgcm91bmRMZW5ndGggOiBJbnQKICAgICAgICAsIHN0YXJ0aW5nQ291bnRkb3duIDogSW50CiAgICAgICAgfQogICAgfCBJblBsYXkKICAgICAgICB7IHNjb3JlIDogSW50CiAgICAgICAgLCBjdXJyZW50S2FuamkgOiBDaGFyCiAgICAgICAgLCByZW1haW5pbmdLYW5qaSA6IExpc3QgQ2hhcgogICAgICAgICwgYnVmZmVyZWRLYW5qaSA6IExpc3QgQ2hhcgogICAgICAgICwga2FuamlTZWVuIDogTGlzdCBDaGFyCiAgICAgICAgLCB3b3JkcyA6IERpY3QgQ2xpZW50SWQgKExpc3QgU3RyaW5nKQogICAgICAgICwgYWxsb3dlZFdvcmRzIDogRGljdCBDaGFyIChMaXN0IFN0cmluZykKICAgICAgICAsIHJlcXVlc3RlZFNraXAgOiBMaXN0IFBsYXllcgogICAgICAgICwgdGltZVRpbGxSb3VuZEVuZCA6IEludAogICAgICAgICwgdGltZVRpbGxHYW1lT3ZlciA6IEludAogICAgICAgICwgcm91bmRMZW5ndGggOiBJbnQKICAgICAgICAsIHN0YXJ0aW5nQ291bnRkb3duIDogSW50CiAgICAgICAgfQogICAgfCBWaWN0b3J5IHsgc2NvcmUgOiBJbnQgfQogICAgfCBHYW1lT3ZlciB7IHNjb3JlIDogSW50IH0KCgp0eXBlIEthbmppU2V0CiAgICA9IEpscHRTZXQgKExpc3QgSW50KQogICAgfCBDdXN0b21LYW5qaVNldCAoTGlzdCBDaGFyKQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKdHlwZSBhbGlhcyBLYW5qaWRpY0VudHJ5ID0KICAgIHsga2FuamkgOiBTdHJpbmcKICAgICwgY3BWYWx1ZXMgOiBMaXN0ICggU3RyaW5nLCBTdHJpbmcgKQogICAgLCByYWRWYWx1ZXMgOiBMaXN0ICggU3RyaW5nLCBJbnQgKQoKICAgIC0tIG1pc2MKICAgICwgZ3JhZGUgOiBNYXliZSBJbnQKICAgICwgc3Ryb2tlQ291bnQgOiBMaXN0IEludAogICAgLCB2YXJpYW50cyA6IExpc3QgKCAoIFN0cmluZywgU3RyaW5nICksIE1heWJlIFN0cmluZyApCiAgICAsIGZyZXEgOiBNYXliZSBJbnQKICAgICwgcmFkTmFtZSA6IExpc3QgU3RyaW5nCiAgICAsIGpscHQgOiBNYXliZSBJbnQKCiAgICAtLQogICAgLCBkaWNOdW1iZXIgOiBMaXN0ICggU3RyaW5nLCBTdHJpbmcgKQogICAgLCBxdWVyeUNvZGUgOiBMaXN0ICggU3RyaW5nLCBTdHJpbmcgKQogICAgLCBza2lwTWlzc2NsYXNzIDogTGlzdCAoIFN0cmluZywgU3RyaW5nICkKCiAgICAtLSByZWFkaW5nL21lYW5pbmcKICAgICwgcmVhZGluZ3MgOiBMaXN0IHsgclR5cGUgOiBTdHJpbmcsIG9uVHlwZSA6IE1heWJlIFN0cmluZywgclN0YXR1cyA6IE1heWJlIFN0cmluZywgcmVhZGluZyA6IFN0cmluZyB9CiAgICAsIG1lYW5pbmdzIDogTGlzdCAoIFN0cmluZywgU3RyaW5nICkKICAgICwgbmFub3JpIDogTGlzdCBTdHJpbmcKCiAgICAtLSBjdXN0b20gZmllbGRzCiAgICAsIGNvcmVNZWFuaW5ncyA6IExpc3QgKCBTdHJpbmcsIFN0cmluZyApCiAgICAsIGV4YW1wbGVzIDogTGlzdCAoIFN0cmluZywgU3RyaW5nICkKICAgICwgZGVjb21wb3NpdGlvbiA6IE1heWJlIFN0cmluZwogICAgLCBldHltb2xvZ3kgOiBNYXliZSB7IGhpbnQgOiBNYXliZSBTdHJpbmcsIGV0eW0gOiBNYXliZSBTdHJpbmcgfQogICAgfQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIEpNRGljdAoKCnR5cGUgYWxpYXMgSmFwRGljdEVudHJ5ID0KICAgIHsgZW50X3NlcSA6IEludAogICAgLCBrX2VsZSA6IExpc3QgS2FuamlFbGVtZW50CiAgICAsIHJfZWxlIDogTGlzdCBSZWFkaW5nRWxlbWVudAogICAgLCBzZW5zZSA6IExpc3QgU2Vuc2UKICAgICwgc2hvd2luZ0V2ZXJ5U2Vuc2UgOiBCb29sCiAgICB9CgoKdHlwZSBhbGlhcyBLYW5qaUVsZW1lbnQgPQogICAgeyBrZWIgOiBTdHJpbmcKICAgICwga19pbmYgOiBMaXN0IFN0cmluZwogICAgLCBrX3ByaSA6IExpc3QgU3RyaW5nCiAgICB9CgoKdHlwZSBhbGlhcyBSZWFkaW5nRWxlbWVudCA9CiAgICB7IHJlYiA6IFN0cmluZwogICAgLCByZV9ub2thbmppIDogQm9vbAogICAgLCByZV9yZXN0ciA6IExpc3QgU3RyaW5nCiAgICAsIHJlX2luZiA6IExpc3QgU3RyaW5nCiAgICAsIHJlX3ByaSA6IExpc3QgU3RyaW5nCiAgICB9CgoKdHlwZSBhbGlhcyBTZW5zZSA9CiAgICB7IHN0YWdrIDogTGlzdCBTdHJpbmcKICAgICwgc3RhZ3IgOiBMaXN0IFN0cmluZwogICAgLCBwb3MgOiBMaXN0IFN0cmluZwogICAgLCB4cmVmIDogTGlzdCBTdHJpbmcKICAgICwgYW50IDogTGlzdCBTdHJpbmcKICAgICwgZmllbGQgOiBMaXN0IFN0cmluZwogICAgLCBtaXNjIDogTGlzdCBTdHJpbmcKICAgICwgc19pbmYgOiBMaXN0IFN0cmluZwogICAgLCBsc291cmNlIDogTGlzdCBMU291cmNlCiAgICAsIGRpYWwgOiBMaXN0IFN0cmluZwogICAgLCBnbG9zcyA6IExpc3QgR2xvc3MKICAgICwgZXhhbXBsZSA6IExpc3QgRXhhbXBsZQogICAgfQoKCnR5cGUgTFNvdXJjZQogICAgPSBMU291cmNlCiAgICAgICAgU3RyaW5nCiAgICAgICAgeyB4bWxMYW5nIDogTWF5YmUgU3RyaW5nIC0tIGRlZiBlbmcKICAgICAgICAsIGxzX3R5cGUgOiBNYXliZSBTdHJpbmcKICAgICAgICAsIGxzX3dhc2VpIDogQm9vbAogICAgICAgIH0KCgp0eXBlIEdsb3NzCiAgICA9IEdsb3NzCiAgICAgICAgU3RyaW5nCiAgICAgICAgeyB4bWxMYW5nIDogTWF5YmUgU3RyaW5nIC0tIGRlZiBlbmcKICAgICAgICAsIGdfZ2VuZCA6IE1heWJlIFN0cmluZwogICAgICAgICwgZ190eXBlIDogTWF5YmUgU3RyaW5nCiAgICAgICAgfQoKCnR5cGUgYWxpYXMgRXhhbXBsZSA9CiAgICB7IGV4X3NyY2UgOiBTdHJpbmcKICAgICwgZXhfdGV4dCA6IFN0cmluZwogICAgLCBleF9zZW50IDogTGlzdCBFeF9zZW50CiAgICB9CgoKdHlwZSBFeF9zZW50CiAgICA9IEV4X3NlbnQKICAgICAgICBTdHJpbmcKICAgICAgICB7IHhtbExhbmcgOiBNYXliZSBTdHJpbmcKICAgICAgICAsIGV4X3NyY2UgOiBNYXliZSBTdHJpbmcKICAgICAgICB9CgoKdHlwZSBKTWRpY3RMYW5ndWFnZQogICAgPSBTZWFyY2hJbkZyZW5jaAogICAgfCBTZWFyY2hJbkVuZ2xpc2gKICAgIHwgU2VhcmNoRXZlcnl0aGluZwoKCnR5cGUgYWxpYXMgSk1kaWN0RnJvbUphcFNlYXJjaCA9CiAgICB7IHNlYXJjaFN0ciA6IFN0cmluZwogICAgLCBoYXNLYW5qaSA6IEJvb2wKICAgICwgdGFyZ2V0TGFuZ3VhZ2UgOiBKTWRpY3RMYW5ndWFnZQogICAgfQoKCnR5cGUgYWxpYXMgSk1kaWN0VG9KYXBTZWFyY2ggPQogICAgeyBzZWFyY2hTdHIgOiBTdHJpbmcKICAgICwgdGFyZ2V0TGFuZ3VhZ2UgOiBKTWRpY3RMYW5ndWFnZQogICAgfQoKCnR5cGUgYWxpYXMgVGF0b2ViYUV4YW1wbGUgPQogICAgeyB0ZXh0IDogU3RyaW5nCiAgICAsIHRyYW5zbGF0aW9ucyA6IExpc3QgVGF0b2ViYVRyYW5zbGF0aW9uCiAgICAsIHRyYW5zY3JpcHRpb25zIDogTGlzdCBUYXRvZWJhVHJhbnNjcmlwdGlvbgogICAgfQoKCnR5cGUgYWxpYXMgVGF0b2ViYVRyYW5zbGF0aW9uID0KICAgICggU3RyaW5nLCBTdHJpbmcgKQoKCnR5cGUgYWxpYXMgVGF0b2ViYVRyYW5zY3JpcHRpb24gPQogICAgU3RyaW5nCgAAAAAAAAAAFhsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwQAAAAAAABbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAWwQAAAAAAABbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAWwQAAAAAAABbBAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Evergreen/Migrate/V4.elm",
			"settings":
			{
				"buffer_size": 5485,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					8,
					"left_delete",
					null,
					"CAAAAM8DAAAAAAAAzwMAAAAAAAABAAAAZM4DAAAAAAAAzgMAAAAAAAABAAAAZc0DAAAAAAAAzQMAAAAAAAABAAAAZ8wDAAAAAAAAzAMAAAAAAAABAAAAbssDAAAAAAAAywMAAAAAAAABAAAAYcoDAAAAAAAAygMAAAAAAAABAAAAaMkDAAAAAAAAyQMAAAAAAAABAAAAY8gDAAAAAAAAyAMAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAA0AMAAAAAAADQAwAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"paste",
					null,
					"AgAAAMIDAAAAAAAA0AMAAAAAAAAAAAAA0AMAAAAAAADQAwAAAAAAAAYAAABNb2RlbFU",
					"AQAAAAAAAAABAAAAwgMAAAAAAADIAwAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAJRcAAAAAAAAmFwAAbW9kdWxlIEV2ZXJncmVlbi5NaWdyYXRlLlY0IGV4cG9zaW5nICguLikKCnstfCBUaGlzIG1pZ3JhdGlvbiBmaWxlIHdhcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSB0aGUgbGFtZGVyYSBjb21waWxlci4KCkl0IGluY2x1ZGVzOgoKICAtIEEgbWlncmF0aW9uIGZvciBlYWNoIG9mIHRoZSA2IExhbWRlcmEgY29yZSB0eXBlcyB0aGF0IGhhcyBjaGFuZ2VkCiAgLSBBIGZ1bmN0aW9uIG5hbWVkIGBtaWdyYXRlX01vZHVsZU5hbWVfVHlwZU5hbWVgIGZvciBlYWNoIGNoYW5nZWQvY3VzdG9tIHR5cGUKCkV4cGVjdCB0byBzZWU6CgogIC0gYFVuaW1wbGVtZW500LVkYCB2YWx1ZXMgYXMgcGxhY2Vob2xkZXJzIHdoZXJldmVyIEkgd2FzIHVuYWJsZSB0byBmaWd1cmUgb3V0IGEgY2xlYXIgbWlncmF0aW9uIHBhdGggZm9yIHlvdQogIC0gYEBOT1RJQ0VgIGNvbW1lbnRzIGZvciB0aGluZ3MgeW91IHNob3VsZCBrbm93IGFib3V0LCBpLmUuIG5ldyBjdXN0b20gdHlwZSBjb25zdHJ1Y3RvcnMgdGhhdCB3b24ndCBnZXQgYW55CiAgICB2YWx1ZSBtYXBwaW5ncyBmcm9tIHRoZSBvbGQgdHlwZSBieSBkZWZhdWx0CgpZb3UgY2FuIGVkaXQgdGhpcyBmaWxlIGhvd2V2ZXIgeW91IHdpc2ghIEl0IHdvbid0IGJlIGdlbmVyYXRlZCBhZ2Fpbi4KClNlZSA8aHR0cHM6Ly9kYXNoYm9hcmQubGFtZGVyYS5hcHAvZG9jcy9ldmVyZ3JlZW4+IGZvciBtb3JlIGluZm8uCgotfQoKaW1wb3J0IEV2ZXJncmVlbi5WMS5UeXBlcwppbXBvcnQgRXZlcmdyZWVuLlY0LlR5cGVzCmltcG9ydCBMYW1kZXJhLk1pZ3JhdGlvbnMgZXhwb3NpbmcgKC4uKQoKCmZyb250ZW5kTW9kZWwgOiBFdmVyZ3JlZW4uVjEuVHlwZXMuRnJvbnRlbmRNb2RlbCAtPiBNb2RlbE1pZ3JhdGlvbiBFdmVyZ3JlZW4uVjQuVHlwZXMuRnJvbnRlbmRNb2RlbCBFdmVyZ3JlZW4uVjQuVHlwZXMuRnJvbnRlbmRNc2cKZnJvbnRlbmRNb2RlbCBvbGQgPQogICAgTW9kZWxVbmNoYW5nZWQKCgpiYWNrZW5kTW9kZWwgOiBFdmVyZ3JlZW4uVjEuVHlwZXMuQmFja2VuZE1vZGVsIC0+IE1vZGVsTWlncmF0aW9uIEV2ZXJncmVlbi5WNC5UeXBlcy5CYWNrZW5kTW9kZWwgRXZlcmdyZWVuLlY0LlR5cGVzLkJhY2tlbmRNc2cKYmFja2VuZE1vZGVsIG9sZCA9CiAgICBNb2RlbFVuY2hhbmdlZAoKCmZyb250ZW5kTXNnIDogRXZlcmdyZWVuLlYxLlR5cGVzLkZyb250ZW5kTXNnIC0+IE1zZ01pZ3JhdGlvbiBFdmVyZ3JlZW4uVjQuVHlwZXMuRnJvbnRlbmRNc2cgRXZlcmdyZWVuLlY0LlR5cGVzLkZyb250ZW5kTXNnCmZyb250ZW5kTXNnIG9sZCA9CiAgICBNc2dNaWdyYXRlZCAoIG1pZ3JhdGVfVHlwZXNfRnJvbnRlbmRNc2cgb2xkLCBDbWQubm9uZSApCgoKdG9CYWNrZW5kIDogRXZlcmdyZWVuLlYxLlR5cGVzLlRvQmFja2VuZCAtPiBNc2dNaWdyYXRpb24gRXZlcmdyZWVuLlY0LlR5cGVzLlRvQmFja2VuZCBFdmVyZ3JlZW4uVjQuVHlwZXMuQmFja2VuZE1zZwp0b0JhY2tlbmQgb2xkID0KICAgIE1zZ1VuY2hhbmdlZAoKCmJhY2tlbmRNc2cgOiBFdmVyZ3JlZW4uVjEuVHlwZXMuQmFja2VuZE1zZyAtPiBNc2dNaWdyYXRpb24gRXZlcmdyZWVuLlY0LlR5cGVzLkJhY2tlbmRNc2cgRXZlcmdyZWVuLlY0LlR5cGVzLkJhY2tlbmRNc2cKYmFja2VuZE1zZyBvbGQgPQogICAgTXNnVW5jaGFuZ2VkCgoKdG9Gcm9udGVuZCA6IEV2ZXJncmVlbi5WMS5UeXBlcy5Ub0Zyb250ZW5kIC0+IE1zZ01pZ3JhdGlvbiBFdmVyZ3JlZW4uVjQuVHlwZXMuVG9Gcm9udGVuZCBFdmVyZ3JlZW4uVjQuVHlwZXMuRnJvbnRlbmRNc2cKdG9Gcm9udGVuZCBvbGQgPQogICAgTXNnVW5jaGFuZ2VkCgoKbWlncmF0ZV9UeXBlc19Gcm9udGVuZE1zZyA6IEV2ZXJncmVlbi5WMS5UeXBlcy5Gcm9udGVuZE1zZyAtPiBFdmVyZ3JlZW4uVjQuVHlwZXMuRnJvbnRlbmRNc2cKbWlncmF0ZV9UeXBlc19Gcm9udGVuZE1zZyBvbGQgPQogICAgY2FzZSBvbGQgb2YKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuVXJsQ2xpY2tlZCBwMCAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuVXJsQ2xpY2tlZCBwMAoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuVXJsQ2hhbmdlZCBwMCAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuVXJsQ2hhbmdlZCBwMAoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuUmVxR2V0S2V5IC0+CiAgICAgICAgICAgIEV2ZXJncmVlbi5WNC5UeXBlcy5SZXFHZXRLZXkKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLktnZ1NldEN1c3RvbUthbmppU2V0IHAwIC0+CiAgICAgICAgICAgIEV2ZXJncmVlbi5WNC5UeXBlcy5LZ2dTZXRDdXN0b21LYW5qaVNldCBwMAoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuS2dnU2V0S2FuamlTZXQgcDAgcDEgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLktnZ1NldEthbmppU2V0IChwMCB8PiBtaWdyYXRlX1R5cGVzX0thbmppU2V0KSBwMQoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuS2dnU3RhcnRHYW1lIHAwIC0+CiAgICAgICAgICAgIEV2ZXJncmVlbi5WNC5UeXBlcy5LZ2dTdGFydEdhbWUgcDAKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLktnZ1dvcmRJbnB1dCBwMCAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuS2dnV29yZElucHV0IHAwCgogICAgICAgIEV2ZXJncmVlbi5WMS5UeXBlcy5LZ2dIb3N0R2FtZSAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuS2dnSG9zdEdhbWUKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLktnZ0pvaW5HYW1lIHAwIC0+CiAgICAgICAgICAgIEV2ZXJncmVlbi5WNC5UeXBlcy5LZ2dKb2luR2FtZSBwMAoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuS2dnTGVhdmVHYW1lIHAwIC0+CiAgICAgICAgICAgIEV2ZXJncmVlbi5WNC5UeXBlcy5LZ2dMZWF2ZUdhbWUgcDAKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLktnZ1NlbmRXb3JkIHAwIC0+CiAgICAgICAgICAgIEV2ZXJncmVlbi5WNC5UeXBlcy5LZ2dTZW5kV29yZCBwMAoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuS2dnUmVxdWVzdE5leHRLYW5qaSBwMCAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuS2dnUmVxdWVzdE5leHRLYW5qaSBwMAoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuR290VGltZUYgcDAgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLkdvdFRpbWVGIHAwCgogICAgICAgIEV2ZXJncmVlbi5WMS5UeXBlcy5TZW5kVG9CYWNrZW5kV2l0aFRpbWUgcDAgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLlNlbmRUb0JhY2tlbmRXaXRoVGltZSAocDAgfD4gbWlncmF0ZV9UeXBlc19Ub0JhY2tlbmQpCgogICAgICAgIEV2ZXJncmVlbi5WMS5UeXBlcy5Ob09wRnJvbnRlbmRNc2cgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLk5vT3BGcm9udGVuZE1zZwoKICAgICAgICBub3RpY2VzIC0+CiAgICAgICAgICAgIHstIEBOT1RJQ0UgYEdvdEluZm9Gcm9tUGFyZW50IFN0cmluZ2Agd2FzIGFkZGVkIGluIFY0LgogICAgICAgICAgICAgICBUaGlzIGlzIGp1c3QgYSByZW1pbmRlciBpbiBjYXNlIG1pZ3JhdGluZyBzb21lIHN1YnNldCBvZiB0aGUgb2xkIGRhdGEgdG8gdGhpcyBuZXcgdmFsdWUgd2FzIGltcG9ydGFudC4KICAgICAgICAgICAgICAgU2VlIGh0dHBzOi8vZGFzaGJvYXJkLmxhbWRlcmEuYXBwL3RpcHMvbW9kaWZpZWQtY3VzdG9tLXR5cGUgZm9yIG1vcmUgaW5mby4KICAgICAgICAgICAgLX0KICAgICAgICAgICAgKFVuaW1wbGVtZW50ZWQgey0gTmV3IGNvbnN0cnVjdG9ycyB3ZXJlIGFkZGVkLiBJIG5lZWQgeW91IHRvIHJlc29sdmUgdGhlIGFib3ZlIG5vdGljZXMgYW5kIHRoZW4gcmVtb3ZlIHRoaXMgY2FzZS4gLX0pCgoKbWlncmF0ZV9UeXBlc19LYW5qaVNldCA6IEV2ZXJncmVlbi5WMS5UeXBlcy5LYW5qaVNldCAtPiBFdmVyZ3JlZW4uVjQuVHlwZXMuS2FuamlTZXQKbWlncmF0ZV9UeXBlc19LYW5qaVNldCBvbGQgPQogICAgY2FzZSBvbGQgb2YKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuSmxwdFNldCBwMCAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuSmxwdFNldCBwMAoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuQ3VzdG9tS2FuamlTZXQgcDAgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLkN1c3RvbUthbmppU2V0IHAwCgoKbWlncmF0ZV9UeXBlc19QbGF5ZXIgOiBFdmVyZ3JlZW4uVjEuVHlwZXMuUGxheWVyIC0+IEV2ZXJncmVlbi5WNC5UeXBlcy5QbGF5ZXIKbWlncmF0ZV9UeXBlc19QbGF5ZXIgb2xkID0KICAgIG9sZAoKCm1pZ3JhdGVfVHlwZXNfVG9CYWNrZW5kIDogRXZlcmdyZWVuLlYxLlR5cGVzLlRvQmFja2VuZCAtPiBFdmVyZ3JlZW4uVjQuVHlwZXMuVG9CYWNrZW5kCm1pZ3JhdGVfVHlwZXNfVG9CYWNrZW5kIG9sZCA9CiAgICBjYXNlIG9sZCBvZgogICAgICAgIEV2ZXJncmVlbi5WMS5UeXBlcy5HZXRLZXlzVEIgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLkdldEtleXNUQgoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuUGxheWVySW5mb1N1Ym1pdHRlZFRCIHAwIHAxIC0+CiAgICAgICAgICAgIEV2ZXJncmVlbi5WNC5UeXBlcy5QbGF5ZXJJbmZvU3VibWl0dGVkVEIgcDAgcDEKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLkNyZWF0ZUdhbWVUQiBwMCBwMSBwMiAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuQ3JlYXRlR2FtZVRCIChwMCB8PiBtaWdyYXRlX1R5cGVzX1BsYXllcikKICAgICAgICAgICAgICAgIHsga2FuamlTZXQgPSBwMS5rYW5qaVNldCB8PiBtaWdyYXRlX1R5cGVzX0thbmppU2V0CiAgICAgICAgICAgICAgICAsIHJvdW5kTGVuZ3RoID0gcDEucm91bmRMZW5ndGgKICAgICAgICAgICAgICAgICwgc3RhcnRpbmdDb3VudGRvd24gPSBwMS5zdGFydGluZ0NvdW50ZG93bgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcDIKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLkpvaW5UQiBwMCBwMSAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuSm9pblRCIChwMCB8PiBtaWdyYXRlX1R5cGVzX1BsYXllcikgcDEKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLkxlYXZlVEIgcDAgcDEgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLkxlYXZlVEIgKHAwIHw+IG1pZ3JhdGVfVHlwZXNfUGxheWVyKSBwMQoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuVXBkYXRlQ29uZmlnVEIgcDAgcDEgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLlVwZGF0ZUNvbmZpZ1RCIHAwCiAgICAgICAgICAgICAgICB7IGthbmppU2V0ID0gcDEua2FuamlTZXQgfD4gbWlncmF0ZV9UeXBlc19LYW5qaVNldAogICAgICAgICAgICAgICAgLCByb3VuZExlbmd0aCA9IHAxLnJvdW5kTGVuZ3RoCiAgICAgICAgICAgICAgICAsIHN0YXJ0aW5nQ291bnRkb3duID0gcDEuc3RhcnRpbmdDb3VudGRvd24KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLlN0YXJ0VEIgcDAgcDEgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLlN0YXJ0VEIgcDAgcDEKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLlJlcXVlc3ROZXh0S2FuamlUQiBwMCBwMSAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuUmVxdWVzdE5leHRLYW5qaVRCIHAwIChwMSB8PiBtaWdyYXRlX1R5cGVzX1BsYXllcikKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLkFkZFdvcmRUQiBwMCBwMSBwMiAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuQWRkV29yZFRCIHAwIChwMSB8PiBtaWdyYXRlX1R5cGVzX1BsYXllcikgcDIKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLk5vT3BUQiAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuTm9PcFRCCg",
					"AQAAAAAAAAABAAAA0AMAAAAAAADQAwAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"reindent",
					null,
					"AQAAACQPAAAAAAAAMA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJA8AAAAAAAAkDwAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"left_delete",
					null,
					"AQAAAHUNAAAAAAAAdQ0AAAAAAAC5AQAAbm90aWNlcyAtPgogICAgICAgICAgICB7LSBATk9USUNFIGBHb3RJbmZvRnJvbVBhcmVudCBTdHJpbmdgIHdhcyBhZGRlZCBpbiBWNC4KICAgICAgICAgICAgICAgVGhpcyBpcyBqdXN0IGEgcmVtaW5kZXIgaW4gY2FzZSBtaWdyYXRpbmcgc29tZSBzdWJzZXQgb2YgdGhlIG9sZCBkYXRhIHRvIHRoaXMgbmV3IHZhbHVlIHdhcyBpbXBvcnRhbnQuCiAgICAgICAgICAgICAgIFNlZSBodHRwczovL2Rhc2hib2FyZC5sYW1kZXJhLmFwcC90aXBzL21vZGlmaWVkLWN1c3RvbS10eXBlIGZvciBtb3JlIGluZm8uCiAgICAgICAgICAgIC19CiAgICAgICAgICAgIChVbmltcGxlbWVudGVkIHstIE5ldyBjb25zdHJ1Y3RvcnMgd2VyZSBhZGRlZC4gSSBuZWVkIHlvdSB0byByZXNvbHZlIHRoZSBhYm92ZSBub3RpY2VzIGFuZCB0aGVuIHJlbW92ZSB0aGlzIGNhc2UuIC19KQogICAgICAgICAg",
					"AQAAAAAAAAABAAAAdQ0AAAAAAAAuDwAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAbRUAAAAAAAB5FQAAbW9kdWxlIEV2ZXJncmVlbi5NaWdyYXRlLlY0IGV4cG9zaW5nICguLikKCnstfCBUaGlzIG1pZ3JhdGlvbiBmaWxlIHdhcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSB0aGUgbGFtZGVyYSBjb21waWxlci4KCkl0IGluY2x1ZGVzOgoKICAtIEEgbWlncmF0aW9uIGZvciBlYWNoIG9mIHRoZSA2IExhbWRlcmEgY29yZSB0eXBlcyB0aGF0IGhhcyBjaGFuZ2VkCiAgLSBBIGZ1bmN0aW9uIG5hbWVkIGBtaWdyYXRlX01vZHVsZU5hbWVfVHlwZU5hbWVgIGZvciBlYWNoIGNoYW5nZWQvY3VzdG9tIHR5cGUKCkV4cGVjdCB0byBzZWU6CgogIC0gYFVuaW1wbGVtZW500LVkYCB2YWx1ZXMgYXMgcGxhY2Vob2xkZXJzIHdoZXJldmVyIEkgd2FzIHVuYWJsZSB0byBmaWd1cmUgb3V0IGEgY2xlYXIgbWlncmF0aW9uIHBhdGggZm9yIHlvdQogIC0gYEBOT1RJQ0VgIGNvbW1lbnRzIGZvciB0aGluZ3MgeW91IHNob3VsZCBrbm93IGFib3V0LCBpLmUuIG5ldyBjdXN0b20gdHlwZSBjb25zdHJ1Y3RvcnMgdGhhdCB3b24ndCBnZXQgYW55CiAgICB2YWx1ZSBtYXBwaW5ncyBmcm9tIHRoZSBvbGQgdHlwZSBieSBkZWZhdWx0CgpZb3UgY2FuIGVkaXQgdGhpcyBmaWxlIGhvd2V2ZXIgeW91IHdpc2ghIEl0IHdvbid0IGJlIGdlbmVyYXRlZCBhZ2Fpbi4KClNlZSA8aHR0cHM6Ly9kYXNoYm9hcmQubGFtZGVyYS5hcHAvZG9jcy9ldmVyZ3JlZW4+IGZvciBtb3JlIGluZm8uCgotfQoKaW1wb3J0IEV2ZXJncmVlbi5WMS5UeXBlcwppbXBvcnQgRXZlcmdyZWVuLlY0LlR5cGVzCmltcG9ydCBMYW1kZXJhLk1pZ3JhdGlvbnMgZXhwb3NpbmcgKC4uKQoKCmZyb250ZW5kTW9kZWwgOiBFdmVyZ3JlZW4uVjEuVHlwZXMuRnJvbnRlbmRNb2RlbCAtPiBNb2RlbE1pZ3JhdGlvbiBFdmVyZ3JlZW4uVjQuVHlwZXMuRnJvbnRlbmRNb2RlbCBFdmVyZ3JlZW4uVjQuVHlwZXMuRnJvbnRlbmRNc2cKZnJvbnRlbmRNb2RlbCBvbGQgPQogICAgTW9kZWxVbmNoYW5nZWQKCgpiYWNrZW5kTW9kZWwgOiBFdmVyZ3JlZW4uVjEuVHlwZXMuQmFja2VuZE1vZGVsIC0+IE1vZGVsTWlncmF0aW9uIEV2ZXJncmVlbi5WNC5UeXBlcy5CYWNrZW5kTW9kZWwgRXZlcmdyZWVuLlY0LlR5cGVzLkJhY2tlbmRNc2cKYmFja2VuZE1vZGVsIG9sZCA9CiAgICBNb2RlbFVuY2hhbmdlZAoKCmZyb250ZW5kTXNnIDogRXZlcmdyZWVuLlYxLlR5cGVzLkZyb250ZW5kTXNnIC0+IE1zZ01pZ3JhdGlvbiBFdmVyZ3JlZW4uVjQuVHlwZXMuRnJvbnRlbmRNc2cgRXZlcmdyZWVuLlY0LlR5cGVzLkZyb250ZW5kTXNnCmZyb250ZW5kTXNnIG9sZCA9CiAgICBNc2dNaWdyYXRlZCAoIG1pZ3JhdGVfVHlwZXNfRnJvbnRlbmRNc2cgb2xkLCBDbWQubm9uZSApCgoKdG9CYWNrZW5kIDogRXZlcmdyZWVuLlYxLlR5cGVzLlRvQmFja2VuZCAtPiBNc2dNaWdyYXRpb24gRXZlcmdyZWVuLlY0LlR5cGVzLlRvQmFja2VuZCBFdmVyZ3JlZW4uVjQuVHlwZXMuQmFja2VuZE1zZwp0b0JhY2tlbmQgb2xkID0KICAgIE1zZ1VuY2hhbmdlZAoKCmJhY2tlbmRNc2cgOiBFdmVyZ3JlZW4uVjEuVHlwZXMuQmFja2VuZE1zZyAtPiBNc2dNaWdyYXRpb24gRXZlcmdyZWVuLlY0LlR5cGVzLkJhY2tlbmRNc2cgRXZlcmdyZWVuLlY0LlR5cGVzLkJhY2tlbmRNc2cKYmFja2VuZE1zZyBvbGQgPQogICAgTXNnVW5jaGFuZ2VkCgoKdG9Gcm9udGVuZCA6IEV2ZXJncmVlbi5WMS5UeXBlcy5Ub0Zyb250ZW5kIC0+IE1zZ01pZ3JhdGlvbiBFdmVyZ3JlZW4uVjQuVHlwZXMuVG9Gcm9udGVuZCBFdmVyZ3JlZW4uVjQuVHlwZXMuRnJvbnRlbmRNc2cKdG9Gcm9udGVuZCBvbGQgPQogICAgTXNnVW5jaGFuZ2VkCgoKbWlncmF0ZV9UeXBlc19Gcm9udGVuZE1zZyA6IEV2ZXJncmVlbi5WMS5UeXBlcy5Gcm9udGVuZE1zZyAtPiBFdmVyZ3JlZW4uVjQuVHlwZXMuRnJvbnRlbmRNc2cKbWlncmF0ZV9UeXBlc19Gcm9udGVuZE1zZyBvbGQgPQogICAgY2FzZSBvbGQgb2YKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuVXJsQ2xpY2tlZCBwMCAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuVXJsQ2xpY2tlZCBwMAoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuVXJsQ2hhbmdlZCBwMCAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuVXJsQ2hhbmdlZCBwMAoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuUmVxR2V0S2V5IC0+CiAgICAgICAgICAgIEV2ZXJncmVlbi5WNC5UeXBlcy5SZXFHZXRLZXkKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLktnZ1NldEN1c3RvbUthbmppU2V0IHAwIC0+CiAgICAgICAgICAgIEV2ZXJncmVlbi5WNC5UeXBlcy5LZ2dTZXRDdXN0b21LYW5qaVNldCBwMAoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuS2dnU2V0S2FuamlTZXQgcDAgcDEgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLktnZ1NldEthbmppU2V0IChwMCB8PiBtaWdyYXRlX1R5cGVzX0thbmppU2V0KSBwMQoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuS2dnU3RhcnRHYW1lIHAwIC0+CiAgICAgICAgICAgIEV2ZXJncmVlbi5WNC5UeXBlcy5LZ2dTdGFydEdhbWUgcDAKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLktnZ1dvcmRJbnB1dCBwMCAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuS2dnV29yZElucHV0IHAwCgogICAgICAgIEV2ZXJncmVlbi5WMS5UeXBlcy5LZ2dIb3N0R2FtZSAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuS2dnSG9zdEdhbWUKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLktnZ0pvaW5HYW1lIHAwIC0+CiAgICAgICAgICAgIEV2ZXJncmVlbi5WNC5UeXBlcy5LZ2dKb2luR2FtZSBwMAoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuS2dnTGVhdmVHYW1lIHAwIC0+CiAgICAgICAgICAgIEV2ZXJncmVlbi5WNC5UeXBlcy5LZ2dMZWF2ZUdhbWUgcDAKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLktnZ1NlbmRXb3JkIHAwIC0+CiAgICAgICAgICAgIEV2ZXJncmVlbi5WNC5UeXBlcy5LZ2dTZW5kV29yZCBwMAoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuS2dnUmVxdWVzdE5leHRLYW5qaSBwMCAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuS2dnUmVxdWVzdE5leHRLYW5qaSBwMAoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuR290VGltZUYgcDAgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLkdvdFRpbWVGIHAwCgogICAgICAgIEV2ZXJncmVlbi5WMS5UeXBlcy5TZW5kVG9CYWNrZW5kV2l0aFRpbWUgcDAgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLlNlbmRUb0JhY2tlbmRXaXRoVGltZSAocDAgfD4gbWlncmF0ZV9UeXBlc19Ub0JhY2tlbmQpCgogICAgICAgIEV2ZXJncmVlbi5WMS5UeXBlcy5Ob09wRnJvbnRlbmRNc2cgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLk5vT3BGcm9udGVuZE1zZwoKICAgICAgICAgIAoKbWlncmF0ZV9UeXBlc19LYW5qaVNldCA6IEV2ZXJncmVlbi5WMS5UeXBlcy5LYW5qaVNldCAtPiBFdmVyZ3JlZW4uVjQuVHlwZXMuS2FuamlTZXQKbWlncmF0ZV9UeXBlc19LYW5qaVNldCBvbGQgPQogICAgY2FzZSBvbGQgb2YKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuSmxwdFNldCBwMCAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuSmxwdFNldCBwMAoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuQ3VzdG9tS2FuamlTZXQgcDAgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLkN1c3RvbUthbmppU2V0IHAwCgoKbWlncmF0ZV9UeXBlc19QbGF5ZXIgOiBFdmVyZ3JlZW4uVjEuVHlwZXMuUGxheWVyIC0+IEV2ZXJncmVlbi5WNC5UeXBlcy5QbGF5ZXIKbWlncmF0ZV9UeXBlc19QbGF5ZXIgb2xkID0KICAgIG9sZAoKCm1pZ3JhdGVfVHlwZXNfVG9CYWNrZW5kIDogRXZlcmdyZWVuLlYxLlR5cGVzLlRvQmFja2VuZCAtPiBFdmVyZ3JlZW4uVjQuVHlwZXMuVG9CYWNrZW5kCm1pZ3JhdGVfVHlwZXNfVG9CYWNrZW5kIG9sZCA9CiAgICBjYXNlIG9sZCBvZgogICAgICAgIEV2ZXJncmVlbi5WMS5UeXBlcy5HZXRLZXlzVEIgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLkdldEtleXNUQgoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuUGxheWVySW5mb1N1Ym1pdHRlZFRCIHAwIHAxIC0+CiAgICAgICAgICAgIEV2ZXJncmVlbi5WNC5UeXBlcy5QbGF5ZXJJbmZvU3VibWl0dGVkVEIgcDAgcDEKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLkNyZWF0ZUdhbWVUQiBwMCBwMSBwMiAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuQ3JlYXRlR2FtZVRCIChwMCB8PiBtaWdyYXRlX1R5cGVzX1BsYXllcikKICAgICAgICAgICAgICAgIHsga2FuamlTZXQgPSBwMS5rYW5qaVNldCB8PiBtaWdyYXRlX1R5cGVzX0thbmppU2V0CiAgICAgICAgICAgICAgICAsIHJvdW5kTGVuZ3RoID0gcDEucm91bmRMZW5ndGgKICAgICAgICAgICAgICAgICwgc3RhcnRpbmdDb3VudGRvd24gPSBwMS5zdGFydGluZ0NvdW50ZG93bgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcDIKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLkpvaW5UQiBwMCBwMSAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuSm9pblRCIChwMCB8PiBtaWdyYXRlX1R5cGVzX1BsYXllcikgcDEKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLkxlYXZlVEIgcDAgcDEgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLkxlYXZlVEIgKHAwIHw+IG1pZ3JhdGVfVHlwZXNfUGxheWVyKSBwMQoKICAgICAgICBFdmVyZ3JlZW4uVjEuVHlwZXMuVXBkYXRlQ29uZmlnVEIgcDAgcDEgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLlVwZGF0ZUNvbmZpZ1RCIHAwCiAgICAgICAgICAgICAgICB7IGthbmppU2V0ID0gcDEua2FuamlTZXQgfD4gbWlncmF0ZV9UeXBlc19LYW5qaVNldAogICAgICAgICAgICAgICAgLCByb3VuZExlbmd0aCA9IHAxLnJvdW5kTGVuZ3RoCiAgICAgICAgICAgICAgICAsIHN0YXJ0aW5nQ291bnRkb3duID0gcDEuc3RhcnRpbmdDb3VudGRvd24KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLlN0YXJ0VEIgcDAgcDEgLT4KICAgICAgICAgICAgRXZlcmdyZWVuLlY0LlR5cGVzLlN0YXJ0VEIgcDAgcDEKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLlJlcXVlc3ROZXh0S2FuamlUQiBwMCBwMSAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuUmVxdWVzdE5leHRLYW5qaVRCIHAwIChwMSB8PiBtaWdyYXRlX1R5cGVzX1BsYXllcikKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLkFkZFdvcmRUQiBwMCBwMSBwMiAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuQWRkV29yZFRCIHAwIChwMSB8PiBtaWdyYXRlX1R5cGVzX1BsYXllcikgcDIKCiAgICAgICAgRXZlcmdyZWVuLlYxLlR5cGVzLk5vT3BUQiAtPgogICAgICAgICAgICBFdmVyZ3JlZW4uVjQuVHlwZXMuTm9PcFRCCg",
					"AQAAAAAAAAABAAAAdQ0AAAAAAAB1DQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Backend.elm",
			"settings":
			{
				"buffer_size": 3831,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAF4GAAAAAAAAXwYAAAAAAAAAAAAAXwYAAAAAAABrBgAAAAAAAAAAAABrBgAAAAAAAGwGAAAAAAAAAAAAAGwGAAAAAAAAeAYAAAAAAAAAAAAAXwYAAAAAAABfBgAAAAAAAAwAAAAgICAgICAgICAgICA",
					"AQAAAAAAAAABAAAAXgYAAAAAAABeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"left_delete",
					null,
					"AQAAAGgGAAAAAAAAaAYAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAbAYAAAAAAABsBgAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAGgGAAAAAAAAeQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAYAAAAAAABoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " dva;"
					},
					"BQAAAHkGAAAAAAAAegYAAAAAAAAAAAAAegYAAAAAAAB7BgAAAAAAAAAAAAB7BgAAAAAAAHwGAAAAAAAAAAAAAHwGAAAAAAAAfQYAAAAAAAAAAAAAfQYAAAAAAAB+BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQYAAAAAAAB5BgAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH4GAAAAAAAAfwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgYAAAAAAAB+BgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					2,
					"left_delete",
					null,
					"AgAAAH4GAAAAAAAAfgYAAAAAAAABAAAAIH0GAAAAAAAAfQYAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAH0GAAAAAAAAfgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQYAAAAAAAB9BgAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAAH4GAAAAAAAAfwYAAAAAAAAAAAAAfwYAAAAAAACABgAAAAAAAAAAAACABgAAAAAAAIEGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgYAAAAAAAB+BgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIEGAAAAAAAAggYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQYAAAAAAACBBgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAIIGAAAAAAAAgwYAAAAAAAAAAAAAgwYAAAAAAACLBgAAAAAAAAAAAACLBgAAAAAAAI8GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggYAAAAAAACCBgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"paste",
					null,
					"AQAAAI8GAAAAAAAAmQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwYAAAAAAACPBgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " model"
					},
					"BgAAAJkGAAAAAAAAmgYAAAAAAAAAAAAAmgYAAAAAAACbBgAAAAAAAAAAAACbBgAAAAAAAJwGAAAAAAAAAAAAAJwGAAAAAAAAnQYAAAAAAAAAAAAAnQYAAAAAAACeBgAAAAAAAAAAAACeBgAAAAAAAJ8GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQYAAAAAAACZBgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " dVal"
					},
					"BQAAAJ8GAAAAAAAAoAYAAAAAAAAAAAAAoAYAAAAAAAChBgAAAAAAAAAAAAChBgAAAAAAAKIGAAAAAAAAAAAAAKIGAAAAAAAAowYAAAAAAAAAAAAAowYAAAAAAACkBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwYAAAAAAACfBgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAmA8AAAAAAACbDwAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIEdvdEluZm9Gcm9tUGFyZW50IGR2YWwgLT4gCiAgICAgICAgICAgIGZyb21QYXJlbnQgbW9kZWwgZFZhbAoKICAgICAgICAtLWJyb2FkY2FzdCAoTWVzc2FnZVJlY2VpdmVkIChMZWZ0IGNsaWVudElkKSkgKQogICAgICAgIEdvdEpNZGljdFNlYXJjaFJlc3VsdHMgZ2FtZUlkIGthbmppIHJlcyAtPgogICAgICAgICAgICBnb3RKTWRpY3RTZWFyY2hSZXN1bHRzIG1vZGVsIGdhbWVJZCBrYW5qaSByZXMKCiAgICAgICAgR2V0S2V5cyAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQuYmF0Y2ggWyBnZXRLYW5qaUtleXMgXSApCgogICAgICAgIEdvdEtleXMgcmVzIC0+CiAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgZCA9CiAgICAgICAgICAgICAgICAgICAgRGVidWcubG9nICJ0ZXN0IiByZXMKICAgICAgICAgICAgaW4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo",
					"AQAAAAAAAAABAAAApAYAAAAAAACkBgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"left_delete",
					null,
					"AQAAALQHAAAAAAAAtAcAAAAAAABPAAAAbGV0CiAgICAgICAgICAgICAgICBkID0KICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5sb2cgInRlc3QiIHJlcwogICAgICAgICAgICBpbg",
					"AQAAAAAAAAABAAAAtAcAAAAAAAADCAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAPA8AAAAAAABLDwAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIEdvdEluZm9Gcm9tUGFyZW50IGR2YWwgLT4KICAgICAgICAgICAgZnJvbVBhcmVudCBtb2RlbCBkVmFsCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgCiAgICAgICAgICAgIGNhc2UgcmVzIG9mCiAgICAgICAgICAgICAgICBPayBzIC0+CiAgICAgICAgICAgICAgICAgICAgKCB7IG1vZGVsIHwgbWVzc2FnZSA9IHMgfQogICAgICAgICAgICAgICAgICAgICwgYnJvYWRjYXN0IChUb0Zyb250ZW5kTXNnVEYgcykKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgRXJyIGUgLT4KICAgICAgICAgICAgICAgICAgICAoIG1vZGVsCiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiAoaHR0cEVycm9yVG9TdHJpbmcgZSkpCiAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICBHb3RUaW1lIHBvc2l4IC0+CiAgICAgICAgICAgICggeyBtb2RlbCB8IHNlZWQgPSBSYW5kb20uaW5pdGlhbFNlZWQgKFRpbWUucG9zaXhUb01pbGxpcyBwb3NpeCkgfSwgQ21kLm5vbmUgKQoKICAgICAgICBSdW5HYW1lcyBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZXMgbW9kZWwgbm93CgogICAgICAgIE5vT3BCYWNrZW5kTXNnIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgp1cGRhdGVGcm9tRnJvbnRlbmQgOiBTZXNzaW9uSWQgLT4gQ2xpZW50SWQgLT4gVG9CYWNrZW5kIC0+IE1vZGVsIC0+ICggTW9kZWwsIENtZCBCYWNrZW5kTXNnICkKdXBkYXRlRnJvbUZyb250ZW5kIHNlc3Npb25JZCBjbGllbnRJZCBtc2cgbW9kZWwgPQogICAgY2FzZSBtc2cgb2YKICAgICAgICBHZXRLZXlzVEIgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKICAgICAgICBDcmVhdGVHYW1lVEIgaG9zdCBjb25maWcgbm93IC0+CiAgICAgICAgICAgIGNyZWF0ZUdhbWUgbW9kZWwgbm93IGhvc3QgY29uZmlnCgogICAgICAgIEpvaW5UQiBwbGF5ZXIgZ2FtZUlkIC0+CiAgICAgICAgICAgIGpvaW5HYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgTGVhdmVUQiBwbGF5ZXIgZ2FtZUlkIC0+CiAgICAgICAgICAgIGxlYXZlR2FtZSBtb2RlbCBwbGF5ZXIgZ2FtZUlkCgogICAgICAgIFVwZGF0ZUNvbmZpZ1RCIGdhbWVJZCBjb25maWcgLT4KICAgICAgICAgICAgdXBkYXRlQ29uZmlnIG1vZGVsIGdhbWVJZCBjb25maWcKCiAgICAgICAgU3RhcnRUQiBnYW1lSWQgbm93IC0+CiAgICAgICAgICAgIHJ1bkdhbWUgbW9kZWwgbm93IGdhbWVJZAoKICAgICAgICBSZXF1ZXN0TmV4dEthbmppVEIgZ2FtZUlkIHBsYXllciAtPgogICAgICAgICAgICByZXF1ZXN0TmV4dEthbmppIG1vZGVsIGdhbWVJZCBwbGF5ZXIKCiAgICAgICAgQWRkV29yZFRCIGdhbWVJZCBwbGF5ZXIgd29yZCAtPgogICAgICAgICAgICBhZGRXb3JkIG1vZGVsIGdhbWVJZCBwbGF5ZXIgd29yZAoKICAgICAgICBQbGF5ZXJJbmZvU3VibWl0dGVkVEIgdXNlcm5hbWUgcGhwU2Vzc2lvbklkIC0+CiAgICAgICAgICAgICggeyBtb2RlbAogICAgICAgICAgICAgICAgfCBwbGF5ZXJzID0KICAgICAgICAgICAgICAgICAgICBEaWN0Lmluc2VydCBzZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgeyBwbGF5ZXIgPSB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICAgICAgICAgICAgICwgcGhwU2Vzc2lvbklkID0gcGhwU2Vzc2lvbklkCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwucGxheWVycwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgLCBMYW1kZXJhLnNlbmRUb0Zyb250ZW5kIGNsaWVudElkIDx8IFBsYXllckluZm9SZWdpc3RlcmVkVEYgeyBuYW1lID0gdXNlcm5hbWUsIGlkID0gY2xpZW50SWQgfQogICAgICAgICAgICApCgogICAgICAgIE5vT3BUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0K",
					"AQAAAAAAAAABAAAAtAcAAAAAAAC0BwAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAAHsGAAAAAAAAewYAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAfAYAAAAAAAB8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "V"
					},
					"AQAAAHsGAAAAAAAAfAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewYAAAAAAAB7BgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAPA8AAAAAAAA+DwAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIEdvdEluZm9Gcm9tUGFyZW50IGRWYWwgLT4KICAgICAgICAgICAgZnJvbVBhcmVudCBtb2RlbCBkVmFsCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo",
					"AQAAAAAAAAABAAAAfAYAAAAAAAB8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"cut",
					null,
					"AQAAAGgGAAAAAAAAaAYAAAAAAAA7AAAAR290SW5mb0Zyb21QYXJlbnQgZFZhbCAtPgogICAgICAgICAgICBmcm9tUGFyZW50IG1vZGVsIGRWYWw",
					"AQAAAAAAAAABAAAAaAYAAAAAAACjBgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAA9w4AAAAAAAADDwAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIAoKICAgICAgICAtLWJyb2FkY2FzdCAoTWVzc2FnZVJlY2VpdmVkIChMZWZ0IGNsaWVudElkKSkgKQogICAgICAgIEdvdEpNZGljdFNlYXJjaFJlc3VsdHMgZ2FtZUlkIGthbmppIHJlcyAtPgogICAgICAgICAgICBnb3RKTWRpY3RTZWFyY2hSZXN1bHRzIG1vZGVsIGdhbWVJZCBrYW5qaSByZXMKCiAgICAgICAgR2V0S2V5cyAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQuYmF0Y2ggWyBnZXRLYW5qaUtleXMgXSApCgogICAgICAgIEdvdEtleXMgcmVzIC0+CiAgICAgICAgICAgIGNhc2UgcmVzIG9mCiAgICAgICAgICAgICAgICBPayBzIC0+CiAgICAgICAgICAgICAgICAgICAgKCB7IG1vZGVsIHwgbWVzc2FnZSA9IHMgfQogICAgICAgICAgICAgICAgICAgICwgYnJvYWRjYXN0IChUb0Zyb250ZW5kTXNnVEYgcykKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgRXJyIGUgLT4KICAgICAgICAgICAgICAgICAgICAoIG1vZGVsCiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiAoaHR0cEVycm9yVG9TdHJpbmcgZSkpCiAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICBHb3RUaW1lIHBvc2l4IC0+CiAgICAgICAgICAgICggeyBtb2RlbCB8IHNlZWQgPSBSYW5kb20uaW5pdGlhbFNlZWQgKFRpbWUucG9zaXhUb01pbGxpcyBwb3NpeCkgfSwgQ21kLm5vbmUgKQoKICAgICAgICBSdW5HYW1lcyBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZXMgbW9kZWwgbm93CgogICAgICAgIE5vT3BCYWNrZW5kTXNnIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgp1cGRhdGVGcm9tRnJvbnRlbmQgOiBTZXNzaW9uSWQgLT4gQ2xpZW50SWQgLT4gVG9CYWNrZW5kIC0+IE1vZGVsIC0+ICggTW9kZWwsIENtZCBCYWNrZW5kTXNnICkKdXBkYXRlRnJvbUZyb250ZW5kIHNlc3Npb25JZCBjbGllbnRJZCBtc2cgbW9kZWwgPQogICAgY2FzZSBtc2cgb2YKICAgICAgICBHZXRLZXlzVEIgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKICAgICAgICBDcmVhdGVHYW1lVEIgaG9zdCBjb25maWcgbm93IC0+CiAgICAgICAgICAgIGNyZWF0ZUdhbWUgbW9kZWwgbm93IGhvc3QgY29uZmlnCgogICAgICAgIEpvaW5UQiBwbGF5ZXIgZ2FtZUlkIC0+CiAgICAgICAgICAgIGpvaW5HYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgTGVhdmVUQiBwbGF5ZXIgZ2FtZUlkIC0+CiAgICAgICAgICAgIGxlYXZlR2FtZSBtb2RlbCBwbGF5ZXIgZ2FtZUlkCgogICAgICAgIFVwZGF0ZUNvbmZpZ1RCIGdhbWVJZCBjb25maWcgLT4KICAgICAgICAgICAgdXBkYXRlQ29uZmlnIG1vZGVsIGdhbWVJZCBjb25maWcKCiAgICAgICAgU3RhcnRUQiBnYW1lSWQgbm93IC0+CiAgICAgICAgICAgIHJ1bkdhbWUgbW9kZWwgbm93IGdhbWVJZAoKICAgICAgICBSZXF1ZXN0TmV4dEthbmppVEIgZ2FtZUlkIHBsYXllciAtPgogICAgICAgICAgICByZXF1ZXN0TmV4dEthbmppIG1vZGVsIGdhbWVJZCBwbGF5ZXIKCiAgICAgICAgQWRkV29yZFRCIGdhbWVJZCBwbGF5ZXIgd29yZCAtPgogICAgICAgICAgICBhZGRXb3JkIG1vZGVsIGdhbWVJZCBwbGF5ZXIgd29yZAoKICAgICAgICBQbGF5ZXJJbmZvU3VibWl0dGVkVEIgdXNlcm5hbWUgcGhwU2Vzc2lvbklkIC0+CiAgICAgICAgICAgICggeyBtb2RlbAogICAgICAgICAgICAgICAgfCBwbGF5ZXJzID0KICAgICAgICAgICAgICAgICAgICBEaWN0Lmluc2VydCBzZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgeyBwbGF5ZXIgPSB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICAgICAgICAgICAgICwgcGhwU2Vzc2lvbklkID0gcGhwU2Vzc2lvbklkCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwucGxheWVycwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgLCBMYW1kZXJhLnNlbmRUb0Zyb250ZW5kIGNsaWVudElkIDx8IFBsYXllckluZm9SZWdpc3RlcmVkVEYgeyBuYW1lID0gdXNlcm5hbWUsIGlkID0gY2xpZW50SWQgfQogICAgICAgICAgICApCgogICAgICAgIE5vT3BUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0K",
					"AQAAAAAAAAABAAAAaAYAAAAAAABoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgYAAAAAAABeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgYAAAAAAABeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgYAAAAAAABeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgYAAAAAAABeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgYAAAAAAABeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgYAAAAAAABeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgYAAAAAAABeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgYAAAAAAABeBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "elm-pkg-js-includes.js",
			"settings":
			{
				"buffer_size": 564,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAAiAIAAAAAAAB+AgAALy8gQE5PVEUgdGhpcyBmaWxlIHdpbGwgaG9wZWZ1bGx5IGJlIGF1dG8tZ2VuZXJhdGVkIGJ5IGVsbS1wa2ctanMgaW4gZnV0dXJlIQovLyBGb3Igbm93LCBpdHMgcHJlc2Vuc2Ugd2lsbCBtZWFuIExhbWRlcmEgZGV0ZWN0cyB0aGUgZXh0cmEgSlMgYW5kIHBhY2thZ2VzCi8vIEluIGZ1dHVyZSB0aGlzIHdpbGwgYmUgbW9yZSBzdHJ1Y3R1cmVkICsgcmVzdHJpY3RlZCBvbmNlIHRoZSBkZXNpZ24gaXMgZG9uZQpjb25zdCBnZW9Mb2MgPSByZXF1aXJlKCcuL2VsbS1wa2ctanMvZ2VvbG9jLmpzJykKY29uc3QgaW1nUHJvYyA9IHJlcXVpcmUoJy4vZWxtLXBrZy1qcy9pbWFnZV9sb2FkZXIuanMnKQoKZXhwb3J0cy5pbml0ID0gYXN5bmMgZnVuY3Rpb24gaW5pdChhcHApIHsKICAvLyBAV0FSTklORzogdGhpcyBvbmx5IHJ1bnMgZm9yIExhbWRlcmEgcHJvZHVjdGlvbiBkZXBsb3lzIQogIC8vIFRoaXMgZmlsZSB3aWxsIG5vdCBydW4gaW4gTG9jYWwgZGV2ZWxvcG1lbnQsIGFuIGVxdWl2YWxlbnQgdG8gdGhpcyBpcwogIC8vIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGluIExvY2FsIERldmVsb3BtZW50IGZvciBldmVyeSBmaWxlIGluIGVsbS1wa2ctanMvCiAgZ2VvTG9jLmluaXQoYXBwKQogIGltZ1Byb2MuaW5pdChhcHApCn0",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "coms"
					},
					"BQAAAA4BAAAAAAAADwEAAAAAAAAAAAAADwEAAAAAAAAPAQAAAAAAAAYAAABnZW9sb2MPAQAAAAAAABABAAAAAAAAAAAAABABAAAAAAAAEQEAAAAAAAAAAAAAEQEAAAAAAAASAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgEAAAAAAAAUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAABgBAAAAAAAAGAEAAAAAAAA4AAAAY29uc3QgaW1nUHJvYyA9IHJlcXVpcmUoJy4vZWxtLXBrZy1qcy9pbWFnZV9sb2FkZXIuanMnKQo",
					"AQAAAAAAAAABAAAAGAEAAAAAAABQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "coms"
					},
					"BQAAAO8AAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAADwAAAAAAAAAAYAAABnZW9Mb2PwAAAAAAAAAPEAAAAAAAAAAAAAAPEAAAAAAAAA8gAAAAAAAAAAAAAA8gAAAAAAAADzAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wAAAAAAAAD1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "coms"
					},
					"BQAAACQCAAAAAAAAJQIAAAAAAAAAAAAAJQIAAAAAAAAlAgAAAAAAAAYAAABnZW9Mb2MlAgAAAAAAACYCAAAAAAAAAAAAACYCAAAAAAAAJwIAAAAAAAAAAAAAJwIAAAAAAAAoAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAIAAAAAAAAqAgAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"left_delete",
					null,
					"AQAAADMCAAAAAAAAMwIAAAAAAAAWAAAAICAgIGltZ1Byb2MuaW5pdChhcHApCg",
					"AQAAAAAAAAABAAAAMwIAAAAAAABJAgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAANAIAAAAAAAA0AgAALy8gQE5PVEUgdGhpcyBmaWxlIHdpbGwgaG9wZWZ1bGx5IGJlIGF1dG8tZ2VuZXJhdGVkIGJ5IGVsbS1wa2ctanMgaW4gZnV0dXJlIQovLyBGb3Igbm93LCBpdHMgcHJlc2Vuc2Ugd2lsbCBtZWFuIExhbWRlcmEgZGV0ZWN0cyB0aGUgZXh0cmEgSlMgYW5kIHBhY2thZ2VzCi8vIEluIGZ1dHVyZSB0aGlzIHdpbGwgYmUgbW9yZSBzdHJ1Y3R1cmVkICsgcmVzdHJpY3RlZCBvbmNlIHRoZSBkZXNpZ24gaXMgZG9uZQpjb25zdCBjb21zID0gcmVxdWlyZSgnLi9lbG0tcGtnLWpzL2NvbXMuanMnKQoKZXhwb3J0cy5pbml0ID0gYXN5bmMgZnVuY3Rpb24gaW5pdChhcHApIHsKICAgIC8vIEBXQVJOSU5HOiB0aGlzIG9ubHkgcnVucyBmb3IgTGFtZGVyYSBwcm9kdWN0aW9uIGRlcGxveXMhCiAgICAvLyBUaGlzIGZpbGUgd2lsbCBub3QgcnVuIGluIExvY2FsIGRldmVsb3BtZW50LCBhbiBlcXVpdmFsZW50IHRvIHRoaXMgaXMKICAgIC8vIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGluIExvY2FsIERldmVsb3BtZW50IGZvciBldmVyeSBmaWxlIGluIGVsbS1wa2ctanMvCiAgICBjb21zLmluaXQoYXBwKQp9",
					"AQAAAAAAAAABAAAAMwIAAAAAAAAzAgAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"up",
				"Package Control: Upgrade Package"
			],
			[
				"terminus",
				"Terminus: Toggle Panel"
			],
			[
				"term",
				"Terminal: Open"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"teminus ope",
				"Terminus: Toggle Panel"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"open",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"terminus ",
				"Terminus: Close All"
			],
			[
				"terminus open",
				"Terminus: Toggle Panel"
			],
			[
				"terminus: io",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"Package Control: up",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"floo",
				"Floobits - Settings (~/.floorc.json)"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"pac",
				"Package Control: Upgrade Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 159.0,
		"history":
		[
			"terminus",
			"teminus",
			"Terminus: Open Default Shell in Tab"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/eniac314/prog/elm/kgg",
		"/Users/eniac314/prog/elm/kgg/elm-pkg-js",
		"/Users/eniac314/prog/elm/kgg/src",
		"/Users/eniac314/prog/elm/kgg/src/Evergreen",
		"/Users/eniac314/prog/elm/kgg/src/Evergreen/Migrate"
	],
	"file_history":
	[
		"/Users/eniac314/prog/elm/kgg/src/GuessingGame.elm",
		"/Users/eniac314/prog/elm/kanjiGame/auth-src/Auth/Common.elm",
		"/Users/eniac314/prog/elm/kanjiGame/src/Types.elm",
		"/Users/eniac314/prog/elm/kanjiGame/elm.json",
		"/Users/eniac314/prog/elm/kanjiGameOld/src/Types.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Types.elm",
		"/Users/eniac314/prog/elm/kanjiGame/src/Auth.elm",
		"/Users/eniac314/prog/elm/kanjiGame/src/Env.elm",
		"/Users/eniac314/prog/elm/kanjiGame/src/Backend.elm",
		"/Users/eniac314/prog/elm/kanjiGame/src/Frontend.elm",
		"/Users/eniac314/prog/elm/kanjiGame/src/Config.elm",
		"/Users/eniac314/Desktop/trad momoko.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Main.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Routes.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/restricted/membersBlog/Notes Révisions MNN1.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/index.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Plugins/Decomposer.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Blog.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Home.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 29/grammar_less_29.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Kanji/Data.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/JapaneseDictionary.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Verbs/VerbsFormsTable.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Kanji/Conversion.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Markdown/MarkdownParser.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Markdown/MarkdownEditor.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Markdown/JapPreprocessor.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Utils/Utils.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Plugins/QCM.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Verbs.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Verbs/VerbsData.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/MnnManual.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/restricted/pdfConfigs/less01Romaji.json",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/restricted/MinnaNoNihongo1Romaji/lessons/splitter.sh",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Markdown/Renderer.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Plugins/Whiteboard.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Kanji/KanjiEditor.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Kanji/KanjiQuiz.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Verbs/VerbsQuiz.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Yann/06-2024/Notes 29-06",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 27/grammar_less_27.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/08-2024/Notes 04-08.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/08-2024/Notes 02-08",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/07-2024/notes 31-07",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Adjectives/AdjectivesQuiz.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/07-2024/notes 19-07",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/07-2024/notes 12-07.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Plugins/PdfReader.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/07-2024/notes 10-07",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/07-2024/notes themes version",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/07-2024/notes 08-07.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Verbs/VerbsLessons.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Classical/ClassicalQuizes.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Classical/InflectedForms.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Classical/InflectedFormsDataSet.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Kanji.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 20/grammar_less_20.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 23/grammar_less_23.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Plugins/PitchAccent.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/blog/Variations de niveau de language.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/02-2024/Notes 28-02.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 11/leçon 11.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 05/leçon 05.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Adjectives/AdjectivesData.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 09/leçon 09.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/assets/batchUpdateVocPitchAccent.py",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/blog/L'accent en japonais.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Vocabulary.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/modules/vocabulary/update_mnn_voc_entry.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/assets/python_scripts/updateVoc.py",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/02-2024/Notes 23-02.txt",
		"/Users/eniac314/Downloads/images étiquettes amarante/etiquettes.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 14/leçon 14.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 27/leçon 27.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 01/leçon 01Voc.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 17/leçon 17Voc.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/assets/accents.sql",
		"/opt/homebrew/etc/php/8.3/php.ini",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/assets/accents.py",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/assets/accents.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/elm.json",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Presentation.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Adjectives.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Auth.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/Notes.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/MnnGrammar.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 19/grammar_less_19.md",
		"/Users/eniac314/Desktop/tmp/\u001f漢字.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/assets/KanjiJLPT.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Style/Palette.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Style/Helpers.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/Fonts/font.css",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/blog/Donner et recevoir : あげる、くれる、もらう.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Plugins/VocMemo.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/apiIndex.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/modules/japTokenization/tokenizeJapStrings.inc.php",
		"/opt/homebrew/etc/httpd/httpd.conf",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/.htaccess",
		"/opt/homebrew/etc/httpd/extra/httpd-ssl.conf",
		"/opt/homebrew/etc/httpd/extra/httpd-vhosts.conf",
		"/Users/eniac314/Sites/https/Readme.md",
		"/opt/homebrew/etc/httpd/server.crt",
		"/opt/homebrew/var/log/httpd/error_log",
		"/usr/local/etc/httpd/httpd.conf",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/exosKanji/exosGen.md",
		"/Users/eniac314/Downloads/yomitan-settings-2024-01-03-10-40-17.json",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/exosKanji/exosGenFurigana.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/modules/auth/refresh.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Auth/Login.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Auth/Logout.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/FlashCards/FlashCardsViews.elm",
		"/Users/eniac314/prog/elm/laTerreDuChat2.0/apache/includes/config.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/includes/config.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/modules/japTokenization/furigana.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/LegacyKana/KanaVirtKeyb.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/includes/private.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/includes/utils.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/LegacyKana/PracticeContent.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/restricted/pdfConfigs/less15.json",
		"/Users/eniac314/Sites/backupPaniersSaison/fk_dump.sql",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Kanji/MainView.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/FlashCards.elm",
		"/Users/eniac314/Downloads/matomodb5000151866_hosting-data_io.sql",
		"/Users/eniac314/prog/elm/laTerreDuChat2.0/apache/includes/prodDB.inc.php",
		"/Users/eniac314/Desktop/pass.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/modules/flashcards/get_deck_cards.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/includes/prodDB.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/modules/flashcards/get_decks_and_next_ids.inc.php"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 457.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Unimplementеd"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "elm-pkg-js/coms.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 898,
						"regions":
						{
						},
						"selection":
						[
							[
								199,
								199
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".\"'/@<",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-typescript"
								}
							],
							"incomplete_sync": null,
							"lsp_active": true,
							"lsp_uri": "file:///Users/eniac314/prog/elm/kgg/elm-pkg-js/coms.js",
							"remote_loading": false,
							"show_definitions": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Game.elm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18807,
						"regions":
						{
						},
						"selection":
						[
							[
								226,
								226
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"lsp_uri": "file:///Users/eniac314/prog/elm/kgg/src/Game.elm",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Types.elm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6934,
						"regions":
						{
						},
						"selection":
						[
							[
								1115,
								1115
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"lsp_uri": "file:///Users/eniac314/prog/elm/kgg/src/Types.elm",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 684.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/Evergreen/Migrate/V4.elm",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5485,
						"regions":
						{
						},
						"selection":
						[
							[
								3434,
								3434
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"lsp_uri": "file:///Users/eniac314/prog/elm/kgg/src/Evergreen/Migrate/V4.elm",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1398.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Backend.elm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3831,
						"regions":
						{
						},
						"selection":
						[
							[
								1630,
								1630
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"lsp_uri": "file:///Users/eniac314/prog/elm/kgg/src/Backend.elm",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1049.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "elm-pkg-js-includes.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 564,
						"regions":
						{
						},
						"selection":
						[
							[
								563,
								563
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".\"'/@<",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-typescript"
								}
							],
							"incomplete_sync": null,
							"lsp_active": true,
							"lsp_uri": "file:///Users/eniac314/prog/elm/kgg/elm-pkg-js-includes.js",
							"remote_loading": false,
							"show_definitions": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 155.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.LSP Log Panel":
	{
		"height": 0.0
	},
	"output.SFTP":
	{
		"height": 0.0
	},
	"output.Terminus":
	{
		"height": 243.0
	},
	"output.Terminus 2":
	{
		"height": 102.0
	},
	"output.Terminus 3":
	{
		"height": 114.0
	},
	"output.Terminus 4":
	{
		"height": 114.0
	},
	"output.Terminus 5":
	{
		"height": 114.0
	},
	"output.Terminus 6":
	{
		"height": 114.0
	},
	"output.diagnostics":
	{
		"height": 0.0
	},
	"output.elm_format":
	{
		"height": 228.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "kgg.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"secre",
				"apacheBackup/vendor/paragonie/halite/src/Asymmetric/SecretKey.php"
			],
			[
				"getFeuill",
				"html/feuillesLiaison/getFeuilleLiaison.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 501.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/prog/elm/paniersSaison/paniersSaison.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 305.0,
		"last_filter": "subs",
		"selected_items":
		[
			[
				"subs",
				"subscriptions"
			],
			[
				"edit",
				"defEditingSelectedArtwork"
			],
			[
				"mobiel",
				"mobileNavView"
			],
			[
				"compute",
				"computeDisplayMinHeight"
			],
			[
				"contactV",
				"contactView"
			],
			[
				"content",
				"content"
			]
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
		"lsp_show_inlay_hints": false
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 251.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
