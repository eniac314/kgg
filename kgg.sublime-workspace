{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"N",
				"Nothing"
			],
			[
				"he",
				"head"
			],
			[
				"fil",
				"filter"
			],
			[
				"Kanji",
				"KanjiGuessingGame"
			],
			[
				"snee",
				"sendToBackend"
			],
			[
				"se",
				"sendToFrontend"
			],
			[
				"ini",
				"initialGamesBroadcast"
			],
			[
				"Front",
				"FrontendModel"
			],
			[
				"is",
				"isIFrameTestPort"
			],
			[
				"user",
				"UserInfoPayload"
			],
			[
				"S",
				"String"
			],
			[
				"de",
				"decomposer"
			],
			[
				"mem",
				"membersBlogIndex"
			],
			[
				"in",
				"inlines"
			],
			[
				"ligh",
				"lightBlue"
			],
			[
				"Ba",
				"BackgroundColor"
			],
			[
				"al",
				"alignBottom"
			],
			[
				"ru",
				"ruby"
			],
			[
				"writ",
				"writingsToStr"
			],
			[
				"kan",
				"kanji"
			],
			[
				"wi",
				"withDefault"
			],
			[
				"jap",
				"japExtractor"
			],
			[
				"star",
				"startsWithNoJap"
			],
			[
				"le",
				"legacyReading"
			],
			[
				"chom",
				"chompWhile"
			],
			[
				"get",
				"getChompedString"
			],
			[
				"html",
				"htmlRubyParser"
			],
			[
				"pa",
				"paddingXY"
			],
			[
				"Kan",
				"KanjiEditor"
			],
			[
				"swa",
				"swapUp"
			],
			[
				"remo",
				"removeCoreMeaning"
			],
			[
				"remove",
				"removeAnyMeaning"
			],
			[
				"ed",
				"editAnyMeanings"
			],
			[
				"editM",
				"EditMeanings"
			],
			[
				"grou",
				"groupColor"
			],
			[
				"B",
				"Background"
			],
			[
				"to",
				"toFloat"
			],
			[
				"mainContent",
				"mainContentFullScreen"
			],
			[
				"ht",
				"html"
			],
			[
				"padd",
				"paddingEach"
			],
			[
				"ali",
				"alignRight"
			],
			[
				"fix",
				"fixLittleTsu"
			],
			[
				"meain",
				"frenchMeaning"
			],
			[
				"cet",
				"centerY"
			],
			[
				"pass",
				"passive"
			],
			[
				"poten",
				"potentielle"
			],
			[
				"conf",
				"configView"
			],
			[
				"dic",
				"dictionnaire"
			],
			[
				"VTT",
				"VTTeForm"
			],
			[
				"re",
				"remove"
			],
			[
				"ver",
				"VerbsTableConfig"
			],
			[
				"showingB",
				"showingVerbQuiz"
			],
			[
				"Verbs",
				"VerbsTableConfig"
			],
			[
				"col",
				"columnData"
			],
			[
				"con",
				"conditionnal"
			],
			[
				"header",
				"headerInFrench"
			],
			[
				"conjugateA",
				"conjugateAdjective"
			],
			[
				"answe",
				"answerType"
			],
			[
				"inter",
				"inderdictForm"
			],
			[
				"fi",
				"fill"
			],
			[
				"anser",
				"answered"
			],
			[
				"sc",
				"scrollbarY"
			],
			[
				"ans",
				"answer"
			],
			[
				"pitch",
				"pitchAccentsToString"
			],
			[
				"pitchAcc",
				"pitchAccentInput"
			],
			[
				"showing",
				"showingPitchAccents"
			],
			[
				"cen",
				"centerX"
			],
			[
				"show",
				"showParticle"
			],
			[
				"parseCo",
				"parseCorrected"
			],
			[
				"acc",
				"accent"
			],
			[
				"st",
				"startingPoint"
			],
			[
				"pi",
				"pitchAccentToSvg"
			],
			[
				"pit",
				"pitchAccentFromCodeString"
			],
			[
				"morae",
				"moraeDecomp"
			],
			[
				"mo",
				"moraeDecomposition"
			],
			[
				"Pit",
				"PitchAccent"
			],
			[
				"fla",
				"flattenJap"
			],
			[
				"ad",
				"adjectives"
			],
			[
				"na",
				"naKeyYouShiQuizzed"
			],
			[
				"Qui",
				"QuizDisplay"
			],
			[
				"Adjective",
				"AdjectiveForm"
			],
			[
				"Key",
				"KeiYouShi"
			],
			[
				"Adje",
				"AdjectiveForm"
			],
			[
				"del",
				"delim2"
			],
			[
				"fl",
				"flatStr"
			],
			[
				"IKeiY",
				"IKeiYouShi"
			],
			[
				"IKe",
				"IKeiYouShi"
			],
			[
				"Ke",
				"KeiYouShi"
			],
			[
				"cent",
				"centerX"
			],
			[
				"s",
				"shrink"
			],
			[
				"te",
				"teForm"
			],
			[
				"お",
				"お休みなさい"
			],
			[
				"replca",
				"replaceExpressionKana"
			],
			[
				"cu",
				"currentMatch"
			],
			[
				"repl",
				"replaceExpressionKana"
			],
			[
				"su",
				"surface"
			],
			[
				"prei",
				"prefix"
			],
			[
				"from",
				"fromList"
			],
			[
				"off",
				"offWhite"
			],
			[
				"sh",
				"shrink"
			],
			[
				"ma",
				"markdown"
			],
			[
				"kanji",
				"kanjiQuizRevealEverything"
			],
			[
				"Cli",
				"ClickableJapaneseString"
			],
			[
				"man",
				"manual"
			],
			[
				"rea",
				"kanjiReadingQuizzes"
			],
			[
				"kanjiQ",
				"mnnKanjiQuizLesson"
			],
			[
				"lesson",
				"lessonView"
			],
			[
				"read",
				"kanjiReadingQuizzes"
			],
			[
				"less",
				"lessonView"
			],
			[
				"E",
				"Element"
			],
			[
				"Kanjid",
				"Kanjidic"
			],
			[
				"H",
				"HtmlAttr"
			],
			[
				"cli",
				"clickableReadingView"
			],
			[
				"yomu",
				"yomuRenshuView"
			],
			[
				"Pla",
				"PlainCJS"
			],
			[
				"clic",
				"clickableJstr"
			],
			[
				"Yo",
				"yomuRenshuSample"
			],
			[
				"les",
				"lessonNameParser"
			],
			[
				"curre",
				"currentJstr"
			],
			[
				"reading",
				"readingToClickableReading"
			],
			[
				"mb",
				"mbPluginResult"
			],
			[
				"cone",
				"connexionDropped"
			],
			[
				"arre",
				"arrêter"
			],
			[
				"new",
				"newTabLink"
			],
			[
				"term",
				"termine"
			],
			[
				"augm",
				"augmente"
			],
			[
				"par",
				"parseNotesInChoice"
			],
			[
				"verbs",
				"verbsTransitivity"
			]
		]
	},
	"buffers":
	[
		{
			"file": "elm-pkg-js/coms.js",
			"settings":
			{
				"buffer_size": 1231,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJwAAAAAAAAAAAAAAIgAAAAAAAAAiAAAAAAAAAAIAAAAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhAAAAAAAAACEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAACEAAAAAAAAAiQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhAAAAAAAAACEAAAAAAAAAAAAAAAAANEA"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "host"
					},
					"BQAAAG8AAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAABwAAAAAAAAAAYAAABwYXJlbnRwAAAAAAAAAHEAAAAAAAAAAAAAAHEAAAAAAAAAcgAAAAAAAAAAAAAAcgAAAAAAAABzAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvAAAAAAAAAHUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAAzwIAAAAAAACEAgAAZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oYXBwKSB7CiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLCAoZXZlbnQpID0+IHsKICAgIGNvbnNvbGUubG9nKCJNZXNzYWdlIGZyb20gaG9zdDoiLCBldmVudC5kYXRhKTsKfSk7CgogIGFwcC5wb3J0cy5nZXRHZW9sb2Muc3Vic2NyaWJlKGFzeW5jIGZ1bmN0aW9uKCkgewogICAgZ2V0TG9jYXRpb24oYXBwKQogIH0pCn0KCmZ1bmN0aW9uIGdldExvY2F0aW9uKGFwcCkgewogIHZhciBvcHRpb25zID0gewogICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlLAogICAgdGltZW91dDogNTAwMCwKICAgIG1heGltdW1BZ2U6IDAKICB9OwoKCiAgaWYgKG5hdmlnYXRvci5nZW9sb2NhdGlvbikgewogICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGFwcC5wb3J0cy5nZW9sb2Muc2VuZCwKICAgICAgICBmdW5jdGlvbihlcnJvcikgewogICAgICAgICAgYXBwLnBvcnRzLmdlb2xvYy5zZW5kKCJnZW9sb2NhdGlvbiBub3QgYWxsb3dlZCIpOwogICAgICAgICAgfSwgb3B0aW9ucyk7CiAgfSBlbHNlIHsKICAgIGFwcC5wb3J0cy5nZW9sb2Muc2VuZCgibm8gZ2VvbG9jYXRpb24iKTsKICAgIGNvbnNvbGUubG9nKCJubyBnZW9sb2NhdGlvbiIpOwogIH0KfSA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzAAAAAAAAAHMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"EQAAAM4CAAAAAAAA0QIAAAAAAAAAAAAAyAIAAAAAAADLAgAAAAAAAAAAAAChAgAAAAAAAKQCAAAAAAAAAAAAAHACAAAAAAAAcwIAAAAAAAAAAAAAYwIAAAAAAABmAgAAAAAAAAAAAABNAgAAAAAAAFACAAAAAAAAAAAAAD4CAAAAAAAAQQIAAAAAAAAAAAAA/AEAAAAAAAD/AQAAAAAAAAAAAADeAQAAAAAAAOEBAAAAAAAAAAAAAJYBAAAAAAAAmQEAAAAAAAAAAAAAdQEAAAAAAAB4AQAAAAAAAAAAAABtAQAAAAAAAHABAAAAAAAAAAAAAFYBAAAAAAAAWQEAAAAAAAAAAAAAPgEAAAAAAABBAQAAAAAAAAAAAAAbAQAAAAAAAB4BAAAAAAAAAAAAAAcBAAAAAAAACgEAAAAAAAAAAAAA6wAAAAAAAADuAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrAAAAAAAAAM8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AwAAAOUAAAAAAAAA6AAAAAAAAAAAAAAAzAAAAAAAAADPAAAAAAAAAAAAAACXAAAAAAAAAJoAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXAAAAAAAAAOcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAACwMAAAAAAAALAwAAZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oYXBwKSB7CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIChldmVudCkgPT4gewogICAgICAgIGNvbnNvbGUubG9nKCJNZXNzYWdlIGZyb20gaG9zdDoiLCBldmVudC5kYXRhKTsKICAgIH0pOwoKICAgIC8vIGFwcC5wb3J0cy5nZXRHZW9sb2Muc3Vic2NyaWJlKGFzeW5jIGZ1bmN0aW9uKCkgewogICAgLy8gICAgIGdldExvY2F0aW9uKGFwcCkKICAgIC8vIH0pCn0KCi8vIGZ1bmN0aW9uIGdldExvY2F0aW9uKGFwcCkgewovLyAgICAgdmFyIG9wdGlvbnMgPSB7Ci8vICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5IDogdHJ1ZSwKLy8gICAgICAgICB0aW1lb3V0IDogNTAwMCwKLy8gICAgICAgICBtYXhpbXVtQWdlIDogMAovLyAgICAgfTsKCi8vICAgICBpZiAobmF2aWdhdG9yLmdlb2xvY2F0aW9uKSB7Ci8vICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihhcHAucG9ydHMuZ2VvbG9jLnNlbmQsCi8vICAgICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7Ci8vICAgICAgICAgICAgICAgICBhcHAucG9ydHMuZ2VvbG9jLnNlbmQoImdlb2xvY2F0aW9uIG5vdCBhbGxvd2VkIik7Ci8vICAgICAgICAgICAgIH0sCi8vICAgICAgICAgICAgIG9wdGlvbnMpOwovLyAgICAgfSBlbHNlIHsKLy8gICAgICAgICBhcHAucG9ydHMuZ2VvbG9jLnNlbmQoIm5vIGdlb2xvY2F0aW9uIik7Ci8vICAgICAgICAgY29uc29sZS5sb2coIm5vIGdlb2xvY2F0aW9uIik7Ci8vICAgICB9Ci8vIH0",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOAQAAAAAAAI4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACMAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAoAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjAAAAAAAAACMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"paste",
					null,
					"AQAAACMAAAAAAAAAVwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjAAAAAAAAACMAAAAAAAAAAAAAAAAAREA"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFcAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABcAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABXAAAAAAAAAFcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "kgg-"
					},
					"BgAAAD4AAAAAAAAAPwAAAAAAAAAAAAAAPwAAAAAAAAA/AAAAAAAAABEAAABIZWxsbyBmcm9tIGlmcmFtZUgAAAAAAAAASAAAAAAAAAAEAAAAICAgID8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAEIAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPAAAAAAAAAD4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "loaded"
					},
					"BgAAAEIAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAEUAAAAAAAAAAAAAAEUAAAAAAAAARgAAAAAAAAAAAAAARgAAAAAAAABHAAAAAAAAAAAAAABHAAAAAAAAAEgAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCAAAAAAAAAEIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAAPgMAAAAAAAA+AwAAZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oYXBwKSB7CiAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKCJrZ2ctbG9hZGVkIiwgIioiKTsKCiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIChldmVudCkgPT4gewogICAgICAgIGNvbnNvbGUubG9nKCJNZXNzYWdlIGZyb20gaG9zdDoiLCBldmVudC5kYXRhKTsKICAgIH0pOwoKICAgIC8vIGFwcC5wb3J0cy5nZXRHZW9sb2Muc3Vic2NyaWJlKGFzeW5jIGZ1bmN0aW9uKCkgewogICAgLy8gICAgIGdldExvY2F0aW9uKGFwcCkKICAgIC8vIH0pCn0KCi8vIGZ1bmN0aW9uIGdldExvY2F0aW9uKGFwcCkgewovLyAgICAgdmFyIG9wdGlvbnMgPSB7Ci8vICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5IDogdHJ1ZSwKLy8gICAgICAgICB0aW1lb3V0IDogNTAwMCwKLy8gICAgICAgICBtYXhpbXVtQWdlIDogMAovLyAgICAgfTsKCi8vICAgICBpZiAobmF2aWdhdG9yLmdlb2xvY2F0aW9uKSB7Ci8vICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihhcHAucG9ydHMuZ2VvbG9jLnNlbmQsCi8vICAgICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7Ci8vICAgICAgICAgICAgICAgICBhcHAucG9ydHMuZ2VvbG9jLnNlbmQoImdlb2xvY2F0aW9uIG5vdCBhbGxvd2VkIik7Ci8vICAgICAgICAgICAgIH0sCi8vICAgICAgICAgICAgIG9wdGlvbnMpOwovLyAgICAgfSBlbHNlIHsKLy8gICAgICAgICBhcHAucG9ydHMuZ2VvbG9jLnNlbmQoIm5vIGdlb2xvY2F0aW9uIik7Ci8vICAgICAgICAgY29uc29sZS5sb2coIm5vIGdlb2xvY2F0aW9uIik7Ci8vICAgICB9Ci8vIH0",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzAAAAAAAAALMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"cut",
					null,
					"AQAAACMAAAAAAAAAIwAAAAAAAAAtAAAAd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZSgia2dnLWxvYWRlZCIsICIqIik7",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjAAAAAAAAAFAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"BAAAAFgAAAAAAAAAWQAAAAAAAAAAAAAAWQAAAAAAAABdAAAAAAAAAAAAAABdAAAAAAAAAF8AAAAAAAAAAAAAAF8AAAAAAAAAYQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYAAAAAAAAAFgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"paste",
					null,
					"AQAAAGEAAAAAAAAAjgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhAAAAAAAAAGEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					2,
					"left_delete",
					null,
					"AgAAAH0AAAAAAAAAfQAAAAAAAAAJAAAAZ2ctbG9hZGVkfAAAAAAAAAB8AAAAAAAAAAEAAABr",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9AAAAAAAAAIYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "JSON/"
					},
					"BQAAAHsAAAAAAAAAfAAAAAAAAAAAAAAAfAAAAAAAAAB9AAAAAAAAAAAAAAB9AAAAAAAAAH4AAAAAAAAAAAAAAH4AAAAAAAAAfwAAAAAAAAAAAAAAfwAAAAAAAACAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7AAAAAAAAAHsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"left_delete",
					null,
					"AQAAAH8AAAAAAAAAfwAAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAH8AAAAAAAAAgAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/AAAAAAAAAH8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"left_delete",
					null,
					"AQAAAH8AAAAAAAAAfwAAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": ".stri"
					},
					"BQAAAH8AAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACBAAAAAAAAAAAAAACBAAAAAAAAAIIAAAAAAAAAAAAAAIIAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAACEAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/AAAAAAAAAH8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"LSP-typescript\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							46,
							79,
							1
						],
						"trigger": "stringify"
					},
					"BgAAAIMAAAAAAAAAgwAAAAAAAAABAAAAaYIAAAAAAAAAggAAAAAAAAABAAAAcoEAAAAAAAAAgQAAAAAAAAABAAAAdIAAAAAAAAAAgAAAAAAAAAABAAAAc38AAAAAAAAAfwAAAAAAAAABAAAALn8AAAAAAAAAiQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEAAAAAAAAAIQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAIkAAAAAAAAAigAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJAAAAAAAAAIkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAIwAAAAAAAAAjQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMAAAAAAAAAIwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					2,
					"left_delete",
					null,
					"AgAAAIsAAAAAAAAAiwAAAAAAAAABAAAAIooAAAAAAAAAigAAAAAAAAABAAAAIg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMAAAAAAAAAIwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIoAAAAAAAAAjAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKAAAAAAAAAIoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					2,
					"left_delete",
					null,
					"AgAAAIsAAAAAAAAAiwAAAAAAAAABAAAAfYoAAAAAAAAAigAAAAAAAAABAAAAew",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMAAAAAAAAAIwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "en"
					},
					"AgAAAIoAAAAAAAAAiwAAAAAAAAAAAAAAiwAAAAAAAACMAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKAAAAAAAAAIoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"left_delete",
					null,
					"AQAAAIsAAAAAAAAAiwAAAAAAAAABAAAAbg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMAAAAAAAAAIwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "ce"
					},
					"AgAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLAAAAAAAAAIsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					2,
					"left_delete",
					null,
					"AgAAAIwAAAAAAAAAjAAAAAAAAAABAAAAZYsAAAAAAAAAiwAAAAAAAAABAAAAYw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNAAAAAAAAAI0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "ven"
					},
					"AwAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAACNAAAAAAAAAI4AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLAAAAAAAAAIsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":2,\"session_name\":\"LSP-typescript\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							56,
							89,
							1
						],
						"trigger": "event"
					},
					"CwAAAI0AAAAAAAAAjQAAAAAAAAABAAAAbowAAAAAAAAAjAAAAAAAAAABAAAAZYsAAAAAAAAAiwAAAAAAAAABAAAAdosAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAACMAAAAAAAAAIwAAAAAAAAAAQAAAGWLAAAAAAAAAIsAAAAAAAAAAQAAAGOLAAAAAAAAAIwAAAAAAAAAAAAAAIsAAAAAAAAAiwAAAAAAAAABAAAAbooAAAAAAAAAigAAAAAAAAABAAAAZYoAAAAAAAAAjwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOAAAAAAAAAI4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": ".data"
					},
					"BQAAAI8AAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACRAAAAAAAAAAAAAACRAAAAAAAAAJIAAAAAAAAAAAAAAJIAAAAAAAAAkwAAAAAAAAAAAAAAkwAAAAAAAACUAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPAAAAAAAAAI8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAATwMAAAAAAABVAwAAZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oYXBwKSB7CiAgICAKCiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIChldmVudCkgPT4gewogICAgICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoZXZlbnQuZGF0YSksICIqIik7CiAgICAgICAgY29uc29sZS5sb2coIk1lc3NhZ2UgZnJvbSBob3N0OiIsIGV2ZW50LmRhdGEpOwogICAgfSk7CgogICAgLy8gYXBwLnBvcnRzLmdldEdlb2xvYy5zdWJzY3JpYmUoYXN5bmMgZnVuY3Rpb24oKSB7CiAgICAvLyAgICAgZ2V0TG9jYXRpb24oYXBwKQogICAgLy8gfSkKfQoKLy8gZnVuY3Rpb24gZ2V0TG9jYXRpb24oYXBwKSB7Ci8vICAgICB2YXIgb3B0aW9ucyA9IHsKLy8gICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3kgOiB0cnVlLAovLyAgICAgICAgIHRpbWVvdXQgOiA1MDAwLAovLyAgICAgICAgIG1heGltdW1BZ2UgOiAwCi8vICAgICB9OwoKLy8gICAgIGlmIChuYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHsKLy8gICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGFwcC5wb3J0cy5nZW9sb2Muc2VuZCwKLy8gICAgICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHsKLy8gICAgICAgICAgICAgICAgIGFwcC5wb3J0cy5nZW9sb2Muc2VuZCgiZ2VvbG9jYXRpb24gbm90IGFsbG93ZWQiKTsKLy8gICAgICAgICAgICAgfSwKLy8gICAgICAgICAgICAgb3B0aW9ucyk7Ci8vICAgICB9IGVsc2UgewovLyAgICAgICAgIGFwcC5wb3J0cy5nZW9sb2Muc2VuZCgibm8gZ2VvbG9jYXRpb24iKTsKLy8gICAgICAgICBjb25zb2xlLmxvZygibm8gZ2VvbG9jYXRpb24iKTsKLy8gICAgIH0KLy8gfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZAAAAAAAAAJkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJ8AAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACoAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfAAAAAAAAAJ8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					119,
					1,
					"paste",
					null,
					"AQAAAJ8AAAAAAAAA0AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfAAAAAAAAAJ8AAAAAAAAAAAAAAAAAVEA"
				],
				[
					124,
					1,
					"paste",
					null,
					"AgAAAKkAAAAAAAAAtwAAAAAAAAAAAAAAtwAAAAAAAAC3AAAAAAAAAAYAAABnZW9sb2M",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpAAAAAAAAAK8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"left_delete",
					null,
					"AQAAAL0AAAAAAAAAvQAAAAAAAAAZAAAAImdlb2xvY2F0aW9uIG5vdCBhbGxvd2VkIg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9AAAAAAAAANYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "eben"
					},
					"BAAAAL0AAAAAAAAAvgAAAAAAAAAAAAAAvgAAAAAAAAC/AAAAAAAAAAAAAAC/AAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAwQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9AAAAAAAAAL0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					130,
					3,
					"left_delete",
					null,
					"AwAAAMAAAAAAAAAAwAAAAAAAAAABAAAAbr8AAAAAAAAAvwAAAAAAAAABAAAAZb4AAAAAAAAAvgAAAAAAAAABAAAAYg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBAAAAAAAAAMEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "vent.d"
					},
					"BgAAAL4AAAAAAAAAvwAAAAAAAAAAAAAAvwAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMEAAAAAAAAAAAAAAMEAAAAAAAAAwgAAAAAAAAAAAAAAwgAAAAAAAADDAAAAAAAAAAAAAADDAAAAAAAAAMQAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+AAAAAAAAAL4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": "ata"
					},
					"AwAAAMQAAAAAAAAAxQAAAAAAAAAAAAAAxQAAAAAAAADGAAAAAAAAAAAAAADGAAAAAAAAAMcAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEAAAAAAAAAMQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAAggMAAAAAAACCAwAAZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oYXBwKSB7CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIChldmVudCkgPT4gewogICAgICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoZXZlbnQuZGF0YSksICIqIik7CiAgICAgICAgYXBwLnBvcnRzLmZyb21QYXJlbnRQb3J0LnNlbmQoZXZlbnQuZGF0YSk7CiAgICAgICAgY29uc29sZS5sb2coIk1lc3NhZ2UgZnJvbSBob3N0OiIsIGV2ZW50LmRhdGEpOwogICAgfSk7CgogICAgLy8gYXBwLnBvcnRzLmdldEdlb2xvYy5zdWJzY3JpYmUoYXN5bmMgZnVuY3Rpb24oKSB7CiAgICAvLyAgICAgZ2V0TG9jYXRpb24oYXBwKQogICAgLy8gfSkKfQoKLy8gZnVuY3Rpb24gZ2V0TG9jYXRpb24oYXBwKSB7Ci8vICAgICB2YXIgb3B0aW9ucyA9IHsKLy8gICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3kgOiB0cnVlLAovLyAgICAgICAgIHRpbWVvdXQgOiA1MDAwLAovLyAgICAgICAgIG1heGltdW1BZ2UgOiAwCi8vICAgICB9OwoKLy8gICAgIGlmIChuYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHsKLy8gICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGFwcC5wb3J0cy5nZW9sb2Muc2VuZCwKLy8gICAgICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHsKLy8gICAgICAgICAgICAgICAgIGFwcC5wb3J0cy5nZW9sb2Muc2VuZCgiZ2VvbG9jYXRpb24gbm90IGFsbG93ZWQiKTsKLy8gICAgICAgICAgICAgfSwKLy8gICAgICAgICAgICAgb3B0aW9ucyk7Ci8vICAgICB9IGVsc2UgewovLyAgICAgICAgIGFwcC5wb3J0cy5nZW9sb2Muc2VuZCgibm8gZ2VvbG9jYXRpb24iKTsKLy8gICAgICAgICBjb25zb2xlLmxvZygibm8gZ2VvbG9jYXRpb24iKTsKLy8gICAgIH0KLy8gfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHAAAAAAAAAMcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAACMAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAALQAAAAAAAAAAAAAAJAAAAAAAAAAkAAAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAIwAAAAAAAAAjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAACMAAAAAAAAAuQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwAAAAAAAAAjAAAAAAAAAAAAAAAAAERA"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAHgAAAAAAAAAegAAAAAAAAAAAAAAegAAAAAAAAB8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAAAAAAAAAB4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAEkAAAAAAAAASwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQAAAAAAAABJAAAAAAAAAAAAAAAAAERA"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAIsAAAAAAAAAjQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAMAAAAAAAAAAwgAAAAAAAAAAAAAAwgAAAAAAAADEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAALgQAAAAAAAAqBAAAZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oYXBwKSB7CiAgICBpZiAod2luZG93LnNlbGYgIT09IHdpbmRvdy50b3ApIHsKICAgICAgY29uc29sZS5sb2coIlRoaXMgcGFnZSBpcyBpbnNpZGUgYW4gaWZyYW1lLiIpOwogICAgfSBlbHNlIHsKICAgICAgY29uc29sZS5sb2coIlRoaXMgcGFnZSBpcyBub3QgaW5zaWRlIGFuIGlmcmFtZS4iKTsKICAgIH0KCiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIChldmVudCkgPT4gewogICAgICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoZXZlbnQuZGF0YSksICIqIik7CiAgICAgICAgYXBwLnBvcnRzLmZyb21QYXJlbnRQb3J0LnNlbmQoZXZlbnQuZGF0YSk7CiAgICAgICAgY29uc29sZS5sb2coIk1lc3NhZ2UgZnJvbSBob3N0OiIsIGV2ZW50LmRhdGEpOwogICAgfSk7CgogICAgLy8gYXBwLnBvcnRzLmdldEdlb2xvYy5zdWJzY3JpYmUoYXN5bmMgZnVuY3Rpb24oKSB7CiAgICAvLyAgICAgZ2V0TG9jYXRpb24oYXBwKQogICAgLy8gfSkKfQoKLy8gZnVuY3Rpb24gZ2V0TG9jYXRpb24oYXBwKSB7Ci8vICAgICB2YXIgb3B0aW9ucyA9IHsKLy8gICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3kgOiB0cnVlLAovLyAgICAgICAgIHRpbWVvdXQgOiA1MDAwLAovLyAgICAgICAgIG1heGltdW1BZ2UgOiAwCi8vICAgICB9OwoKLy8gICAgIGlmIChuYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHsKLy8gICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGFwcC5wb3J0cy5nZW9sb2Muc2VuZCwKLy8gICAgICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHsKLy8gICAgICAgICAgICAgICAgIGFwcC5wb3J0cy5nZW9sb2Muc2VuZCgiZ2VvbG9jYXRpb24gbm90IGFsbG93ZWQiKTsKLy8gICAgICAgICAgICAgfSwKLy8gICAgICAgICAgICAgb3B0aW9ucyk7Ci8vICAgICB9IGVsc2UgewovLyAgICAgICAgIGFwcC5wb3J0cy5nZW9sb2Muc2VuZCgibm8gZ2VvbG9jYXRpb24iKTsKLy8gICAgICAgICBjb25zb2xlLmxvZygibm8gZ2VvbG9jYXRpb24iKTsKLy8gICAgIH0KLy8gfQ",
					"AQAAAAAAAAABAAAAxAAAAAAAAADEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"BAAAAEQAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAABJAAAAAAAAAAAAAABJAAAAAAAAAEsAAAAAAAAAAAAAAEsAAAAAAAAATQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAAAAAAAAABEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"paste",
					null,
					"AQAAAE0AAAAAAAAAVwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQAAAAAAAABNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"paste",
					null,
					"AQAAAFcAAAAAAAAAZwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwAAAAAAAABXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": ".send"
					},
					"BQAAAGcAAAAAAAAAaAAAAAAAAAAAAAAAaAAAAAAAAABpAAAAAAAAAAAAAABpAAAAAAAAAGoAAAAAAAAAAAAAAGoAAAAAAAAAawAAAAAAAAAAAAAAawAAAAAAAABsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwAAAAAAAABnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGwAAAAAAAAAbQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAAAAAAAAABsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AQAAAGwAAAAAAAAAbAAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAbQAAAAAAAABtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGwAAAAAAAAAbgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAAAAAAAAABsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAG0AAAAAAAAAbwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQAAAAAAAABtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"paste",
					null,
					"AQAAAG4AAAAAAAAAeAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgAAAAAAAABuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAHgAAAAAAAAAeQAAAAAAAAAAAAAAeQAAAAAAAAB6AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAAAAAAAAAB4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					2,
					"left_delete",
					null,
					"AgAAAHkAAAAAAAAAeQAAAAAAAAABAAAAOngAAAAAAAAAeAAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAegAAAAAAAAB6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAHgAAAAAAAAAeQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAAAAAAAAAB4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " true"
					},
					"BQAAAHkAAAAAAAAAegAAAAAAAAAAAAAAegAAAAAAAAB7AAAAAAAAAAAAAAB7AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAfQAAAAAAAAAAAAAAfQAAAAAAAAB+AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQAAAAAAAAB5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIAAAAAAAAAAgQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAGwAAAAAAAAAbQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAAAAAAAAABsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"left_delete",
					null,
					"AQAAAG0AAAAAAAAAbQAAAAAAAAABAAAAew",
					"AQAAAAAAAAABAAAAbgAAAAAAAABuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"left_delete",
					null,
					"AQAAAH8AAAAAAAAAfwAAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAH8AAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwAAAAAAAAB/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"BAAAAMUAAAAAAAAAxgAAAAAAAAAAAAAAxgAAAAAAAADKAAAAAAAAAAAAAADKAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAAzgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQAAAAAAAADFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"paste",
					null,
					"AQAAAM4AAAAAAAAACwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzgAAAAAAAADOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					4,
					"left_delete",
					null,
					"BAAAANQAAAAAAAAA1AAAAAAAAAACAAAAICDSAAAAAAAAANIAAAAAAAAAAgAAACAg0AAAAAAAAADQAAAAAAAAAAIAAAAgIM4AAAAAAAAAzgAAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"left_delete",
					null,
					"AQAAAAIBAAAAAAAAAgEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAAwEAAAAAAAADAQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "fakse"
					},
					"BgAAAPsAAAAAAAAA/AAAAAAAAAAAAAAA/AAAAAAAAAD8AAAAAAAAAAQAAAB0cnVl/AAAAAAAAAD9AAAAAAAAAAAAAAD9AAAAAAAAAP4AAAAAAAAAAAAAAP4AAAAAAAAA/wAAAAAAAAAAAAAA/wAAAAAAAAAAAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+wAAAAAAAAD/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					2,
					"left_delete",
					null,
					"AgAAAP8AAAAAAAAA/wAAAAAAAAABAAAAZf4AAAAAAAAA/gAAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "ls"
					},
					"AgAAAP4AAAAAAAAA/wAAAAAAAAAAAAAA/wAAAAAAAAAAAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gAAAAAAAAD+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					3,
					"left_delete",
					null,
					"AwAAAP8AAAAAAAAA/wAAAAAAAAABAAAAc/4AAAAAAAAA/gAAAAAAAAABAAAAbP0AAAAAAAAA/QAAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "lse"
					},
					"AwAAAP0AAAAAAAAA/gAAAAAAAAAAAAAA/gAAAAAAAAD/AAAAAAAAAAAAAAD/AAAAAAAAAAABAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QAAAAAAAAD9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAArwQAAAAAAACpBAAAZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oYXBwKSB7CiAgICBpZiAod2luZG93LnNlbGYgIT09IHdpbmRvdy50b3ApIHsKICAgICAgICBhcHAucG9ydHMuaXNJRnJhbWVUZXN0UG9ydC5zZW5kKHtpc0luSWZyYW1lOiB0cnVlfSk7CiAgICAgICAgY29uc29sZS5sb2coIlRoaXMgcGFnZSBpcyBpbnNpZGUgYW4gaWZyYW1lLiIpOwogICAgfSBlbHNlIHsKICAgICAgICBhcHAucG9ydHMuaXNJRnJhbWVUZXN0UG9ydC5zZW5kKHtpc0luSWZyYW1lOiBmYWxzZX0pOwogICAgICAgIGNvbnNvbGUubG9nKCJUaGlzIHBhZ2UgaXMgbm90IGluc2lkZSBhbiBpZnJhbWUuIik7CiAgICB9CgogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLCAoZXZlbnQpID0+IHsKICAgICAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KGV2ZW50LmRhdGEpLCAiKiIpOwogICAgICAgIGFwcC5wb3J0cy5mcm9tUGFyZW50UG9ydC5zZW5kKGV2ZW50LmRhdGEpOwogICAgICAgIGNvbnNvbGUubG9nKCJNZXNzYWdlIGZyb20gaG9zdDoiLCBldmVudC5kYXRhKTsKICAgIH0pOwoKICAgIC8vIGFwcC5wb3J0cy5nZXRHZW9sb2Muc3Vic2NyaWJlKGFzeW5jIGZ1bmN0aW9uKCkgewogICAgLy8gICAgIGdldExvY2F0aW9uKGFwcCkKICAgIC8vIH0pCn0KCi8vIGZ1bmN0aW9uIGdldExvY2F0aW9uKGFwcCkgewovLyAgICAgdmFyIG9wdGlvbnMgPSB7Ci8vICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5IDogdHJ1ZSwKLy8gICAgICAgICB0aW1lb3V0IDogNTAwMCwKLy8gICAgICAgICBtYXhpbXVtQWdlIDogMAovLyAgICAgfTsKCi8vICAgICBpZiAobmF2aWdhdG9yLmdlb2xvY2F0aW9uKSB7Ci8vICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihhcHAucG9ydHMuZ2VvbG9jLnNlbmQsCi8vICAgICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7Ci8vICAgICAgICAgICAgICAgICBhcHAucG9ydHMuZ2VvbG9jLnNlbmQoImdlb2xvY2F0aW9uIG5vdCBhbGxvd2VkIik7Ci8vICAgICAgICAgICAgIH0sCi8vICAgICAgICAgICAgIG9wdGlvbnMpOwovLyAgICAgfSBlbHNlIHsKLy8gICAgICAgICBhcHAucG9ydHMuZ2VvbG9jLnNlbmQoIm5vIGdlb2xvY2F0aW9uIik7Ci8vICAgICAgICAgY29uc29sZS5sb2coIm5vIGdlb2xvY2F0aW9uIik7Ci8vICAgICB9Ci8vIH0",
					"AQAAAAAAAAABAAAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"paste",
					null,
					"AQAAAG0AAAAAAAAAewAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQAAAAAAAABtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAHsAAAAAAAAAfAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewAAAAAAAAB7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"paste",
					null,
					"AQAAAAABAAAAAAAADgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAA4BAAAAAAAADwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgEAAAAAAAAOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAAzQQAAAAAAADNBAAAZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oYXBwKSB7CiAgICBpZiAod2luZG93LnNlbGYgIT09IHdpbmRvdy50b3ApIHsKICAgICAgICBhcHAucG9ydHMuaXNJRnJhbWVUZXN0UG9ydC5zZW5kKEpTT04uc3RyaW5naWZ5KHsgaXNJbklmcmFtZSA6IHRydWUgfSk7CiAgICAgICAgY29uc29sZS5sb2coIlRoaXMgcGFnZSBpcyBpbnNpZGUgYW4gaWZyYW1lLiIpOwogICAgfSBlbHNlIHsKICAgICAgICBhcHAucG9ydHMuaXNJRnJhbWVUZXN0UG9ydC5zZW5kKEpTT04uc3RyaW5naWZ5KHsgaXNJbklmcmFtZSA6IGZhbHNlIH0pOwogICAgICAgIGNvbnNvbGUubG9nKCJUaGlzIHBhZ2UgaXMgbm90IGluc2lkZSBhbiBpZnJhbWUuIik7CiAgICB9CgogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLCAoZXZlbnQpID0+IHsKICAgICAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KGV2ZW50LmRhdGEpLCAiKiIpOwogICAgICAgIGFwcC5wb3J0cy5mcm9tUGFyZW50UG9ydC5zZW5kKGV2ZW50LmRhdGEpOwogICAgICAgIGNvbnNvbGUubG9nKCJNZXNzYWdlIGZyb20gaG9zdDoiLCBldmVudC5kYXRhKTsKICAgIH0pOwoKICAgIC8vIGFwcC5wb3J0cy5nZXRHZW9sb2Muc3Vic2NyaWJlKGFzeW5jIGZ1bmN0aW9uKCkgewogICAgLy8gICAgIGdldExvY2F0aW9uKGFwcCkKICAgIC8vIH0pCn0KCi8vIGZ1bmN0aW9uIGdldExvY2F0aW9uKGFwcCkgewovLyAgICAgdmFyIG9wdGlvbnMgPSB7Ci8vICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5IDogdHJ1ZSwKLy8gICAgICAgICB0aW1lb3V0IDogNTAwMCwKLy8gICAgICAgICBtYXhpbXVtQWdlIDogMAovLyAgICAgfTsKCi8vICAgICBpZiAobmF2aWdhdG9yLmdlb2xvY2F0aW9uKSB7Ci8vICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihhcHAucG9ydHMuZ2VvbG9jLnNlbmQsCi8vICAgICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7Ci8vICAgICAgICAgICAgICAgICBhcHAucG9ydHMuZ2VvbG9jLnNlbmQoImdlb2xvY2F0aW9uIG5vdCBhbGxvd2VkIik7Ci8vICAgICAgICAgICAgIH0sCi8vICAgICAgICAgICAgIG9wdGlvbnMpOwovLyAgICAgfSBlbHNlIHsKLy8gICAgICAgICBhcHAucG9ydHMuZ2VvbG9jLnNlbmQoIm5vIGdlb2xvY2F0aW9uIik7Ci8vICAgICAgICAgY29uc29sZS5sb2coIm5vIGdlb2xvY2F0aW9uIik7Ci8vICAgICB9Ci8vIH0",
					"AQAAAAAAAAABAAAAJgEAAAAAAAAmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAACYBAAAAAAAAJwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgEAAAAAAAAmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAJIAAAAAAAAAkwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgAAAAAAAACSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAAzwQAAAAAAADPBAAAZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oYXBwKSB7CiAgICBpZiAod2luZG93LnNlbGYgIT09IHdpbmRvdy50b3ApIHsKICAgICAgICBhcHAucG9ydHMuaXNJRnJhbWVUZXN0UG9ydC5zZW5kKEpTT04uc3RyaW5naWZ5KHsgaXNJbklmcmFtZSA6IHRydWUgfSkpOwogICAgICAgIGNvbnNvbGUubG9nKCJUaGlzIHBhZ2UgaXMgaW5zaWRlIGFuIGlmcmFtZS4iKTsKICAgIH0gZWxzZSB7CiAgICAgICAgYXBwLnBvcnRzLmlzSUZyYW1lVGVzdFBvcnQuc2VuZChKU09OLnN0cmluZ2lmeSh7IGlzSW5JZnJhbWUgOiBmYWxzZSB9KSk7CiAgICAgICAgY29uc29sZS5sb2coIlRoaXMgcGFnZSBpcyBub3QgaW5zaWRlIGFuIGlmcmFtZS4iKTsKICAgIH0KCiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIChldmVudCkgPT4gewogICAgICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoZXZlbnQuZGF0YSksICIqIik7CiAgICAgICAgYXBwLnBvcnRzLmZyb21QYXJlbnRQb3J0LnNlbmQoZXZlbnQuZGF0YSk7CiAgICAgICAgY29uc29sZS5sb2coIk1lc3NhZ2UgZnJvbSBob3N0OiIsIGV2ZW50LmRhdGEpOwogICAgfSk7CgogICAgLy8gYXBwLnBvcnRzLmdldEdlb2xvYy5zdWJzY3JpYmUoYXN5bmMgZnVuY3Rpb24oKSB7CiAgICAvLyAgICAgZ2V0TG9jYXRpb24oYXBwKQogICAgLy8gfSkKfQoKLy8gZnVuY3Rpb24gZ2V0TG9jYXRpb24oYXBwKSB7Ci8vICAgICB2YXIgb3B0aW9ucyA9IHsKLy8gICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3kgOiB0cnVlLAovLyAgICAgICAgIHRpbWVvdXQgOiA1MDAwLAovLyAgICAgICAgIG1heGltdW1BZ2UgOiAwCi8vICAgICB9OwoKLy8gICAgIGlmIChuYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHsKLy8gICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGFwcC5wb3J0cy5nZW9sb2Muc2VuZCwKLy8gICAgICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHsKLy8gICAgICAgICAgICAgICAgIGFwcC5wb3J0cy5nZW9sb2Muc2VuZCgiZ2VvbG9jYXRpb24gbm90IGFsbG93ZWQiKTsKLy8gICAgICAgICAgICAgfSwKLy8gICAgICAgICAgICAgb3B0aW9ucyk7Ci8vICAgICB9IGVsc2UgewovLyAgICAgICAgIGFwcC5wb3J0cy5nZW9sb2Muc2VuZCgibm8gZ2VvbG9jYXRpb24iKTsKLy8gICAgICAgICBjb25zb2xlLmxvZygibm8gZ2VvbG9jYXRpb24iKTsKLy8gICAgIH0KLy8gfQ",
					"AQAAAAAAAAABAAAAkwAAAAAAAACTAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Game.elm",
			"settings":
			{
				"buffer_size": 19358,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					21,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAACZAAAAAAAAAJ0AAAAAAAAAAAAAAJ0AAAAAAAAAoQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJkAAAAAAAAAmQAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "initial"
					},
					"BwAAACdAAAAAAAAAKEAAAAAAAAAAAAAAKEAAAAAAAAApQAAAAAAAAAAAAAApQAAAAAAAACpAAAAAAAAAAAAAACpAAAAAAAAAK0AAAAAAAAAAAAAAK0AAAAAAAAAsQAAAAAAAAAAAAAAsQAAAAAAAAC1AAAAAAAAAAAAAAC1AAAAAAAAALkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJ0AAAAAAAAAnQAAAAAAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "GamesB"
					},
					"BgAAAC5AAAAAAAAAL0AAAAAAAAAAAAAAL0AAAAAAAAAwQAAAAAAAAAAAAAAwQAAAAAAAADFAAAAAAAAAAAAAADFAAAAAAAAAMkAAAAAAAAAAAAAAMkAAAAAAAAAzQAAAAAAAAAAAAAAzQAAAAAAAADRAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALkAAAAAAAAAuQAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "roadcas"
					},
					"BwAAADRAAAAAAAAANUAAAAAAAAAAAAAANUAAAAAAAAA2QAAAAAAAAAAAAAA2QAAAAAAAADdAAAAAAAAAAAAAADdAAAAAAAAAOEAAAAAAAAAAAAAAOEAAAAAAAAA5QAAAAAAAAAAAAAA5QAAAAAAAADpAAAAAAAAAAAAAADpAAAAAAAAAO0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANEAAAAAAAAA0QAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAADtAAAAAAAAAPEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAO0AAAAAAAAA7QAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADxAAAAAAAAAPUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPEAAAAAAAAA8QAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAD1AAAAAAAAAP0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPUAAAAAAAAA9QAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD5AAAAAAAAAP0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPkAAAAAAAAA+QAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAAD5AAAAAAAAAPkAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAP0AAAAAAAAA/QAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAD1AAAAAAAAAPUAAAAAAAAABAAAAIj1AAAAAAAAAPUAAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAAPkAAAAAAAAA+QAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAD1AAAAAAAAAPkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPUAAAAAAAAA9QAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " M"
					},
					"AgAAAD5AAAAAAAAAP0AAAAAAAAAAAAAAP0AAAAAAAABAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPkAAAAAAAAA+QAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"left_delete",
					null,
					"AQAAAD9AAAAAAAAAP0AAAAAAAAABAAAATQ",
					"AQAAAAAAAAABAAAAQEAAAAAAAABAQAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "Ba"
					},
					"AgAAAD9AAAAAAAAAQEAAAAAAAAAAAAAAQEAAAAAAAABBQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAP0AAAAAAAAA/QAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert_completion",
					{
						"completion": "BackendModel",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "BackendModel"
					},
					"AgAAAD9AAAAAAAAAP0AAAAAAAAACAAAAQmE/QAAAAAAAAEtAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQUAAAAAAAABBQAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAAEtAAAAAAAAATEAAAAAAAAAAAAAATEAAAAAAAABNQAAAAAAAAAAAAABNQAAAAAAAAE5AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAS0AAAAAAAABLQAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE5AAAAAAAAAT0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATkAAAAAAAABOQAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "Cli"
					},
					"AwAAAE9AAAAAAAAAUEAAAAAAAAAAAAAAUEAAAAAAAABRQAAAAAAAAAAAAABRQAAAAAAAAFJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAT0AAAAAAAABPQAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert_completion",
					{
						"completion": "ClientId",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ClientId"
					},
					"AgAAAE9AAAAAAAAAT0AAAAAAAAADAAAAQ2xpT0AAAAAAAABXQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUkAAAAAAAABSQAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " -."
					},
					"AwAAAFdAAAAAAAAAWEAAAAAAAAAAAAAAWEAAAAAAAABZQAAAAAAAAAAAAABZQAAAAAAAAFpAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAV0AAAAAAAABXQAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFpAAAAAAAAAW0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWkAAAAAAAABaQAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					2,
					"left_delete",
					null,
					"AgAAAFpAAAAAAAAAWkAAAAAAAAABAAAAIFlAAAAAAAAAWUAAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAW0AAAAAAAABbQAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAFlAAAAAAAAAWkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWUAAAAAAAABZQAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"left_delete",
					null,
					"AQAAAFlAAAAAAAAAWUAAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAAWkAAAAAAAABaQAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAFlAAAAAAAAAWkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWUAAAAAAAABZQAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " C"
					},
					"AgAAAFpAAAAAAAAAW0AAAAAAAAAAAAAAW0AAAAAAAABcQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWkAAAAAAAABaQAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "md"
					},
					"AgAAAFxAAAAAAAAAXUAAAAAAAAAAAAAAXUAAAAAAAABeQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXEAAAAAAAABcQAAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " Ba"
					},
					"AwAAAF5AAAAAAAAAX0AAAAAAAAAAAAAAX0AAAAAAAABgQAAAAAAAAAAAAABgQAAAAAAAAGFAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXkAAAAAAAABeQAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert_completion",
					{
						"completion": "BackendMsg",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "BackendMsg"
					},
					"AgAAAF9AAAAAAAAAX0AAAAAAAAACAAAAQmFfQAAAAAAAAGlAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYUAAAAAAAABhQAAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "\nini"
					},
					"BAAAAGlAAAAAAAAAakAAAAAAAAAAAAAAakAAAAAAAABrQAAAAAAAAAAAAABrQAAAAAAAAGxAAAAAAAAAAAAAAGxAAAAAAAAAbUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaUAAAAAAAABpQAAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert_completion",
					{
						"completion": "initialGamesBroadcast",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "initialGamesBroadcast"
					},
					"AgAAAGpAAAAAAAAAakAAAAAAAAADAAAAaW5pakAAAAAAAAB/QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbUAAAAAAAABtQAAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " model"
					},
					"BgAAAH9AAAAAAAAAgEAAAAAAAAAAAAAAgEAAAAAAAACBQAAAAAAAAAAAAACBQAAAAAAAAIJAAAAAAAAAAAAAAIJAAAAAAAAAg0AAAAAAAAAAAAAAg0AAAAAAAACEQAAAAAAAAAAAAACEQAAAAAAAAIVAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAf0AAAAAAAAB/QAAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " clien"
					},
					"BgAAAIVAAAAAAAAAhkAAAAAAAAAAAAAAhkAAAAAAAACHQAAAAAAAAAAAAACHQAAAAAAAAIhAAAAAAAAAAAAAAIhAAAAAAAAAiUAAAAAAAAAAAAAAiUAAAAAAAACKQAAAAAAAAAAAAACKQAAAAAAAAItAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhUAAAAAAAACFQAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert_completion",
					{
						"completion": "ClientId",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ClientId"
					},
					"AgAAAIZAAAAAAAAAhkAAAAAAAAAFAAAAY2xpZW6GQAAAAAAAAI5AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAi0AAAAAAAACLQAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"left_delete",
					null,
					"AQAAAIZAAAAAAAAAhkAAAAAAAAABAAAAQw",
					"AQAAAAAAAAABAAAAh0AAAAAAAACHQAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAIZAAAAAAAAAh0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhkAAAAAAAACGQAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAI5AAAAAAAAAj0AAAAAAAAAAAAAAj0AAAAAAAACQQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjkAAAAAAAACOQAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJBAAAAAAAAAkUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkEAAAAAAAACQQAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"left_delete",
					null,
					"AQAAAJBAAAAAAAAAkEAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAkUAAAAAAAACRQAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJBAAAAAAAAAkUAAAAAAAAAAAAAAkUAAAAAAAACVQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkEAAAAAAAACQQAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"paste",
					null,
					"AQAAAJVAAAAAAAAAkEEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlUAAAAAAAACVQAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " g"
					},
					"AgAAAK9AAAAAAAAAsEAAAAAAAAAAAAAAsEAAAAAAAACxQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAr0AAAAAAAACvQAAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					3,
					"left_delete",
					null,
					"AwAAAMhAAAAAAAAAyEAAAAAAAAABAAAAZcdAAAAAAAAAx0AAAAAAAAABAAAAbcZAAAAAAAAAxkAAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAyUAAAAAAAADJQAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					3,
					"left_delete",
					null,
					"AwAAAH1BAAAAAAAAfUEAAAAAAAABAAAAZXxBAAAAAAAAfEEAAAAAAAABAAAAbXtBAAAAAAAAe0EAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAfkEAAAAAAAB+QQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "\nDi"
					},
					"BAAAAIxBAAAAAAAAjUEAAAAAAAAAAAAAjUEAAAAAAACRQQAAAAAAAAAAAACRQQAAAAAAAJJBAAAAAAAAAAAAAJJBAAAAAAAAk0EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjEEAAAAAAACMQQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "ct.m"
					},
					"BAAAAJNBAAAAAAAAlEEAAAAAAAAAAAAAlEEAAAAAAACVQQAAAAAAAAAAAACVQQAAAAAAAJZBAAAAAAAAAAAAAJZBAAAAAAAAl0EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAk0EAAAAAAACTQQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAJdBAAAAAAAAmEEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAl0EAAAAAAACXQQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					7,
					"left_delete",
					null,
					"BwAAAJdBAAAAAAAAl0EAAAAAAAABAAAAb5ZBAAAAAAAAlkEAAAAAAAABAAAAbZVBAAAAAAAAlUEAAAAAAAABAAAALpRBAAAAAAAAlEEAAAAAAAABAAAAdJNBAAAAAAAAk0EAAAAAAAABAAAAY5JBAAAAAAAAkkEAAAAAAAABAAAAaZFBAAAAAAAAkUEAAAAAAAABAAAARA",
					"AQAAAAAAAAABAAAAmEEAAAAAAACYQQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "Dict.c"
					},
					"BgAAAJFBAAAAAAAAkkEAAAAAAAAAAAAAkkEAAAAAAACTQQAAAAAAAAAAAACTQQAAAAAAAJRBAAAAAAAAAAAAAJRBAAAAAAAAlUEAAAAAAAAAAAAAlUEAAAAAAACWQQAAAAAAAAAAAACWQQAAAAAAAJdBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkUEAAAAAAACRQQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"left_delete",
					null,
					"AQAAAJZBAAAAAAAAlkEAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAl0EAAAAAAACXQQAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "values"
					},
					"BgAAAJZBAAAAAAAAl0EAAAAAAAAAAAAAl0EAAAAAAACYQQAAAAAAAAAAAACYQQAAAAAAAJlBAAAAAAAAAAAAAJlBAAAAAAAAmkEAAAAAAAAAAAAAmkEAAAAAAACbQQAAAAAAAAAAAACbQQAAAAAAAJxBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlkEAAAAAAACWQQAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": " model"
					},
					"BgAAAJxBAAAAAAAAnUEAAAAAAAAAAAAAnUEAAAAAAACeQQAAAAAAAAAAAACeQQAAAAAAAJ9BAAAAAAAAAAAAAJ9BAAAAAAAAoEEAAAAAAAAAAAAAoEEAAAAAAAChQQAAAAAAAAAAAAChQQAAAAAAAKJBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnEEAAAAAAACcQQAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": ".k"
					},
					"AgAAAKJBAAAAAAAAo0EAAAAAAAAAAAAAo0EAAAAAAACkQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAokEAAAAAAACiQQAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert_completion",
					{
						"completion": "kggames",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "kggames"
					},
					"AgAAAKNBAAAAAAAAo0EAAAAAAAABAAAAa6NBAAAAAAAAqkEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApEEAAAAAAACkQQAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "\n|>"
					},
					"BAAAAKpBAAAAAAAAq0EAAAAAAAAAAAAAq0EAAAAAAACvQQAAAAAAAAAAAACvQQAAAAAAALBBAAAAAAAAAAAAALBBAAAAAAAAsUEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqkEAAAAAAACqQQAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": " Du"
					},
					"AwAAALFBAAAAAAAAskEAAAAAAAAAAAAAskEAAAAAAACzQQAAAAAAAAAAAACzQQAAAAAAALRBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsUEAAAAAAACxQQAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"left_delete",
					null,
					"AQAAALNBAAAAAAAAs0EAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAtEEAAAAAAAC0QQAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "ict"
					},
					"AwAAALNBAAAAAAAAtEEAAAAAAAAAAAAAtEEAAAAAAAC1QQAAAAAAAAAAAAC1QQAAAAAAALZBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAs0EAAAAAAACzQQAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALZBAAAAAAAAt0EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtkEAAAAAAAC2QQAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"left_delete",
					null,
					"AQAAALZBAAAAAAAAtkEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAt0EAAAAAAAC3QQAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": ".map"
					},
					"BAAAALZBAAAAAAAAt0EAAAAAAAAAAAAAt0EAAAAAAAC4QQAAAAAAAAAAAAC4QQAAAAAAALlBAAAAAAAAAAAAALlBAAAAAAAAukEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtkEAAAAAAAC2QQAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": " game"
					},
					"BQAAALpBAAAAAAAAu0EAAAAAAAAAAAAAu0EAAAAAAAC8QQAAAAAAAAAAAAC8QQAAAAAAAL1BAAAAAAAAAAAAAL1BAAAAAAAAvkEAAAAAAAAAAAAAvkEAAAAAAAC/QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAukEAAAAAAAC6QQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					4,
					"left_delete",
					null,
					"BAAAAL5BAAAAAAAAvkEAAAAAAAABAAAAZb1BAAAAAAAAvUEAAAAAAAABAAAAbbxBAAAAAAAAvEEAAAAAAAABAAAAYbtBAAAAAAAAu0EAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAv0EAAAAAAAC/QQAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALtBAAAAAAAAvUEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAu0EAAAAAAAC7QQAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAALxBAAAAAAAAvUEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvEEAAAAAAAC8QQAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAL1BAAAAAAAAvkEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvUEAAAAAAAC9QQAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAAL5BAAAAAAAAv0EAAAAAAAAAAAAAv0EAAAAAAADAQQAAAAAAAAAAAADAQQAAAAAAAMFBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvkEAAAAAAAC+QQAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMFBAAAAAAAAwkEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwUEAAAAAAADBQQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAMJBAAAAAAAAxEEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwkEAAAAAAADCQQAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAMNBAAAAAAAAxEEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAw0EAAAAAAADDQQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": " |"
					},
					"AgAAAMRBAAAAAAAAxUEAAAAAAAAAAAAAxUEAAAAAAADGQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxEEAAAAAAADEQQAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": " game"
					},
					"BQAAAMZBAAAAAAAAx0EAAAAAAAAAAAAAx0EAAAAAAADIQQAAAAAAAAAAAADIQQAAAAAAAMlBAAAAAAAAAAAAAMlBAAAAAAAAykEAAAAAAAAAAAAAykEAAAAAAADLQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxkEAAAAAAADGQQAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"insert_completion",
					{
						"completion": "gameState",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "gameState"
					},
					"AgAAAMdBAAAAAAAAx0EAAAAAAAAEAAAAZ2FtZcdBAAAAAAAA0EEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAy0EAAAAAAADLQQAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAANBBAAAAAAAA0UEAAAAAAAAAAAAA0UEAAAAAAADSQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0EEAAAAAAADQQQAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"left_delete",
					null,
					"AQAAANFBAAAAAAAA0UEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA0kEAAAAAAADSQQAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAANFBAAAAAAAA0kEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0UEAAAAAAADRQQAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": " game"
					},
					"BQAAANJBAAAAAAAA00EAAAAAAAAAAAAA00EAAAAAAADUQQAAAAAAAAAAAADUQQAAAAAAANVBAAAAAAAAAAAAANVBAAAAAAAA1kEAAAAAAAAAAAAA1kEAAAAAAADXQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0kEAAAAAAADSQQAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert_completion",
					{
						"completion": "gameStateLight",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "gameStateLight"
					},
					"AgAAANNBAAAAAAAA00EAAAAAAAAEAAAAZ2FtZdNBAAAAAAAA4UEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA10EAAAAAAADXQQAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": " g"
					},
					"AgAAAOFBAAAAAAAA4kEAAAAAAAAAAAAA4kEAAAAAAADjQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4UEAAAAAAADhQQAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "\n|>"
					},
					"BAAAAOVBAAAAAAAA5kEAAAAAAAAAAAAA5kEAAAAAAADqQQAAAAAAAAAAAADqQQAAAAAAAOtBAAAAAAAAAAAAAOtBAAAAAAAA7EEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5UEAAAAAAADlQQAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOxBAAAAAAAA7UEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7EEAAAAAAADsQQAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "List"
					},
					"BQAAALJBAAAAAAAAs0EAAAAAAAAAAAAAs0EAAAAAAACzQQAAAAAAAAQAAABEaWN0s0EAAAAAAAC0QQAAAAAAAAAAAAC0QQAAAAAAALVBAAAAAAAAAAAAALVBAAAAAAAAtkEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAskEAAAAAAAC2QQAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"paste",
					null,
					"AQAAAO1BAAAAAAAA/EEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7UEAAAAAAADtQQAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "\n|<"
					},
					"BAAAAPxBAAAAAAAA/UEAAAAAAAAAAAAA/UEAAAAAAAABQgAAAAAAAAAAAAABQgAAAAAAAAJCAAAAAAAAAAAAAAJCAAAAAAAAA0IAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/EEAAAAAAAD8QQAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"left_delete",
					null,
					"AQAAAAJCAAAAAAAAAkIAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAAA0IAAAAAAAADQgAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAAJCAAAAAAAAA0IAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAkIAAAAAAAACQgAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": " se"
					},
					"AwAAAANCAAAAAAAABEIAAAAAAAAAAAAABEIAAAAAAAAFQgAAAAAAAAAAAAAFQgAAAAAAAAZCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAA0IAAAAAAAADQgAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"insert_completion",
					{
						"completion": "sendToFrontend",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "sendToFrontend"
					},
					"AgAAAARCAAAAAAAABEIAAAAAAAACAAAAc2UEQgAAAAAAABJCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABkIAAAAAAAAGQgAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": " cle"
					},
					"BAAAABJCAAAAAAAAE0IAAAAAAAAAAAAAE0IAAAAAAAAUQgAAAAAAAAAAAAAUQgAAAAAAABVCAAAAAAAAAAAAABVCAAAAAAAAFkIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEkIAAAAAAAASQgAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert_completion",
					{
						"completion": "clientId",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "clientId"
					},
					"AgAAABNCAAAAAAAAE0IAAAAAAAADAAAAY2xlE0IAAAAAAAAbQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFkIAAAAAAAAWQgAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAfEsAAAAAAAAtUwAAbW9kdWxlIEdhbWUgZXhwb3NpbmcgKC4uKQoKaW1wb3J0IEFwaUNhbGxzCmltcG9ydCBEaWN0CmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nIChzaHVmZmxlU2VlZCkKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBMaXN0LkV4dHJhCmltcG9ydCBSYW5kb20KaW1wb3J0IFNldAppbXBvcnQgVGltZQppbXBvcnQgVHlwZXMgZXhwb3NpbmcgKC4uKQoKCnVwZGF0ZUNvbmZpZyA6CiAgICBCYWNrZW5kTW9kZWwKICAgIC0+IEdhbWVJZAogICAgLT4geyBrYW5qaVNldCA6IEthbmppU2V0LCByb3VuZExlbmd0aCA6IEludCwgc3RhcnRpbmdDb3VudGRvd24gOiBJbnQgfQogICAgLT4gKCBCYWNrZW5kTW9kZWwsIENtZCBCYWNrZW5kTXNnICkKdXBkYXRlQ29uZmlnIG1vZGVsIGdhbWVJZCBjb25maWcgPQogICAgY2FzZSBEaWN0LmdldCBnYW1lSWQgbW9kZWwua2dnYW1lcyBvZgogICAgICAgIEp1c3QgZ2FtZSAtPgogICAgICAgICAgICBjYXNlIGdhbWUuZ2FtZVN0YXRlIG9mCiAgICAgICAgICAgICAgICBMb2JieSBfIC0+CiAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0dhbWUgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBnYW1lIHwgZ2FtZVN0YXRlID0gTG9iYnkgY29uZmlnIH0KICAgICAgICAgICAgICAgICAgICBpbgogICAgICAgICAgICAgICAgICAgICggeyBtb2RlbCB8IGtnZ2FtZXMgPSBEaWN0Lmluc2VydCBnYW1lSWQgbmV3R2FtZSBtb2RlbC5rZ2dhbWVzIH0KICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdEdhbWUgbmV3R2FtZQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBfIC0+CiAgICAgICAgICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKICAgICAgICBfIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgpjcmVhdGVHYW1lIDogQmFja2VuZE1vZGVsIC0+IFRpbWUuUG9zaXggLT4gUGxheWVyIC0+IHsga2FuamlTZXQgOiBLYW5qaVNldCwgcm91bmRMZW5ndGggOiBJbnQsIHN0YXJ0aW5nQ291bnRkb3duIDogSW50IH0gLT4gKCBCYWNrZW5kTW9kZWwsIENtZCBCYWNrZW5kTXNnICkKY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcgPQogICAgbGV0CiAgICAgICAgbmV4dElkID0KICAgICAgICAgICAgRGljdC5rZXlzIG1vZGVsLmtnZ2FtZXMKICAgICAgICAgICAgICAgIHw+IExpc3QuZm9sZHIgbWF4IC0xCiAgICAgICAgICAgICAgICB8PiAoXG4gLT4gbiArIDEpCgogICAgICAgIG5ld0dhbWUgPQogICAgICAgICAgICB7IGdhbWVJZCA9IG5leHRJZAogICAgICAgICAgICAsIGhvc3QgPSBob3N0CiAgICAgICAgICAgICwgcGxheWVycyA9IFsgaG9zdCBdCiAgICAgICAgICAgICwgZ2FtZVN0YXRlID0gTG9iYnkgY29uZmlnCiAgICAgICAgICAgICwgbGFzdFVwZGF0ZWQgPSBUaW1lLnBvc2l4VG9NaWxsaXMgbm93CiAgICAgICAgICAgICwgYnVmZmVyaW5nID0gRmFsc2UKICAgICAgICAgICAgLCBpbml0aWFsQnVmZmVyID0gRmFsc2UKCiAgICAgICAgICAgIC0tLCByb3VuZExlbmd0aCA6IEludAogICAgICAgICAgICB9CiAgICBpbgogICAgKCB7IG1vZGVsIHwga2dnYW1lcyA9IERpY3QuaW5zZXJ0IG5leHRJZCBuZXdHYW1lIG1vZGVsLmtnZ2FtZXMgfSwgYnJvYWRjYXN0R2FtZSBuZXdHYW1lICkKCgpqb2luR2FtZSA6IEJhY2tlbmRNb2RlbCAtPiBQbGF5ZXIgLT4gR2FtZUlkIC0+ICggQmFja2VuZE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmpvaW5HYW1lIG1vZGVsIHBsYXllciBnYW1lSWQgPQogICAgY2FzZSBEaWN0LmdldCBnYW1lSWQgbW9kZWwua2dnYW1lcyBvZgogICAgICAgIEp1c3QgZ2FtZSAtPgogICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgIG5ld0dhbWUgPQogICAgICAgICAgICAgICAgICAgIHsgZ2FtZQogICAgICAgICAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IDx8IExpc3QubWVtYmVyIHBsYXllciBnYW1lLnBsYXllcnMgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllciA6OiBnYW1lLnBsYXllcnMKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5wbGF5ZXJzCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICBpbgogICAgICAgICAgICAoIHsgbW9kZWwgfCBrZ2dhbWVzID0gRGljdC5pbnNlcnQgZ2FtZUlkIG5ld0dhbWUgbW9kZWwua2dnYW1lcyB9LCBicm9hZGNhc3RHYW1lIG5ld0dhbWUgKQoKICAgICAgICBfIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgpsZWF2ZUdhbWUgOiBCYWNrZW5kTW9kZWwgLT4gUGxheWVyIC0+IEdhbWVJZCAtPiAoIEJhY2tlbmRNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQpsZWF2ZUdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZCA9CiAgICBjYXNlIERpY3QuZ2V0IGdhbWVJZCBtb2RlbC5rZ2dhbWVzIG9mCiAgICAgICAgSnVzdCBnYW1lIC0+CiAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgbmV3R2FtZSA9CiAgICAgICAgICAgICAgICAgICAgeyBnYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIHwgcGxheWVycyA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBMaXN0Lm1lbWJlciBwbGF5ZXIgZ2FtZS5wbGF5ZXJzIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0LkV4dHJhLnJlbW92ZSBwbGF5ZXIgZ2FtZS5wbGF5ZXJzCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUucGxheWVycwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgaW4KICAgICAgICAgICAgKCB7IG1vZGVsIHwga2dnYW1lcyA9IERpY3QuaW5zZXJ0IGdhbWVJZCBuZXdHYW1lIG1vZGVsLmtnZ2FtZXMgfSwgYnJvYWRjYXN0R2FtZSBuZXdHYW1lICkKCiAgICAgICAgXyAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKbGF1bmNoUGxheSA6IEJhY2tlbmRNb2RlbCAtPiBHYW1lSWQgLT4gKCBCYWNrZW5kTW9kZWwsIENtZCBCYWNrZW5kTXNnICkKbGF1bmNoUGxheSBtb2RlbCBnYW1lSWQgPQogICAgY2FzZSBEaWN0LmdldCBnYW1lSWQgbW9kZWwua2dnYW1lcyBvZgogICAgICAgIEp1c3QgZ2FtZSAtPgogICAgICAgICAgICBjYXNlIGdhbWUuZ2FtZVN0YXRlIG9mCiAgICAgICAgICAgICAgICBMb2JieSBjb25maWcgLT4KICAgICAgICAgICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgICAgICAgICAgKCBuZXdTZWVkLCBrYW5qaUZvclRoaXNHYW1lLCBidWZmZXJlZEthbmppICkgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKFwoIHMsIHIgKSAtPiAoIHMsIExpc3QuZHJvcCA1IHIsIExpc3QudGFrZSA1IHIgKSkgPHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbmZpZy5rYW5qaVNldCBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKbHB0U2V0IGxldmVscyAtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGlzdC5maWx0ZXJNYXAgKFxuIC0+IERpY3QuZ2V0IG4gamxwdCkgbGV2ZWxzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfD4gTGlzdC5jb25jYXRNYXAgU3RyaW5nLnRvTGlzdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHw+IHNodWZmbGVTZWVkIG1vZGVsLnNlZWQKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1c3RvbUthbmppU2V0IGthbmppTGlzdCAtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCBtb2RlbC5zZWVkLCBrYW5qaUxpc3QgKQoKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEthbmppID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIExpc3QuaGVhZCBidWZmZXJlZEthbmppIHw+IE1heWJlLndpdGhEZWZhdWx0ICfinYwnCgogICAgICAgICAgICAgICAgICAgICAgICBhbGxUaGVXb3JkcyA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEaWN0LmVtcHR5CgogICAgICAgICAgICAgICAgICAgICAgICBuZXdHYW1lU3RhdGUgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5QbGF5IDx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzY29yZSA9IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGN1cnJlbnRLYW5qaSA9IGN1cnJlbnRLYW5qaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgcmVtYWluaW5nS2FuamkgPSBrYW5qaUZvclRoaXNHYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBidWZmZXJlZEthbmppID0gTGlzdC50YWlsIGJ1ZmZlcmVkS2FuamkgfD4gTWF5YmUud2l0aERlZmF1bHQgW10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGthbmppU2VlbiA9IFtdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCB3b3JkcyA9IERpY3QuZW1wdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGFsbG93ZWRXb3JkcyA9IGFsbFRoZVdvcmRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCByZXF1ZXN0ZWRTa2lwID0gW10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHRpbWVUaWxsUm91bmRFbmQgPSBjb25maWcucm91bmRMZW5ndGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHRpbWVUaWxsR2FtZU92ZXIgPSBjb25maWcuc3RhcnRpbmdDb3VudGRvd24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHJvdW5kTGVuZ3RoID0gY29uZmlnLnJvdW5kTGVuZ3RoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBzdGFydGluZ0NvdW50ZG93biA9IGNvbmZpZy5zdGFydGluZ0NvdW50ZG93bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0dhbWUgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBnYW1lIHwgZ2FtZVN0YXRlID0gbmV3R2FtZVN0YXRlLCBidWZmZXJpbmcgPSBUcnVlLCBpbml0aWFsQnVmZmVyID0gVHJ1ZSB9CiAgICAgICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBrZ2dhbWVzID0gRGljdC5pbnNlcnQgZ2FtZUlkIG5ld0dhbWUgbW9kZWwua2dnYW1lcywgc2VlZCA9IG5ld1NlZWQgfQogICAgICAgICAgICAgICAgICAgICwgQ21kLmJhdGNoIFsgQXBpQ2FsbHMuZ2V0QWxsVGhlV29yZHMgZ2FtZUlkIGJ1ZmZlcmVkS2FuamkgXQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBfIC0+CiAgICAgICAgICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKICAgICAgICBfIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgpydW5HYW1lcyA6IEJhY2tlbmRNb2RlbCAtPiBUaW1lLlBvc2l4IC0+ICggQmFja2VuZE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCnJ1bkdhbWVzIG1vZGVsIG5vdyA9CiAgICBMaXN0LmZvbGRyCiAgICAgICAgKFxnICggY3VycmVudE1vZGVsLCBjbWRzICkgLT4KICAgICAgICAgICAgaWYgZ2FtZVJ1bm5pbmcgZyB0aGVuCiAgICAgICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgICAgICAoIG5ld01vZGVsLCBuZXdDbWQgKSA9CiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkdhbWUgY3VycmVudE1vZGVsIG5vdyBnLmdhbWVJZAogICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICggeyBjdXJyZW50TW9kZWwgfCBrZ2dhbWVzID0gRGljdC51bmlvbiBuZXdNb2RlbC5rZ2dhbWVzIGN1cnJlbnRNb2RlbC5rZ2dhbWVzIH0KICAgICAgICAgICAgICAgICwgbmV3Q21kIDo6IGNtZHMKICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICggY3VycmVudE1vZGVsLCBjbWRzICkKICAgICAgICApCiAgICAgICAgKCBtb2RlbCwgW10gKQogICAgICAgIChEaWN0LnZhbHVlcyBtb2RlbC5rZ2dhbWVzKQogICAgICAgIHw+IFR1cGxlLm1hcFNlY29uZCBDbWQuYmF0Y2gKCgpydW5HYW1lIDogQmFja2VuZE1vZGVsIC0+IFRpbWUuUG9zaXggLT4gR2FtZUlkIC0+ICggQmFja2VuZE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCnJ1bkdhbWUgbW9kZWwgbm93IGdhbWVJZCA9CiAgICBjYXNlIERpY3QuZ2V0IGdhbWVJZCBtb2RlbC5rZ2dhbWVzIG9mCiAgICAgICAgSnVzdCBnYW1lIC0+CiAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgdGltZVN0YW1wZWRNb2RlbCA9CiAgICAgICAgICAgICAgICAgICAgYWRkVGltZVN0YW1wTW9kZWwgbW9kZWwgZ2FtZUlkIG5vdwogICAgICAgICAgICBpbgogICAgICAgICAgICBjYXNlIGdhbWUuZ2FtZVN0YXRlIG9mCiAgICAgICAgICAgICAgICBMb2JieSBjb25maWcgLT4KICAgICAgICAgICAgICAgICAgICBsYXVuY2hQbGF5IHRpbWVTdGFtcGVkTW9kZWwgZ2FtZUlkCgogICAgICAgICAgICAgICAgSW5QbGF5IF8gLT4KICAgICAgICAgICAgICAgICAgICB0b05leHRSb3VuZCB0aW1lU3RhbXBlZE1vZGVsIGdhbWVJZAoKICAgICAgICAgICAgICAgIFZpY3RvcnkgXyAtPgogICAgICAgICAgICAgICAgICAgICggdGltZVN0YW1wZWRNb2RlbCwgQ21kLm5vbmUgKQoKICAgICAgICAgICAgICAgIEdhbWVPdmVyIF8gLT4KICAgICAgICAgICAgICAgICAgICAoIHRpbWVTdGFtcGVkTW9kZWwsIENtZC5ub25lICkKCiAgICAgICAgXyAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKcmVxdWVzdE5leHRLYW5qaSA6IEJhY2tlbmRNb2RlbCAtPiBHYW1lSWQgLT4gUGxheWVyIC0+ICggQmFja2VuZE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCnJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllciA9CiAgICBjYXNlIERpY3QuZ2V0IGdhbWVJZCBtb2RlbC5rZ2dhbWVzIG9mCiAgICAgICAgSnVzdCBnYW1lIC0+CiAgICAgICAgICAgIGNhc2UgZ2FtZS5nYW1lU3RhdGUgb2YKICAgICAgICAgICAgICAgIEluUGxheSBzdWJzdGF0ZSAtPgogICAgICAgICAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgICAgICAgICBuZXdHYW1lU3RhdGUgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5QbGF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdWJzdGF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHJlcXVlc3RlZFNraXAgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IDx8IExpc3QubWVtYmVyIHBsYXllciBzdWJzdGF0ZS5yZXF1ZXN0ZWRTa2lwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIgOjogc3Vic3RhdGUucmVxdWVzdGVkU2tpcAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzdGF0ZS5yZXF1ZXN0ZWRTa2lwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgbmV3R2FtZSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGdhbWUgfCBnYW1lU3RhdGUgPSBuZXdHYW1lU3RhdGUgfQogICAgICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAgICAgKCB7IG1vZGVsIHwga2dnYW1lcyA9IERpY3QuaW5zZXJ0IGdhbWVJZCBuZXdHYW1lIG1vZGVsLmtnZ2FtZXMgfSwgYnJvYWRjYXN0R2FtZSBuZXdHYW1lICkKCiAgICAgICAgICAgICAgICBfIC0+CiAgICAgICAgICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKICAgICAgICBfIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgphbGxQbGF5ZXJSZXF1ZXN0ZWROZXh0S2FuamkgZ2FtZSA9CiAgICBjYXNlIGdhbWUuZ2FtZVN0YXRlIG9mCiAgICAgICAgSW5QbGF5IHN1YnN0YXRlIC0+CiAgICAgICAgICAgIFNldC5mcm9tTGlzdCAoTGlzdC5tYXAgLmlkIGdhbWUucGxheWVycykgPT0gU2V0LmZyb21MaXN0IChMaXN0Lm1hcCAuaWQgc3Vic3RhdGUucmVxdWVzdGVkU2tpcCkKCiAgICAgICAgXyAtPgogICAgICAgICAgICBGYWxzZQoKCmFkZFdvcmQgOiBCYWNrZW5kTW9kZWwgLT4gR2FtZUlkIC0+IFBsYXllciAtPiBTdHJpbmcgLT4gKCBCYWNrZW5kTW9kZWwsIENtZCBCYWNrZW5kTXNnICkKYWRkV29yZCBtb2RlbCBnYW1lSWQgcGxheWVyIHdvcmQgPQogICAgY2FzZSBEaWN0LmdldCBnYW1lSWQgbW9kZWwua2dnYW1lcyBvZgogICAgICAgIEp1c3QgZ2FtZSAtPgogICAgICAgICAgICBjYXNlIGdhbWUuZ2FtZVN0YXRlIG9mCiAgICAgICAgICAgICAgICBJblBsYXkgc3Vic3RhdGUgLT4KICAgICAgICAgICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFdvcmRzID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERpY3QuZ2V0IHBsYXllci5pZCBzdWJzdGF0ZS53b3JkcyB8PiBNYXliZS53aXRoRGVmYXVsdCBbXQoKICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZQbGF5ZXJzID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIExpc3QubGVuZ3RoIGdhbWUucGxheWVycwoKICAgICAgICAgICAgICAgICAgICAgICAgdGltZUJvbnVzID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb29yICgxMCAvIHRvRmxvYXQgbnVtYmVyT2ZQbGF5ZXJzKQoKICAgICAgICAgICAgICAgICAgICAgICAgcm91bmRUaW1lQm9udXMgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxvb3IgKDUgLyB0b0Zsb2F0IG51bWJlck9mUGxheWVycykKCiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUdhbWUgbnMgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3R2FtZSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgZ2FtZSB8IGdhbWVTdGF0ZSA9IEluUGxheSBucyB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKCB7IG1vZGVsIHwga2dnYW1lcyA9IERpY3QuaW5zZXJ0IGdhbWVJZCBuZXdHYW1lIG1vZGVsLmtnZ2FtZXMgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBDbWQuYmF0Y2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIGJyb2FkY2FzdEdhbWUgbmV3R2FtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgaWYgbm90IDx8IGNhbkFkZFdvcmQgd29yZCBnYW1lIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFRvRnJvbnRlbmQgcGxheWVyLmlkIChXcm9uZ1dvcmRURiB3b3JkKQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ21kLm5vbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgICAgICAgICBuZXdTdWJzdGF0ZSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBjYW5BZGRXb3JkIHdvcmQgZ2FtZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdWJzdGF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNjb3JlID0gc3Vic3RhdGUuc2NvcmUgKyAxMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHdvcmRzID0gRGljdC5pbnNlcnQgcGxheWVyLmlkICh3b3JkIDo6IGN1cnJlbnRXb3Jkcykgc3Vic3RhdGUud29yZHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCB0aW1lVGlsbFJvdW5kRW5kID0gc3Vic3RhdGUudGltZVRpbGxSb3VuZEVuZCArIHJvdW5kVGltZUJvbnVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgdGltZVRpbGxHYW1lT3ZlciA9IHN1YnN0YXRlLnRpbWVUaWxsR2FtZU92ZXIgKyB0aW1lQm9udXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3Vic3RhdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0aW1lVGlsbFJvdW5kRW5kID0gc3Vic3RhdGUudGltZVRpbGxSb3VuZEVuZCAtIHJvdW5kVGltZUJvbnVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgdGltZVRpbGxHYW1lT3ZlciA9IHN1YnN0YXRlLnRpbWVUaWxsR2FtZU92ZXIgLSB0aW1lQm9udXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICAgICB1cGRhdGVHYW1lIG5ld1N1YnN0YXRlCgogICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCiAgICAgICAgTm90aGluZyAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKY2FuQWRkV29yZCA6IFN0cmluZyAtPiBLYW5qaUd1ZXNzaW5nR2FtZSAtPiBCb29sCmNhbkFkZFdvcmQgd29yZCBnYW1lID0KICAgIGNhc2UgZ2FtZS5nYW1lU3RhdGUgb2YKICAgICAgICBJblBsYXkgc3Vic3RhdGUgLT4KICAgICAgICAgICAgY2FzZSBEaWN0LmdldCBzdWJzdGF0ZS5jdXJyZW50S2Fuamkgc3Vic3RhdGUuYWxsb3dlZFdvcmRzIG9mCiAgICAgICAgICAgICAgICBKdXN0IHJlbGV2YW50QWxsb3dlZFdvcmRzIC0+CiAgICAgICAgICAgICAgICAgICAgKG5vdCA8fCBMaXN0Lm1lbWJlciB3b3JkIChMaXN0LmNvbmNhdCA8fCBEaWN0LnZhbHVlcyBzdWJzdGF0ZS53b3JkcykpCiAgICAgICAgICAgICAgICAgICAgICAgICYmIExpc3QubWVtYmVyIHdvcmQgcmVsZXZhbnRBbGxvd2VkV29yZHMKCiAgICAgICAgICAgICAgICBfIC0+CiAgICAgICAgICAgICAgICAgICAgRmFsc2UKCiAgICAgICAgXyAtPgogICAgICAgICAgICBGYWxzZQoKCnRvTmV4dFJvdW5kIDogQmFja2VuZE1vZGVsIC0+IEdhbWVJZCAtPiAoIEJhY2tlbmRNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp0b05leHRSb3VuZCBtb2RlbCBnYW1lSWQgPQogICAgY2FzZSBEaWN0LmdldCBnYW1lSWQgbW9kZWwua2dnYW1lcyBvZgogICAgICAgIEp1c3QgZ2FtZSAtPgogICAgICAgICAgICBjYXNlIGdhbWUuZ2FtZVN0YXRlIG9mCiAgICAgICAgICAgICAgICBJblBsYXkgc3Vic3RhdGUgLT4KICAgICAgICAgICAgICAgICAgICBpZiBnYW1lLmluaXRpYWxCdWZmZXIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub01vcmVUaW1lID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzdGF0ZS50aW1lVGlsbEdhbWVPdmVyIDw9IDEKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3VuZE92ZXIgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0YXRlLnRpbWVUaWxsUm91bmRFbmQgPD0gMQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0dhbWVTdGF0ZSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdWJzdGF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHRpbWVUaWxsUm91bmRFbmQgPSBtYXggMCA8fCBzdWJzdGF0ZS50aW1lVGlsbFJvdW5kRW5kIC0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHRpbWVUaWxsR2FtZU92ZXIgPSBtYXggMCA8fCBzdWJzdGF0ZS50aW1lVGlsbEdhbWVPdmVyIC0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVHYW1lIGdzID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3R2FtZSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGdhbWUgfCBnYW1lU3RhdGUgPSBJblBsYXkgZ3MgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBtb2RlbCB8IGtnZ2FtZXMgPSBEaWN0Lmluc2VydCBnYW1lSWQgbmV3R2FtZSBtb2RlbC5rZ2dhbWVzIH0KICAgICAgICAgICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm9Nb3JlVGltZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdHYW1lID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBnYW1lIHwgZ2FtZVN0YXRlID0gR2FtZU92ZXIgeyBzY29yZSA9IHN1YnN0YXRlLnNjb3JlIH0gfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICggeyBtb2RlbCB8IGtnZ2FtZXMgPSBEaWN0Lmluc2VydCBnYW1lSWQgbmV3R2FtZSBtb2RlbC5rZ2dhbWVzIH0sIGJyb2FkY2FzdEdhbWUgbmV3R2FtZSApCgogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIGFsbFBsYXllclJlcXVlc3RlZE5leHRLYW5qaSBnYW1lICYmIChub3QgPHwgZ2FtZS5idWZmZXJpbmcpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWROZXh0S2FuamkgKHVwZGF0ZUdhbWUgeyBuZXdHYW1lU3RhdGUgfCByZXF1ZXN0ZWRTa2lwID0gW10gfSkgZ2FtZUlkCgogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIHJvdW5kT3ZlciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkTmV4dEthbmppICh1cGRhdGVHYW1lIG5ld0dhbWVTdGF0ZSkgZ2FtZUlkCgogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIHVwZGF0ZUdhbWUgbmV3R2FtZVN0YXRlLCBicm9hZGNhc3RHYW1lVGltZXMgeyBnYW1lIHwgZ2FtZVN0YXRlID0gSW5QbGF5IG5ld0dhbWVTdGF0ZSB9ICkKCiAgICAgICAgICAgICAgICBfIC0+CiAgICAgICAgICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKICAgICAgICBfIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgpsb2FkTmV4dEthbmppIDogQmFja2VuZE1vZGVsIC0+IEdhbWVJZCAtPiAoIEJhY2tlbmRNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQpsb2FkTmV4dEthbmppIG1vZGVsIGdhbWVJZCA9CiAgICBjYXNlIERpY3QuZ2V0IGdhbWVJZCBtb2RlbC5rZ2dhbWVzIG9mCiAgICAgICAgSnVzdCBnYW1lIC0+CiAgICAgICAgICAgIGNhc2UgZ2FtZS5nYW1lU3RhdGUgb2YKICAgICAgICAgICAgICAgIEluUGxheSBzdWJzdGF0ZSAtPgogICAgICAgICAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgICAgICAgICBtYk5leHRLYW5qaVRvQnVmZmVyID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIExpc3QuaGVhZCBzdWJzdGF0ZS5yZW1haW5pbmdLYW5qaQoKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlR2FtZSBuZ3MgYnVmZmVyaW5nIGNtZCA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdHYW1lID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBnYW1lIHwgZ2FtZVN0YXRlID0gbmdzLCBidWZmZXJpbmcgPSBidWZmZXJpbmcgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICggeyBtb2RlbCB8IGtnZ2FtZXMgPSBEaWN0Lmluc2VydCBnYW1lSWQgbmV3R2FtZSBtb2RlbC5rZ2dhbWVzIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgQ21kLmJhdGNoIFsgYnJvYWRjYXN0R2FtZSBuZXdHYW1lLCBjbWQgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAgICAgY2FzZSBzdWJzdGF0ZS5idWZmZXJlZEthbmppIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFtdIC0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVHYW1lIChWaWN0b3J5IHsgc2NvcmUgPSBzdWJzdGF0ZS5zY29yZSB9KSBGYWxzZSBDbWQubm9uZQoKICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEthbmppIDo6IHRhaWwgLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUdhbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoSW5QbGF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3Vic3RhdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY3VycmVudEthbmppID0gbmV4dEthbmppCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGthbmppU2VlbiA9IHN1YnN0YXRlLmN1cnJlbnRLYW5qaSA6OiBzdWJzdGF0ZS5rYW5qaVNlZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgdGltZVRpbGxSb3VuZEVuZCA9IHN1YnN0YXRlLnJvdW5kTGVuZ3RoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHJlbWFpbmluZ0thbmppID0gTGlzdC50YWlsIHN1YnN0YXRlLnJlbWFpbmluZ0thbmppIHw+IE1heWJlLndpdGhEZWZhdWx0IFtdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGJ1ZmZlcmVkS2FuamkgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1heWJlLm1hcCAoXG5rYiAtPiB0YWlsICsrIFsgbmtiIF0pIG1iTmV4dEthbmppVG9CdWZmZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfD4gTWF5YmUud2l0aERlZmF1bHQgc3Vic3RhdGUuYnVmZmVyZWRLYW5qaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoTWF5YmUubWFwIChcbmtiIC0+IEFwaUNhbGxzLmdldFdvcmRzIGdhbWVJZCBua2IpIG1iTmV4dEthbmppVG9CdWZmZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfD4gTWF5YmUud2l0aERlZmF1bHQgQ21kLm5vbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCiAgICAgICAgTm90aGluZyAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKZ2FtZVJ1bm5pbmcgOiBLYW5qaUd1ZXNzaW5nR2FtZSAtPiBCb29sCmdhbWVSdW5uaW5nIGdhbWUgPQogICAgY2FzZSBnYW1lLmdhbWVTdGF0ZSBvZgogICAgICAgIEluUGxheSBfIC0+CiAgICAgICAgICAgIFRydWUKCiAgICAgICAgXyAtPgogICAgICAgICAgICBGYWxzZQoKCmdhbWVzUnVubmluZyA6IEJhY2tlbmRNb2RlbCAtPiBCb29sCmdhbWVzUnVubmluZyB7IGtnZ2FtZXMgfSA9CiAgICBMaXN0LmFueQogICAgICAgIChcZyAtPgogICAgICAgICAgICBjYXNlIGcuZ2FtZVN0YXRlIG9mCiAgICAgICAgICAgICAgICBJblBsYXkgXyAtPgogICAgICAgICAgICAgICAgICAgIFRydWUKCiAgICAgICAgICAgICAgICBfIC0+CiAgICAgICAgICAgICAgICAgICAgRmFsc2UKICAgICAgICApCiAgICAgICAgKERpY3QudmFsdWVzIGtnZ2FtZXMpCgoKYWRkVGltZVN0YW1wIDogS2FuamlHdWVzc2luZ0dhbWUgLT4gVGltZS5Qb3NpeCAtPiBLYW5qaUd1ZXNzaW5nR2FtZQphZGRUaW1lU3RhbXAgZ2FtZSBub3cgPQogICAgeyBnYW1lIHwgbGFzdFVwZGF0ZWQgPSBUaW1lLnBvc2l4VG9NaWxsaXMgbm93IH0KCgphZGRUaW1lU3RhbXBNb2RlbCA6IEJhY2tlbmRNb2RlbCAtPiBHYW1lSWQgLT4gVGltZS5Qb3NpeCAtPiBCYWNrZW5kTW9kZWwKYWRkVGltZVN0YW1wTW9kZWwgbW9kZWwgZ2FtZUlkIG5vdyA9CiAgICBjYXNlIERpY3QuZ2V0IGdhbWVJZCBtb2RlbC5rZ2dhbWVzIG9mCiAgICAgICAgSnVzdCBnYW1lIC0+CiAgICAgICAgICAgIHsgbW9kZWwgfCBrZ2dhbWVzID0gRGljdC5pbnNlcnQgZ2FtZUlkIHsgZ2FtZSB8IGxhc3RVcGRhdGVkID0gVGltZS5wb3NpeFRvTWlsbGlzIG5vdyB9IG1vZGVsLmtnZ2FtZXMgfQoKICAgICAgICBfIC0+CiAgICAgICAgICAgIG1vZGVsCgoKaW5pdGlhbEdhbWVzQnJvYWRjYXN0IDogQmFja2VuZE1vZGVsIC0+IENsaWVudElkIC0+IENtZCBCYWNrZW5kTXNnCmluaXRpYWxHYW1lc0Jyb2FkY2FzdCBtb2RlbCBjbGllbnRJZCA9CiAgICBsZXQKICAgICAgICBnYW1lU3RhdGVMaWdodCBnID0KICAgICAgICAgICAgY2FzZSBnLmdhbWVTdGF0ZSBvZgogICAgICAgICAgICAgICAgSW5QbGF5IHN1YnN0YXRlIC0+CiAgICAgICAgICAgICAgICAgICAgSW5QbGF5IHsgc3Vic3RhdGUgfCBhbGxvd2VkV29yZHMgPSBEaWN0LmVtcHR5LCByZW1haW5pbmdLYW5qaSA9IFtdIH0KCiAgICAgICAgICAgICAgICBfIC0+CiAgICAgICAgICAgICAgICAgICAgZy5nYW1lU3RhdGUKICAgIGluCiAgICBEaWN0LnZhbHVlcyBtb2RlbC5rZ2dhbWVzCiAgICB8PiBMaXN0Lm1hcCAoXGcgLT4ge2cgfCBnYW1lU3RhdGUgPSBnYW1lU3RhdGVMaWdodCBnfSkKICAgIHw+IEdhbWVCcm9hZGNhc3RURgogICAgfD4gc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQKCmJyb2FkY2FzdEdhbWUgOiBLYW5qaUd1ZXNzaW5nR2FtZSAtPiBDbWQgQmFja2VuZE1zZwpicm9hZGNhc3RHYW1lIGdhbWUgPQogICAgbGV0CiAgICAgICAgZ2FtZVN0YXRlTGlnaHQgPQogICAgICAgICAgICBjYXNlIGdhbWUuZ2FtZVN0YXRlIG9mCiAgICAgICAgICAgICAgICBJblBsYXkgc3Vic3RhdGUgLT4KICAgICAgICAgICAgICAgICAgICBJblBsYXkgeyBzdWJzdGF0ZSB8IGFsbG93ZWRXb3JkcyA9IERpY3QuZW1wdHksIHJlbWFpbmluZ0thbmppID0gW10gfQoKICAgICAgICAgICAgICAgIF8gLT4KICAgICAgICAgICAgICAgICAgICBnYW1lLmdhbWVTdGF0ZQogICAgaW4KICAgIGJyb2FkY2FzdCA8fCBHYW1lQnJvYWRjYXN0VEYgeyBnYW1lIHwgZ2FtZVN0YXRlID0gZ2FtZVN0YXRlTGlnaHQgfQoKCmJyb2FkY2FzdEdhbWVUaW1lcyA6IEthbmppR3Vlc3NpbmdHYW1lIC0+IENtZCBCYWNrZW5kTXNnCmJyb2FkY2FzdEdhbWVUaW1lcyBnYW1lID0KICAgIGNhc2UgZ2FtZS5nYW1lU3RhdGUgb2YKICAgICAgICBJblBsYXkgc3Vic3RhdGUgLT4KICAgICAgICAgICAgYnJvYWRjYXN0IDx8CiAgICAgICAgICAgICAgICBHYW1lVGltZXNCcm9hZGNhc3RURgogICAgICAgICAgICAgICAgICAgIHsgZ2FtZUlkID0gZ2FtZS5nYW1lSWQKICAgICAgICAgICAgICAgICAgICAsIGxhc3RVcGRhdGVkID0gZ2FtZS5sYXN0VXBkYXRlZAogICAgICAgICAgICAgICAgICAgICwgdGltZVRpbGxHYW1lT3ZlciA9IHN1YnN0YXRlLnRpbWVUaWxsR2FtZU92ZXIKICAgICAgICAgICAgICAgICAgICAsIHRpbWVUaWxsUm91bmRFbmQgPSBzdWJzdGF0ZS50aW1lVGlsbFJvdW5kRW5kCiAgICAgICAgICAgICAgICAgICAgLCBidWZmZXJpbmcgPSBnYW1lLmJ1ZmZlcmluZwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgXyAtPgogICAgICAgICAgICBDbWQubm9uZQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKcmFuZG9tSkxQVEthbmppTGlzdCA6IFJhbmRvbS5TZWVkIC0+IEludCAtPiAoIFJhbmRvbS5TZWVkLCBMaXN0IENoYXIgKQpyYW5kb21KTFBUS2FuamlMaXN0IHNlZWQgbGV2ZWwgPQogICAgY2FzZSBEaWN0LmdldCBsZXZlbCBqbHB0IG9mCiAgICAgICAgSnVzdCBrYW5qaVN0ciAtPgogICAgICAgICAgICBzaHVmZmxlU2VlZCBzZWVkIChTdHJpbmcudG9MaXN0IGthbmppU3RyKQoKICAgICAgICBfIC0+CiAgICAgICAgICAgICggc2VlZCwgW10gKQoKCmpscHQgPQogICAgRGljdC5mcm9tTGlzdAogICAgICAgIFsgKCA1LCAi5pel5LiA5Zu95Lq65bm05aSn5Y2B5LqM5pys5Lit6ZW35Ye65LiJ5pmC6KGM6KaL5pyI5YiG5b6M5YmN55Sf5LqU6ZaT5LiK5p2x5Zub5LuK6YeR5Lmd5YWl5a2m6auY5YaG5a2Q5aSW5YWr5YWt5LiL5p2l5rCX5bCP5LiD5bGx6Kmx5aWz5YyX5Y2I55m+5pu45YWI5ZCN5bed5Y2D5rC05Y2K55S36KW/6Zu75qCh6Kqe5Zyf5pyo6IGe6aOf6LuK5L2V5Y2X5LiH5q+O55m95aSp5q+N54Gr5Y+z6Kqt5Y+L5bem5LyR54i26Zuo5bqX5pWZ5aOy55+l6LW36KiAIiApCiAgICAgICAgLCAoIDQsICLkvJrlkIzkuovoh6rnpL7nmbrogIXlnLDmpa3mlrnmlrDloLTlk6Hnq4vplovmiYvlipvllY/ku6PmmI7li5Xkuqznm67pgJrnkIbkvZPnlLDkuLvpoYzmhI/kuI3kvZznlKjluqblvLflhazmjIHph47ku6XmgJ3lrrbkuJblpJrmraPlronpmaLlv4PnlYzmloflhYPph43ov5HogIPnlLvmtbfpgZPpm4bliKXniankvb/lk4HoqIjmrbvnibnnp4Hlp4vmnJ3pgYvntYLlj7DluoPkvY/nhKHnnJ/mnInlj6PlsJHnlLrmlpnlt6Xlu7rnqbrmgKXmraLpgIHliIfou6LnoJTotrPnqbbmpb3nnYDnl4Xos6rlvoXoqabml4/pioDml6nmmKDopqrpqJPoi7HljLvku5XljrvlkbPlhpnlrZfnrZTlpJzpn7Pms6jluLDlj6TmrYzosrfmgqrlm7PpgLHlrqTmranpoqjntJnpu5LoirHmmKXotaTpnZLppKjlsYvoibLotbDnp4vlpI/nv5Lpp4XmtIvml4XmnI3lpJXlgJ/mm5zpo7LogonosrjloILps6Xpo6/li4nlhqzmmLzojLblvJ/niZvprZrlhYTniqzlprnlp4nmvKIiICkKICAgICAgICAsICggMywgIuaUv+itsOawkemAo+WvvumDqOWQiOW4guWGheebuOWumuWbnumBuOexs+Wun+mWouaxuuWFqOihqOaIpue1jOacgOePvuiqv+WMluW9k+e0hOmmluazleaAp+eahOimgeWItuayu+WLmeaIkOacn+WPlumDveWSjOapn+W5s+WKoOWPl+e2mumAsuaVsOiomOWIneaMh+aoqeaUr+eUo+eCueWgsea4iOa0u+WOn+WFseW+l+ino+S6pOizh+S6iOWQkemam+WLnemdouWRiuWPjeWIpOiqjeWPguWIqee1hOS/oeWcqOS7tuWBtOS7u+W8leaxguaJgOasoeaYqOirluWumOWil+S/guaEn+aDheaKleekuuWkieaJk+ebtOS4oeW8j+eiuuaenOWuueW/hea8lOats+S6ieirh+iDveS9jee9rua1geagvOeWkemBjuWxgOaUvuW4uOeKtueQg+iBt+S4juS+m+W9ueani+WJsui6q+iyu+S7mOeUseiqrOmbo+WEquWkq+WPjuaWreefs+mBlea2iOelnueVquimj+ihk+WCmeWuheWus+mFjeitpuiCsuW4reioquS5l+aui+aDs+WjsOWKqeWKtOS+i+eEtumZkOi/veWVhuiRieS8neWDjeW9ouaZr+iQveWlvemAgOmgreiyoOa4oeWkseW3ruacq+WuiOiLpeeorue+juWRveemj+acm+mdnuims+Wvn+auteaoqua3seeUs+anmOiyoea4r+itmOWRvOmBlOiJr+mYquWAmeeoi+a6gOaVl+WApOeqgeWFiei3r+enkeepjeS7luWHpuWkquWuouWQpuW4q+eZu+aYk+mAn+WtmOmjm+auuuWPt+WNmOW6p+egtOmZpOWujOmZjeiyrOaNleWNsee1puiLpui/juWckuWFt+i+nuWboOmmrOaEm+WvjOW9vOacquiInuS6oeWGt+mBqeWppuWvhOi+vOmhlOmhnuS9meeOi+i/lOWmu+iDjOeGseWuv+iWrOmZuumgvOimmuiIuemAlOioseaKnOS+v+eVmee9quWKqueyvuaVo+mdmeWpmuWWnOa1rue1tuW5uOaKvOWAkuetieiAgeabsuaJleW6reW+kuWLpOmBheWxhembkeaLm+WbsOasoOabtOWIu+izm+aKseeKr+aBkOaBr+mBoOaIu+mhmOe1tei2iuassueXm+eskeS6kuadn+S8vOWIl+aOoumAg+mBiui/t+WkouWQm+mWiee3kuaKmOiNieaarumFkuaCsuaZtOaOm+WIsOWvneaal+ebl+WQuOmZveW+oeatr+W/mOmbquWQueWomOiqpOa0l+aFo+ekvOeqk+aYlOiyp+aAkuazs+elluadr+eWsueahumztOiFueeFmeecoOaAluiAs+mggueuseaZqeWvkumrquW/meaJjemdtOaBpeWBtuWBieeMq+W5vuiqsCIgKQogICAgICAgICwgKCAyLCAi5YWa5Y2U57eP5Yy66aCY55yM6Kit5L+d5pS556ys57WQ5rS+5bqc5p+75aeU6LuN5qGI562W5Zuj5ZCE5bO26Z2p5p2R5Yui5rib5YaN56iO5Za25q+U6Ziy6KOc5aKD5bCO5Ymv566X6Ly46L+w57ea6L6y5bee5q2m6LGh5Z+f6aGN5qyn5ouF5rqW6LOe6L666YCg6KKr5oqA5L2O5b6p56e75YCL6ZaA6Kqy6ISz5qW15ZCr6JS16YeP5Z6L5rOB6Yed5bCC6LC35Y+y6ZqO566h5YW15o6l57Sw5Yq55Li45rm+6Yyy55yB5pen5qmL5bK45ZGo5p2Q5oi45aSu5Yi457eo5o2c56u56LaF5Lim55mC5o6h5qOu56u25LuL5qC56LKp5q205bCG5bmF6Iis6LK/6Kyb5p6X6KOF6Ku45YqH5rKz6Iiq6YmE5YWQ56aB5Y2w6YCG5o+b5LmF55+t5rK55pq06Lyq5Y2g5qSN5riF5YCN5Z2H5YSE5Zyn6Iq4572y5Ly45YGc54iG6Zm4546J5rOi5biv5bu257695Zu65YmH5Lmx5pmu5ris6LGK5Y6a6b2i5Zuy5Y2S55Wl5om/6aCG5bKp57e06Lu95LqG5bqB5Z+O5oKj5bGk54mI5Luk6KeS57Wh5pCN5Yuf6KOP5LuP57i+56+J6LKo5re35piH5rGg6KGA5rip5a2j5pif5rC46JGX6KqM5bqr5YiK5YOP6aaZ5Z2C5bqV5biD5a+65a6H5beo6ZyH5biM6Kem5L6d57GN5rGa5p6a6KSH6YO15Luy5qCE5pyt5p2/6aqo5YK+5bGK5be754eD6Leh5YyF6aeQ5byx57S56ZuH5pu/6aCQ54S857Ch56ug6IeT5b6L6LSI54Wn6JaE576k56eS5aWl6Kmw5Y+M5Yi657SU57+M5b+r54mH5pWs5oKp5rOJ55qu5ryB6I2S6LKv56Gs5Z+L5p+x56Wt6KKL562G6KiT5rW056ul5a6d5bCB6IO456CC5aGp6LOi6IWV5YWG5bqK5q+b57eR5bCK56Wd5p+U5q6/5r+D5ray6KGj6IKp6Zu25bm86I235rOK6buE55SY6Iej5rWF5o6D6Zuy5o6Y5o2o6Luf5rKI5YeN5Lmz5oGL57SF6YOK6IWw54Kt6LiK5YaK5YuH5qKw6I+c54+N5Y215rmW5Zar5bmy6Jmr5Yi35rmv5rq26Ymx5raZ5Yy55a2r6Yut5p6d5aGX6LuS5q+S5Y+r5oud5rC35Lm+5qOS56WI5ou+57KJ57O457a/5rGX6YqF5rm/55O25ZKy5Y+s57y26Zq76ISC6JK46IKM6ICV6YiN5rOl6ZqF54Gv6L6b56Oo6bqm5aeT562S6by757KS6Kme6IOD55Wz5py66Iaa5r+v5aGU5rK454Gw6I+T5bi95p6v5ra86Iif6LKd56ym5oaO55q/6IKv54el55Wc5Z2K5oyf5puH5ru05Ly6IiApCiAgICAgICAgXQo",
					"AQAAAAAAAAABAAAAG0IAAAAAAAAbQgAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAI8AAAAAAAAAkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": " C;"
					},
					"AwAAAJAAAAAAAAAAkQAAAAAAAAAAAAAAkQAAAAAAAACSAAAAAAAAAAAAAACSAAAAAAAAAJMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"left_delete",
					null,
					"AQAAAJIAAAAAAAAAkgAAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAkwAAAAAAAACTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAJIAAAAAAAAAkwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgAAAAAAAACSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert_completion",
					{
						"completion": "ClientId",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ClientId"
					},
					"AgAAAJEAAAAAAAAAkQAAAAAAAAACAAAAQ2yRAAAAAAAAAJkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwAAAAAAAACTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "List."
					},
					"BQAAAAFCAAAAAAAAAkIAAAAAAAAAAAAAAkIAAAAAAAADQgAAAAAAAAAAAAADQgAAAAAAAARCAAAAAAAAAAAAAARCAAAAAAAABUIAAAAAAAAAAAAABUIAAAAAAAAGQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAUIAAAAAAAABQgAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "map"
					},
					"AwAAAAZCAAAAAAAAB0IAAAAAAAAAAAAAB0IAAAAAAAAIQgAAAAAAAAAAAAAIQgAAAAAAAAlCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABkIAAAAAAAAGQgAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAlCAAAAAAAACkIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACUIAAAAAAAAJQgAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"cut",
					null,
					"AQAAACVCAAAAAAAAJUIAAAAAAAAXAAAAc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQ",
					"AQAAAAAAAAABAAAAJUIAAAAAAAA8QgAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAApCAAAAAAAAC0IAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACkIAAAAAAAAKQgAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"paste",
					null,
					"AQAAAAtCAAAAAAAAIkIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAC0IAAAAAAAALQgAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAACJCAAAAAAAAI0IAAAAAAAAAAAAAI0IAAAAAAAAkQgAAAAAAAAAAAAAkQgAAAAAAACVCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIkIAAAAAAAAiQgAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACVCAAAAAAAAJkIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJUIAAAAAAAAlQgAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAADVCAAAAAAAANkIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANUIAAAAAAAA1QgAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": "Cmd."
					},
					"BAAAAEJCAAAAAAAAQ0IAAAAAAAAAAAAAQ0IAAAAAAABEQgAAAAAAAAAAAABEQgAAAAAAAEVCAAAAAAAAAAAAAEVCAAAAAAAARkIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQkIAAAAAAABCQgAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert_completion",
					{
						"completion": "batch",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "batch"
					},
					"AQAAAEZCAAAAAAAAS0IAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARkIAAAAAAABGQgAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"left_delete",
					null,
					"AQAAADVCAAAAAAAANUIAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAANkIAAAAAAAA2QgAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAADVCAAAAAAAANkIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANUIAAAAAAAA1QgAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAANkIAAAAAAAA2QgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Frontend.elm",
			"settings":
			{
				"buffer_size": 8502,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					807,
					1,
					"insert",
					{
						"characters": "co"
					},
					"AwAAAMQdAAAAAAAAxR0AAAAAAAAAAAAAxR0AAAAAAADFHQAAAAAAAAMAAAByb3fFHQAAAAAAAMYdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxB0AAAAAAADHHQAAAAAAAAAAAAAAAPC/"
				],
				[
					808,
					1,
					"insert_completion",
					{
						"completion": "column",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "column"
					},
					"AgAAAMQdAAAAAAAAxB0AAAAAAAACAAAAY2/EHQAAAAAAAModAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxh0AAAAAAADGHQAAAAAAAAAAAAAAAPC/"
				],
				[
					809,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAAyh0AAAAAAADKHQAAAAAAAAAAAAAAAPC/"
				],
				[
					816,
					1,
					"insert_snippet",
					{
						"contents": "(${0:$SELECTION})"
					},
					"AgAAAAUfAAAAAAAABR8AAAAAAAAEAAAAVHJ1ZQUfAAAAAAAACx8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABR8AAAAAAAAJHwAAAAAAAAAAAAAAAPC/"
				],
				[
					817,
					1,
					"insert",
					{
						"characters": "model"
					},
					"BgAAAAYfAAAAAAAABx8AAAAAAAAAAAAABx8AAAAAAAAHHwAAAAAAAAQAAABUcnVlBx8AAAAAAAAIHwAAAAAAAAAAAAAIHwAAAAAAAAkfAAAAAAAAAAAAAAkfAAAAAAAACh8AAAAAAAAAAAAACh8AAAAAAAALHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABh8AAAAAAAAKHwAAAAAAAAAAAAAAAPC/"
				],
				[
					818,
					1,
					"left_delete",
					null,
					"AQAAAAofAAAAAAAACh8AAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAACx8AAAAAAAALHwAAAAAAAAAAAAAAAPC/"
				],
				[
					819,
					1,
					"insert",
					{
						"characters": "l.user"
					},
					"BgAAAAofAAAAAAAACx8AAAAAAAAAAAAACx8AAAAAAAAMHwAAAAAAAAAAAAAMHwAAAAAAAA0fAAAAAAAAAAAAAA0fAAAAAAAADh8AAAAAAAAAAAAADh8AAAAAAAAPHwAAAAAAAAAAAAAPHwAAAAAAABAfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACh8AAAAAAAAKHwAAAAAAAAAAAAAAAPC/"
				],
				[
					820,
					1,
					"insert_completion",
					{
						"completion": "username",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "username"
					},
					"AgAAAAwfAAAAAAAADB8AAAAAAAAEAAAAdXNlcgwfAAAAAAAAFB8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEB8AAAAAAAAQHwAAAAAAAAAAAAAAAPC/"
				],
				[
					821,
					1,
					"insert",
					{
						"characters": " /="
					},
					"AwAAABQfAAAAAAAAFR8AAAAAAAAAAAAAFR8AAAAAAAAWHwAAAAAAAAAAAAAWHwAAAAAAABcfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFB8AAAAAAAAUHwAAAAAAAAAAAAAAAPC/"
				],
				[
					822,
					1,
					"insert",
					{
						"characters": " No"
					},
					"AwAAABcfAAAAAAAAGB8AAAAAAAAAAAAAGB8AAAAAAAAZHwAAAAAAAAAAAAAZHwAAAAAAABofAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFx8AAAAAAAAXHwAAAAAAAAAAAAAAAPC/"
				],
				[
					823,
					1,
					"insert_completion",
					{
						"completion": "Nothing",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Nothing"
					},
					"AgAAABgfAAAAAAAAGB8AAAAAAAACAAAATm8YHwAAAAAAAB8fAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGh8AAAAAAAAaHwAAAAAAAAAAAAAAAPC/"
				],
				[
					825,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACEfAAAAAAAAIh8AAAAAAAAAAAAAIh8AAAAAAAAuHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIR8AAAAAAAAhHwAAAAAAAAAAAAAAAPC/"
				],
				[
					826,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAALh8AAAAAAAAuHwAAAAAAAAAAAAAAAPC/"
				],
				[
					832,
					1,
					"paste",
					null,
					"AgAAAF4OAAAAAAAAow4AAAAAAAAAAAAAow4AAAAAAACjDgAAAAAAAAgAAABDbWQubm9uZQ",
					"AQAAAAAAAAABAAAAXg4AAAAAAABmDgAAAAAAAAAAAAAAAPC/"
				],
				[
					839,
					1,
					"insert",
					{
						"characters": "\ncase"
					},
					"BwAAAEgOAAAAAAAASQ4AAAAAAAAAAAAASQ4AAAAAAABRDgAAAAAAAAAAAABRDgAAAAAAAFUOAAAAAAAAAAAAAFUOAAAAAAAAVg4AAAAAAAAAAAAAVg4AAAAAAABXDgAAAAAAAAAAAABXDgAAAAAAAFgOAAAAAAAAAAAAAFgOAAAAAAAAWQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASA4AAAAAAABIDgAAAAAAAAAAAAAAAPC/"
				],
				[
					840,
					1,
					"insert",
					{
						"characters": " model.user"
					},
					"CwAAAFkOAAAAAAAAWg4AAAAAAAAAAAAAWg4AAAAAAABbDgAAAAAAAAAAAABbDgAAAAAAAFwOAAAAAAAAAAAAAFwOAAAAAAAAXQ4AAAAAAAAAAAAAXQ4AAAAAAABeDgAAAAAAAAAAAABeDgAAAAAAAF8OAAAAAAAAAAAAAF8OAAAAAAAAYA4AAAAAAAAAAAAAYA4AAAAAAABhDgAAAAAAAAAAAABhDgAAAAAAAGIOAAAAAAAAAAAAAGIOAAAAAAAAYw4AAAAAAAAAAAAAYw4AAAAAAABkDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQ4AAAAAAABZDgAAAAAAAAAAAAAAAPC/"
				],
				[
					841,
					1,
					"insert_completion",
					{
						"completion": "username",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "username"
					},
					"AgAAAGAOAAAAAAAAYA4AAAAAAAAEAAAAdXNlcmAOAAAAAAAAaA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZA4AAAAAAABkDgAAAAAAAAAAAAAAAPC/"
				],
				[
					842,
					1,
					"insert",
					{
						"characters": " =-"
					},
					"AwAAAGgOAAAAAAAAaQ4AAAAAAAAAAAAAaQ4AAAAAAABqDgAAAAAAAAAAAABqDgAAAAAAAGsOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaA4AAAAAAABoDgAAAAAAAAAAAAAAAPC/"
				],
				[
					843,
					2,
					"left_delete",
					null,
					"AgAAAGoOAAAAAAAAag4AAAAAAAABAAAALWkOAAAAAAAAaQ4AAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAaw4AAAAAAABrDgAAAAAAAAAAAAAAAPC/"
				],
				[
					844,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAGkOAAAAAAAAag4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQ4AAAAAAABpDgAAAAAAAAAAAAAAAPC/"
				],
				[
					845,
					1,
					"left_delete",
					null,
					"AQAAAGkOAAAAAAAAaQ4AAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAag4AAAAAAABqDgAAAAAAAAAAAAAAAPC/"
				],
				[
					846,
					1,
					"insert",
					{
						"characters": "of"
					},
					"AgAAAGkOAAAAAAAAag4AAAAAAAAAAAAAag4AAAAAAABrDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQ4AAAAAAABpDgAAAAAAAAAAAAAAAPC/"
				],
				[
					847,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGsOAAAAAAAAbA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaw4AAAAAAABrDgAAAAAAAAAAAAAAAPC/"
				],
				[
					848,
					1,
					"insert",
					{
						"characters": "\nJust"
					},
					"BwAAAGwOAAAAAAAAbQ4AAAAAAAAAAAAAbQ4AAAAAAAB5DgAAAAAAAAAAAAB5DgAAAAAAAH0OAAAAAAAAAAAAAH0OAAAAAAAAfg4AAAAAAAAAAAAAfg4AAAAAAAB/DgAAAAAAAAAAAAB/DgAAAAAAAIAOAAAAAAAAAAAAAIAOAAAAAAAAgQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbA4AAAAAAABsDgAAAAAAAAAAAAAAAPC/"
				],
				[
					849,
					1,
					"insert",
					{
						"characters": " u"
					},
					"AgAAAIEOAAAAAAAAgg4AAAAAAAAAAAAAgg4AAAAAAACDDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQ4AAAAAAACBDgAAAAAAAAAAAAAAAPC/"
				],
				[
					850,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAAIMOAAAAAAAAhA4AAAAAAAAAAAAAhA4AAAAAAACFDgAAAAAAAAAAAACFDgAAAAAAAIYOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgw4AAAAAAACDDgAAAAAAAAAAAAAAAPC/"
				],
				[
					851,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIYOAAAAAAAAhw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhg4AAAAAAACGDgAAAAAAAAAAAAAAAPC/"
				],
				[
					854,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAJQOAAAAAAAAmA4AAAAAAAAAAAAAmA4AAAAAAACcDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlA4AAAAAAACUDgAAAAAAAAAAAAAAAPC/"
				],
				[
					863,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AgAAANQOAAAAAAAA1Q4AAAAAAAAAAAAA1Q4AAAAAAADVDgAAAAAAAAgAAAB1c2VybmFtZQ",
					"AQAAAAAAAAABAAAA1A4AAAAAAADcDgAAAAAAAAAAAAAAAPC/"
				],
				[
					868,
					1,
					"insert_snippet",
					{
						"contents": "\"${0:$SELECTION}\""
					},
					"AgAAANYOAAAAAAAA1g4AAAAAAAANAAAAc2Vzc2lvbkNvb2tpZdYOAAAAAAAA5Q4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1g4AAAAAAADjDgAAAAAAAAAAAAAAAPC/"
				],
				[
					869,
					1,
					"left_delete",
					null,
					"AQAAANcOAAAAAAAA1w4AAAAAAAANAAAAc2Vzc2lvbkNvb2tpZQ",
					"AQAAAAAAAAABAAAA1w4AAAAAAADkDgAAAAAAAAAAAAAAAPC/"
				],
				[
					871,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANoOAAAAAAAA2w4AAAAAAAAAAAAA2w4AAAAAAADvDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2g4AAAAAAADaDgAAAAAAAAAAAAAAAPC/"
				],
				[
					872,
					1,
					"left_delete",
					null,
					"AQAAAOsOAAAAAAAA6w4AAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAA7w4AAAAAAADvDgAAAAAAAAAAAAAAAPC/"
				],
				[
					873,
					1,
					"insert",
					{
						"characters": "No"
					},
					"AgAAAOsOAAAAAAAA7A4AAAAAAAAAAAAA7A4AAAAAAADtDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6w4AAAAAAADrDgAAAAAAAAAAAAAAAPC/"
				],
				[
					874,
					1,
					"insert_completion",
					{
						"completion": "Nothing",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Nothing"
					},
					"AgAAAOsOAAAAAAAA6w4AAAAAAAACAAAATm/rDgAAAAAAAPIOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7Q4AAAAAAADtDgAAAAAAAAAAAAAAAPC/"
				],
				[
					875,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAAPIOAAAAAAAA8w4AAAAAAAAAAAAA8w4AAAAAAAD0DgAAAAAAAAAAAAD0DgAAAAAAAPUOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8g4AAAAAAADyDgAAAAAAAAAAAAAAAPC/"
				],
				[
					876,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPUOAAAAAAAA9g4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9Q4AAAAAAAD1DgAAAAAAAAAAAAAAAPC/"
				],
				[
					877,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAPYOAAAAAAAA9w4AAAAAAAAAAAAA9w4AAAAAAAAHDwAAAAAAAAAAAAAHDwAAAAAAAAsPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9g4AAAAAAAD2DgAAAAAAAAAAAAAAAPC/"
				],
				[
					878,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAsPAAAAAAAADQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACw8AAAAAAAALDwAAAAAAAAAAAAAAAPC/"
				],
				[
					879,
					1,
					"insert",
					{
						"characters": "model,"
					},
					"BgAAAAwPAAAAAAAADQ8AAAAAAAAAAAAADQ8AAAAAAAAODwAAAAAAAAAAAAAODwAAAAAAAA8PAAAAAAAAAAAAAA8PAAAAAAAAEA8AAAAAAAAAAAAAEA8AAAAAAAARDwAAAAAAAAAAAAARDwAAAAAAABIPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADA8AAAAAAAAMDwAAAAAAAAAAAAAAAPC/"
				],
				[
					880,
					1,
					"insert",
					{
						"characters": " Cmd.none"
					},
					"CQAAABIPAAAAAAAAEw8AAAAAAAAAAAAAEw8AAAAAAAAUDwAAAAAAAAAAAAAUDwAAAAAAABUPAAAAAAAAAAAAABUPAAAAAAAAFg8AAAAAAAAAAAAAFg8AAAAAAAAXDwAAAAAAAAAAAAAXDwAAAAAAABgPAAAAAAAAAAAAABgPAAAAAAAAGQ8AAAAAAAAAAAAAGQ8AAAAAAAAaDwAAAAAAAAAAAAAaDwAAAAAAABsPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEg8AAAAAAAASDwAAAAAAAAAAAAAAAPC/"
				],
				[
					881,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAATyAAAAAAAABPIAAAcG9ydCBtb2R1bGUgRnJvbnRlbmQgZXhwb3NpbmcgKC4uKQoKaW1wb3J0IEJyb3dzZXIgZXhwb3NpbmcgKFVybFJlcXVlc3QoLi4pKQppbXBvcnQgQnJvd3Nlci5OYXZpZ2F0aW9uIGFzIE5hdgppbXBvcnQgRGljdAppbXBvcnQgRWxlbWVudCBleHBvc2luZyAoLi4pCmltcG9ydCBFbGVtZW50LkJhY2tncm91bmQgYXMgQmFja2dyb3VuZAppbXBvcnQgRWxlbWVudC5Cb3JkZXIgYXMgQm9yZGVyCmltcG9ydCBFbGVtZW50LkV2ZW50cyBhcyBFdmVudHMKaW1wb3J0IEVsZW1lbnQuRm9udCBhcyBGb250CmltcG9ydCBFbGVtZW50LkhleENvbG9yIGV4cG9zaW5nIChyZ2JDU1NIZXgpCmltcG9ydCBFbGVtZW50LklucHV0IGFzIElucHV0CmltcG9ydCBHdWVzc2luZ0dhbWUgYXMgS2dnCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IEh0bWwKaW1wb3J0IEh0bWwuQXR0cmlidXRlcyBhcyBBdHRyCmltcG9ydCBIdG1sLkV2ZW50cyBhcyBFdmVudHMKaW1wb3J0IEh0dHAKaW1wb3J0IEpzb24uRGVjb2RlIGFzIEQKaW1wb3J0IEpzb24uRW5jb2RlIGFzIEUKaW1wb3J0IExhbWRlcmEKaW1wb3J0IFN0eWxlLkhlbHBlcnMgZXhwb3NpbmcgKC4uKQppbXBvcnQgU3R5bGUuUGFsZXR0ZSBleHBvc2luZyAoLi4pCmltcG9ydCBUYXNrCmltcG9ydCBUaW1lCmltcG9ydCBUeXBlcyBleHBvc2luZyAoLi4pCmltcG9ydCBVcmwKCgpwb3J0IHRvUGFyZW50UG9ydCA6IEUuVmFsdWUgLT4gQ21kIG1zZwoKCnBvcnQgZnJvbVBhcmVudFBvcnQgOiAoU3RyaW5nIC0+IG1zZykgLT4gU3ViIG1zZwoKCnBvcnQgaXNJRnJhbWVUZXN0UG9ydCA6IChTdHJpbmcgLT4gbXNnKSAtPiBTdWIgbXNnCgoKZnJvbVBhcmVudCBtb2RlbCBqc29uU3RyID0KICAgIGNhc2UgRC5kZWNvZGVTdHJpbmcgZnJvbVBhcmVudFBheWxvYWQganNvblN0ciBvZgogICAgICAgIE9rIChVc2VySW5mb1BheWxvYWQgc2Vzc2lvbkNvb2tpZSB1c2VybmFtZSkgLT4KICAgICAgICAgICAgKCBtb2RlbCwgTGFtZGVyYS5zZW5kVG9CYWNrZW5kIDx8IFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBzZXNzaW9uQ29va2llICkKCiAgICAgICAgRXJyIF8gLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCmdvdElGcmFtZVRlc3RSZXN1bHQgOiBNb2RlbCAtPiBTdHJpbmcgLT4gKCBNb2RlbCwgQ21kIEZyb250ZW5kTXNnICkKZ290SUZyYW1lVGVzdFJlc3VsdCBtb2RlbCBqc29uU3RyID0KICAgIGNhc2UgRC5kZWNvZGVTdHJpbmcgKEQuZmllbGQgImlzSW5JZnJhbWUiIEQuYm9vbCkganNvblN0ciBvZgogICAgICAgIE9rIHJlcyAtPgogICAgICAgICAgICAoIHsgbW9kZWwgfCBpc0VtYmVkZGVkID0gSnVzdCByZXMgfSwgQ21kLm5vbmUgKQoKICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgIGQgPQogICAgICAgICAgICAgICAgICAgIERlYnVnLmxvZyAiIiBlCiAgICAgICAgICAgIGluCiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgp0eXBlIEZyb21QYXJlbnRQYXlsb2FkCiAgICA9IFVzZXJJbmZvUGF5bG9hZCBTdHJpbmcgU3RyaW5nCgoKZnJvbVBhcmVudFBheWxvYWQgPQogICAgRC5vbmVPZiBbIHVzZXJJbmZvUGF5bG9hZCBdCgoKdXNlckluZm9QYXlsb2FkID0KICAgIEQubWFwMiBVc2VySW5mb1BheWxvYWQKICAgICAgICAoRC5maWVsZCAiY29va2llIiBELnN0cmluZykKICAgICAgICAoRC5maWVsZCAidXNlcm5hbWUiIEQuc3RyaW5nKQoKCnR5cGUgYWxpYXMgTW9kZWwgPQogICAgRnJvbnRlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmZyb250ZW5kCiAgICAgICAgeyBpbml0ID0gaW5pdAogICAgICAgICwgb25VcmxSZXF1ZXN0ID0gVXJsQ2xpY2tlZAogICAgICAgICwgb25VcmxDaGFuZ2UgPSBVcmxDaGFuZ2VkCiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21CYWNrZW5kID0gdXBkYXRlRnJvbUJhY2tlbmQKICAgICAgICAsIHN1YnNjcmlwdGlvbnMgPQogICAgICAgICAgICBcbSAtPgogICAgICAgICAgICAgICAgU3ViLmJhdGNoCiAgICAgICAgICAgICAgICAgICAgWyBmcm9tUGFyZW50UG9ydCBHb3RJbmZvRnJvbVBhcmVudAogICAgICAgICAgICAgICAgICAgICwgaXNJRnJhbWVUZXN0UG9ydCBHb3RJRnJhbWVUZXN0UmVzdWx0CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICwgdmlldyA9IHZpZXcKICAgICAgICB9CgoKaW5pdCA6IFVybC5VcmwgLT4gTmF2LktleSAtPiAoIE1vZGVsLCBDbWQgRnJvbnRlbmRNc2cgKQppbml0IHVybCBrZXkgPQogICAgKCB7IGtleSA9IGtleQogICAgICAsIG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgdXNlcm5hbWUgPSBOb3RoaW5nCiAgICAgICwgdGhpc1BsYXllciA9IE5vdGhpbmcKICAgICAgLCBwbGF5ZXJzID0gW10KICAgICAgLCBrZ2dXb3JkSW5wdXQgPSBOb3RoaW5nCiAgICAgICwga2dnV3JvbmdXb3JkQnVmZmVyID0gTm90aGluZwogICAgICAsIGtnZ0NvbmZpZ0lucHV0cyA9CiAgICAgICAgICAgIHsga2dnUmFuZG9tS2FuamlJbnB1dCA9IE5vdGhpbmcKICAgICAgICAgICAgLCBrZ2dSb3VuZExlbmd0aElucHV0ID0gTm90aGluZwogICAgICAgICAgICAsIGtnZ1N0YXJ0aW5nQ291bnRkb3duSW5wdXQgPSBOb3RoaW5nCiAgICAgICAgICAgIH0KICAgICAgLCBrZ2dTeW5jaW5nID0gRmFsc2UKICAgICAgLCBpc0VtYmVkZGVkID0gTm90aGluZwogICAgICAsIG5vdyA9IFRpbWUubWlsbGlzVG9Qb3NpeCAwCiAgICAgIH0KICAgICwgQ21kLm5vbmUKICAgICAgLS1DbWQuYmF0Y2ggWyBMYW1kZXJhLnNlbmRUb0JhY2tlbmQgPHwgUGxheWVySW5mb1N1Ym1pdHRlZFRCICJmbG9yaWFuIiAiIiBdCiAgICAgIC0tLCBnZXRLYW5qaUtleXMKICAgICkKCgp1cGRhdGUgOiBGcm9udGVuZE1zZyAtPiBNb2RlbCAtPiAoIE1vZGVsLCBDbWQgRnJvbnRlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgVXJsQ2xpY2tlZCB1cmxSZXF1ZXN0IC0+CiAgICAgICAgICAgIGNhc2UgdXJsUmVxdWVzdCBvZgogICAgICAgICAgICAgICAgSW50ZXJuYWwgdXJsIC0+CiAgICAgICAgICAgICAgICAgICAgKCBtb2RlbAogICAgICAgICAgICAgICAgICAgICwgTmF2LnB1c2hVcmwgbW9kZWwua2V5IChVcmwudG9TdHJpbmcgdXJsKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFeHRlcm5hbCB1cmwgLT4KICAgICAgICAgICAgICAgICAgICAoIG1vZGVsCiAgICAgICAgICAgICAgICAgICAgLCBOYXYubG9hZCB1cmwKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIFVybENoYW5nZWQgdXJsIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCiAgICAgICAgR290SW5mb0Zyb21QYXJlbnQganNvblN0ciAtPgogICAgICAgICAgICBmcm9tUGFyZW50IG1vZGVsIGpzb25TdHIKCiAgICAgICAgR290SUZyYW1lVGVzdFJlc3VsdCBqc29uU3RyIC0+CiAgICAgICAgICAgIGdvdElGcmFtZVRlc3RSZXN1bHQgbW9kZWwganNvblN0cgoKICAgICAgICBVc2VybmFtZUlucHV0IG5hbWUgLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgdXNlcm5hbWUgPSBtYlN0ciBuYW1lIH0sIENtZC5ub25lICkKCiAgICAgICAgU2VuZFVzZXIgLT4KICAgICAgICAgICAgY2FzZSBtb2RlbC51c2VybmFtZSBvZiAKICAgICAgICAgICAgICAgIEp1c3QgdSAtPiAKICAgICAgICAgICAgICAgICAgICAoIG1vZGVsLCBMYW1kZXJhLnNlbmRUb0JhY2tlbmQgPHwgUGxheWVySW5mb1N1Ym1pdHRlZFRCIHUgIiIgKQogICAgICAgICAgICAgICAgTm90aGluZyAtPiAKICAgICAgICAgICAgICAgICAgICAobW9kZWwsIENtZC5ub25lKQoKICAgICAgICBSZXFHZXRLZXkgLT4KICAgICAgICAgICAgKCBtb2RlbCwgTGFtZGVyYS5zZW5kVG9CYWNrZW5kIEdldEtleXNUQiApCgogICAgICAgIEtnZ1NldEN1c3RvbUthbmppU2V0IGthbmppU3RyIC0+CiAgICAgICAgICAgIEtnZy5zZXRDdXN0b21LYW5qaVNldCBtb2RlbCBrYW5qaVN0cgoKICAgICAgICBLZ2dTZXRLYW5qaVNldCBrYW5qaVNldCBnYW1lSWQgLT4KICAgICAgICAgICAgS2dnLnNldEthbmppU2V0IG1vZGVsIGthbmppU2V0IGdhbWVJZAoKICAgICAgICBLZ2dIb3N0R2FtZSAtPgogICAgICAgICAgICBLZ2cuaG9zdEdhbWUgbW9kZWwKCiAgICAgICAgS2dnSm9pbkdhbWUgZ2FtZUlkIC0+CiAgICAgICAgICAgIEtnZy5qb2luR2FtZSBtb2RlbCBnYW1lSWQKCiAgICAgICAgS2dnTGVhdmVHYW1lIGdhbWVJZCAtPgogICAgICAgICAgICBLZ2cubGVhdmVHYW1lIG1vZGVsIGdhbWVJZAoKICAgICAgICBLZ2dXb3JkSW5wdXQgd29yZCAtPgogICAgICAgICAgICBLZ2cud29yZElucHV0IG1vZGVsIHdvcmQKCiAgICAgICAgS2dnU3RhcnRHYW1lIGdhbWVJZCAtPgogICAgICAgICAgICBLZ2cuc3RhcnRHYW1lIG1vZGVsIGdhbWVJZAoKICAgICAgICBLZ2dSZXF1ZXN0TmV4dEthbmppIGdhbWVJZCAtPgogICAgICAgICAgICBLZ2cucmVxdWVzdE5leHRLYW5qaSBtb2RlbCBnYW1lSWQKCiAgICAgICAgS2dnU2VuZFdvcmQgZ2FtZUlkIC0+CiAgICAgICAgICAgIEtnZy5zZW5kV29yZCBtb2RlbCBnYW1lSWQKCiAgICAgICAgLS1Hb3RLZXlzIHJlcyAtPgogICAgICAgIC0tICAgIGNhc2UgcmVzIG9mCiAgICAgICAgLS0gICAgICAgIE9rIHMgLT4KICAgICAgICAtLSAgICAgICAgICAgICggeyBtb2RlbCB8IG1lc3NhZ2UgPSBzIH0KICAgICAgICAtLSAgICAgICAgICAgICwgQ21kLm5vbmUKICAgICAgICAtLSAgICAgICAgICAgICkKICAgICAgICAtLSAgICAgICAgXyAtPgogICAgICAgIC0tICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQogICAgICAgIEdvdFRpbWVGIHRpbWUgLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgbm93ID0gdGltZSB9LCBDbWQubm9uZSApCgogICAgICAgIFNlbmRUb0JhY2tlbmRXaXRoVGltZSB0b0JhY2tlbmQgLT4KICAgICAgICAgICAgKCBtb2RlbCwgTGFtZGVyYS5zZW5kVG9CYWNrZW5kIHRvQmFja2VuZCApCgogICAgICAgIE5vT3BGcm9udGVuZE1zZyAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKYmFzZVVybCA9CiAgICAiaHR0cHM6Ly93d3cudW1pbm9raXJpbi5jb20iCgoKZ2V0S2FuamlLZXlzID0KICAgIEh0dHAuZ2V0CiAgICAgICAgeyB1cmwgPSBiYXNlVXJsICsrICIvYXBpL2dldEthbmppS2V5cyIKICAgICAgICAsIGV4cGVjdCA9IEh0dHAuZXhwZWN0U3RyaW5nIEdvdEtleXMKICAgICAgICB9CgoKdXBkYXRlRnJvbUJhY2tlbmQgOiBUb0Zyb250ZW5kIC0+IE1vZGVsIC0+ICggTW9kZWwsIENtZCBGcm9udGVuZE1zZyApCnVwZGF0ZUZyb21CYWNrZW5kIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIFRvRnJvbnRlbmRNc2dURiBzIC0+CiAgICAgICAgICAgICggeyBtb2RlbCB8IG1lc3NhZ2UgPSBzIH0sIENtZC5ub25lICkKCiAgICAgICAgR2FtZUJyb2FkY2FzdFRGIGdhbWUgLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwga2dnYW1lcyA9IERpY3QuaW5zZXJ0IGdhbWUuZ2FtZUlkIGdhbWUgbW9kZWwua2dnYW1lcyB9CiAgICAgICAgICAgICwgQ21kLm5vbmUKICAgICAgICAgICAgKQoKICAgICAgICBHYW1lVGltZXNCcm9hZGNhc3RURiBkYXRhIC0+CiAgICAgICAgICAgIGNhc2UgRGljdC5nZXQgZGF0YS5nYW1lSWQgbW9kZWwua2dnYW1lcyBvZgogICAgICAgICAgICAgICAgSnVzdCBnYW1lIC0+CiAgICAgICAgICAgICAgICAgICAgY2FzZSBnYW1lLmdhbWVTdGF0ZSBvZgogICAgICAgICAgICAgICAgICAgICAgICBJblBsYXkgc3Vic3RhdGUgLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0dhbWVTdGF0ZSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluUGxheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdWJzdGF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdGltZVRpbGxSb3VuZEVuZCA9IGRhdGEudGltZVRpbGxSb3VuZEVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgdGltZVRpbGxHYW1lT3ZlciA9IGRhdGEudGltZVRpbGxHYW1lT3ZlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdHYW1lID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBnYW1lIHwgbGFzdFVwZGF0ZWQgPSBkYXRhLmxhc3RVcGRhdGVkLCBnYW1lU3RhdGUgPSBuZXdHYW1lU3RhdGUsIGJ1ZmZlcmluZyA9IGRhdGEuYnVmZmVyaW5nIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLmxvZyAibmV3R2FtZSIgbmV3R2FtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICggeyBtb2RlbCB8IGtnZ2FtZXMgPSBEaWN0Lmluc2VydCBkYXRhLmdhbWVJZCBuZXdHYW1lIG1vZGVsLmtnZ2FtZXMgfSwgQ21kLm5vbmUgKQoKICAgICAgICAgICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLmxvZyAibm90IGluIHBsYXkiIGRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgICAgICAgICBkID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLmxvZyAiZ2FtZSBtaXNzaW5nIiBkYXRhCiAgICAgICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIFdyb25nV29yZFRGIHdyb25nV29yZCAtPgogICAgICAgICAgICAoIHsgbW9kZWwgfCBrZ2dXcm9uZ1dvcmRCdWZmZXIgPSBKdXN0IHdyb25nV29yZCB9LCBDbWQubm9uZSApCgogICAgICAgIFBsYXllckluZm9SZWdpc3RlcmVkVEYgcGxheWVyIC0+CiAgICAgICAgICAgICggeyBtb2RlbCB8IHRoaXNQbGF5ZXIgPSBKdXN0IHBsYXllciB9LCBDbWQubm9uZSApCgogICAgICAgIE5vT3BURiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKdmlldyA6IE1vZGVsIC0+IEJyb3dzZXIuRG9jdW1lbnQgRnJvbnRlbmRNc2cKdmlldyBtb2RlbCA9CiAgICB7IHRpdGxlID0gIiIKICAgICwgYm9keSA9CiAgICAgICAgWyBFbGVtZW50LmxheW91dCBbXSA8fAogICAgICAgICAgICBjYXNlIG1vZGVsLmlzRW1iZWRkZWQgb2YKICAgICAgICAgICAgICAgIEp1c3QgVHJ1ZSAtPgogICAgICAgICAgICAgICAgICAgIEtnZy52aWV3IG1vZGVsCgogICAgICAgICAgICAgICAgSnVzdCBGYWxzZSAtPgogICAgICAgICAgICAgICAgICAgIHVzZXJJbnB1dFZpZXcgbW9kZWwKCiAgICAgICAgICAgICAgICBOb3RoaW5nIC0+CiAgICAgICAgICAgICAgICAgICAgZWwgWyBwYWRkaW5nIDE1IF0gPHwgdGV4dCAiTG9hZGluZy4uLiIKICAgICAgICBdCiAgICB9CgoKdXNlcklucHV0VmlldyBtb2RlbCA9CiAgICBjb2x1bW4KICAgICAgICBbIHBhZGRpbmcgMTUgXQogICAgICAgIFsgY29sdW1uIFsgc3BhY2luZyAxNSBdCiAgICAgICAgICAgIFsgSW5wdXQudGV4dCBbXQogICAgICAgICAgICAgICAgeyBvbkNoYW5nZSA9IFVzZXJuYW1lSW5wdXQKICAgICAgICAgICAgICAgICwgdGV4dCA9IG1vZGVsLnVzZXJuYW1lIHw+IE1heWJlLndpdGhEZWZhdWx0ICIiCiAgICAgICAgICAgICAgICAsIHBsYWNlaG9sZGVyID0gTm90aGluZwogICAgICAgICAgICAgICAgLCBsYWJlbCA9IElucHV0LmxhYmVsQWJvdmUgW10gPHwgdGV4dCAiVXNlcm5hbWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICwgSW5wdXQuYnV0dG9uIChidXR0b25TdHlsZV8gKG1vZGVsLnVzZXJuYW1lIC89IE5vdGhpbmcpKQogICAgICAgICAgICAgICAgeyBvblByZXNzID0gTWF5YmUubWFwIChhbHdheXMgU2VuZFVzZXIpIG1vZGVsLnVzZXJuYW1lLCBsYWJlbCA9IHRleHQgIkVudm95ZXIiIH0KICAgICAgICAgICAgXQogICAgICAgIF0K",
					"AQAAAAAAAAABAAAAGw8AAAAAAAAbDwAAAAAAAAAAAAAAAPC/"
				],
				[
					884,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAACAdAAAAAAAAIR0AAAAAAAAAAAAAIR0AAAAAAAApHQAAAAAAAAAAAAApHQAAAAAAAC0dAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIB0AAAAAAAAgHQAAAAAAAAAAAAAAAPC/"
				],
				[
					885,
					1,
					"insert",
					{
						"characters": "case"
					},
					"BAAAAC0dAAAAAAAALh0AAAAAAAAAAAAALh0AAAAAAAAvHQAAAAAAAAAAAAAvHQAAAAAAADAdAAAAAAAAAAAAADAdAAAAAAAAMR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALR0AAAAAAAAtHQAAAAAAAAAAAAAAAPC/"
				],
				[
					886,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADEdAAAAAAAAMh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMR0AAAAAAAAxHQAAAAAAAAAAAAAAAPC/"
				],
				[
					887,
					1,
					"insert",
					{
						"characters": "mode,"
					},
					"BQAAADIdAAAAAAAAMx0AAAAAAAAAAAAAMx0AAAAAAAA0HQAAAAAAAAAAAAA0HQAAAAAAADUdAAAAAAAAAAAAADUdAAAAAAAANh0AAAAAAAAAAAAANh0AAAAAAAA3HQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMh0AAAAAAAAyHQAAAAAAAAAAAAAAAPC/"
				],
				[
					888,
					1,
					"left_delete",
					null,
					"AQAAADYdAAAAAAAANh0AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAANx0AAAAAAAA3HQAAAAAAAAAAAAAAAPC/"
				],
				[
					889,
					1,
					"insert",
					{
						"characters": "l.this"
					},
					"BgAAADYdAAAAAAAANx0AAAAAAAAAAAAANx0AAAAAAAA4HQAAAAAAAAAAAAA4HQAAAAAAADkdAAAAAAAAAAAAADkdAAAAAAAAOh0AAAAAAAAAAAAAOh0AAAAAAAA7HQAAAAAAAAAAAAA7HQAAAAAAADwdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANh0AAAAAAAA2HQAAAAAAAAAAAAAAAPC/"
				],
				[
					890,
					1,
					"insert_completion",
					{
						"completion": "thisPlayer",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "thisPlayer"
					},
					"AgAAADgdAAAAAAAAOB0AAAAAAAAEAAAAdGhpczgdAAAAAAAAQh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPB0AAAAAAAA8HQAAAAAAAAAAAAAAAPC/"
				],
				[
					891,
					1,
					"insert",
					{
						"characters": " if"
					},
					"AwAAAEIdAAAAAAAAQx0AAAAAAAAAAAAAQx0AAAAAAABEHQAAAAAAAAAAAABEHQAAAAAAAEUdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQh0AAAAAAABCHQAAAAAAAAAAAAAAAPC/"
				],
				[
					892,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEUdAAAAAAAARh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARR0AAAAAAABFHQAAAAAAAAAAAAAAAPC/"
				],
				[
					893,
					3,
					"left_delete",
					null,
					"AwAAAEUdAAAAAAAARR0AAAAAAAABAAAAIEQdAAAAAAAARB0AAAAAAAABAAAAZkMdAAAAAAAAQx0AAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAARh0AAAAAAABGHQAAAAAAAAAAAAAAAPC/"
				],
				[
					894,
					1,
					"insert",
					{
						"characters": "of"
					},
					"AgAAAEMdAAAAAAAARB0AAAAAAAAAAAAARB0AAAAAAABFHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQx0AAAAAAABDHQAAAAAAAAAAAAAAAPC/"
				],
				[
					895,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEUdAAAAAAAARh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARR0AAAAAAABFHQAAAAAAAAAAAAAAAPC/"
				],
				[
					896,
					1,
					"insert",
					{
						"characters": "\nJust"
					},
					"BwAAAEYdAAAAAAAARx0AAAAAAAAAAAAARx0AAAAAAABTHQAAAAAAAAAAAABTHQAAAAAAAFcdAAAAAAAAAAAAAFcdAAAAAAAAWB0AAAAAAAAAAAAAWB0AAAAAAABZHQAAAAAAAAAAAABZHQAAAAAAAFodAAAAAAAAAAAAAFodAAAAAAAAWx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARh0AAAAAAABGHQAAAAAAAAAAAAAAAPC/"
				],
				[
					897,
					1,
					"insert",
					{
						"characters": " Pl"
					},
					"AwAAAFsdAAAAAAAAXB0AAAAAAAAAAAAAXB0AAAAAAABdHQAAAAAAAAAAAABdHQAAAAAAAF4dAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWx0AAAAAAABbHQAAAAAAAAAAAAAAAPC/"
				],
				[
					898,
					1,
					"insert_completion",
					{
						"completion": "player",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "player"
					},
					"AgAAAFwdAAAAAAAAXB0AAAAAAAACAAAAUGxcHQAAAAAAAGIdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXh0AAAAAAABeHQAAAAAAAAAAAAAAAPC/"
				],
				[
					899,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAGIdAAAAAAAAYx0AAAAAAAAAAAAAYx0AAAAAAABkHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYh0AAAAAAABiHQAAAAAAAAAAAAAAAPC/"
				],
				[
					900,
					1,
					"left_delete",
					null,
					"AQAAAGMdAAAAAAAAYx0AAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAZB0AAAAAAABkHQAAAAAAAAAAAAAAAPC/"
				],
				[
					901,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAGMdAAAAAAAAZB0AAAAAAAAAAAAAZB0AAAAAAABlHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYx0AAAAAAABjHQAAAAAAAAAAAAAAAPC/"
				],
				[
					902,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGUdAAAAAAAAZh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZR0AAAAAAABlHQAAAAAAAAAAAAAAAPC/"
				],
				[
					903,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAGYdAAAAAAAAZx0AAAAAAAAAAAAAZx0AAAAAAAB3HQAAAAAAAAAAAAB3HQAAAAAAAHsdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZh0AAAAAAABmHQAAAAAAAAAAAAAAAPC/"
				],
				[
					909,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAGYdAAAAAAAAZx0AAAAAAAAAAAAAZx0AAAAAAAB3HQAAAAAAAAAAAAB3HQAAAAAAAHsdAAAAAAAAAAAAAHwdAAAAAAAAfB0AAAAAAAAUAAAAICAgICAgICAgICAgICAgICAgICA",
					"AQAAAAAAAAABAAAAZh0AAAAAAABmHQAAAAAAAAAAAAAAAPC/"
				],
				[
					910,
					1,
					"paste",
					null,
					"AQAAAHsdAAAAAAAAiR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAex0AAAAAAAB7HQAAAAAAAAAAAAAAAPC/"
				],
				[
					911,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIkdAAAAAAAAih0AAAAAAAAAAAAAih0AAAAAAACeHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiR0AAAAAAACJHQAAAAAAAAAAAAAAAPC/"
				],
				[
					912,
					1,
					"left_delete",
					null,
					"AQAAAJodAAAAAAAAmh0AAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAnh0AAAAAAACeHQAAAAAAAAAAAAAAAPC/"
				],
				[
					913,
					1,
					"insert",
					{
						"characters": "Not"
					},
					"AwAAAJodAAAAAAAAmx0AAAAAAAAAAAAAmx0AAAAAAACcHQAAAAAAAAAAAACcHQAAAAAAAJ0dAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmh0AAAAAAACaHQAAAAAAAAAAAAAAAPC/"
				],
				[
					914,
					1,
					"insert_completion",
					{
						"completion": "Nothing",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Nothing"
					},
					"AgAAAJodAAAAAAAAmh0AAAAAAAADAAAATm90mh0AAAAAAAChHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnR0AAAAAAACdHQAAAAAAAAAAAAAAAPC/"
				],
				[
					915,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAKEdAAAAAAAAoh0AAAAAAAAAAAAAoh0AAAAAAACjHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoR0AAAAAAAChHQAAAAAAAAAAAAAAAPC/"
				],
				[
					916,
					1,
					"left_delete",
					null,
					"AQAAAKIdAAAAAAAAoh0AAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAox0AAAAAAACjHQAAAAAAAAAAAAAAAPC/"
				],
				[
					917,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAKIdAAAAAAAAox0AAAAAAAAAAAAAox0AAAAAAACkHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoh0AAAAAAACiHQAAAAAAAAAAAAAAAPC/"
				],
				[
					918,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAApB0AAAAAAACkHQAAAAAAAAAAAAAAAPC/"
				],
				[
					919,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA2h0AAAAAAADaHQAAAAAAAAAAAAAAAPC/"
				],
				[
					920,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA2h0AAAAAAADaHQAAAAAAAAAAAAAAAPC/"
				],
				[
					921,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAKIQAAcG9ydCBtb2R1bGUgRnJvbnRlbmQgZXhwb3NpbmcgKC4uKQoKaW1wb3J0IEJyb3dzZXIgZXhwb3NpbmcgKFVybFJlcXVlc3QoLi4pKQppbXBvcnQgQnJvd3Nlci5OYXZpZ2F0aW9uIGFzIE5hdgppbXBvcnQgRGljdAppbXBvcnQgRWxlbWVudCBleHBvc2luZyAoLi4pCmltcG9ydCBFbGVtZW50LkJhY2tncm91bmQgYXMgQmFja2dyb3VuZAppbXBvcnQgRWxlbWVudC5Cb3JkZXIgYXMgQm9yZGVyCmltcG9ydCBFbGVtZW50LkV2ZW50cyBhcyBFdmVudHMKaW1wb3J0IEVsZW1lbnQuRm9udCBhcyBGb250CmltcG9ydCBFbGVtZW50LkhleENvbG9yIGV4cG9zaW5nIChyZ2JDU1NIZXgpCmltcG9ydCBFbGVtZW50LklucHV0IGFzIElucHV0CmltcG9ydCBHdWVzc2luZ0dhbWUgYXMgS2dnCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IEh0bWwKaW1wb3J0IEh0bWwuQXR0cmlidXRlcyBhcyBBdHRyCmltcG9ydCBIdG1sLkV2ZW50cyBhcyBFdmVudHMKaW1wb3J0IEh0dHAKaW1wb3J0IEpzb24uRGVjb2RlIGFzIEQKaW1wb3J0IEpzb24uRW5jb2RlIGFzIEUKaW1wb3J0IExhbWRlcmEKaW1wb3J0IFN0eWxlLkhlbHBlcnMgZXhwb3NpbmcgKC4uKQppbXBvcnQgU3R5bGUuUGFsZXR0ZSBleHBvc2luZyAoLi4pCmltcG9ydCBUYXNrCmltcG9ydCBUaW1lCmltcG9ydCBUeXBlcyBleHBvc2luZyAoLi4pCmltcG9ydCBVcmwKCgpwb3J0IHRvUGFyZW50UG9ydCA6IEUuVmFsdWUgLT4gQ21kIG1zZwoKCnBvcnQgZnJvbVBhcmVudFBvcnQgOiAoU3RyaW5nIC0+IG1zZykgLT4gU3ViIG1zZwoKCnBvcnQgaXNJRnJhbWVUZXN0UG9ydCA6IChTdHJpbmcgLT4gbXNnKSAtPiBTdWIgbXNnCgoKZnJvbVBhcmVudCBtb2RlbCBqc29uU3RyID0KICAgIGNhc2UgRC5kZWNvZGVTdHJpbmcgZnJvbVBhcmVudFBheWxvYWQganNvblN0ciBvZgogICAgICAgIE9rIChVc2VySW5mb1BheWxvYWQgc2Vzc2lvbkNvb2tpZSB1c2VybmFtZSkgLT4KICAgICAgICAgICAgKCBtb2RlbCwgTGFtZGVyYS5zZW5kVG9CYWNrZW5kIDx8IFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBzZXNzaW9uQ29va2llICkKCiAgICAgICAgRXJyIF8gLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCmdvdElGcmFtZVRlc3RSZXN1bHQgOiBNb2RlbCAtPiBTdHJpbmcgLT4gKCBNb2RlbCwgQ21kIEZyb250ZW5kTXNnICkKZ290SUZyYW1lVGVzdFJlc3VsdCBtb2RlbCBqc29uU3RyID0KICAgIGNhc2UgRC5kZWNvZGVTdHJpbmcgKEQuZmllbGQgImlzSW5JZnJhbWUiIEQuYm9vbCkganNvblN0ciBvZgogICAgICAgIE9rIHJlcyAtPgogICAgICAgICAgICAoIHsgbW9kZWwgfCBpc0VtYmVkZGVkID0gSnVzdCByZXMgfSwgQ21kLm5vbmUgKQoKICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgIGQgPQogICAgICAgICAgICAgICAgICAgIERlYnVnLmxvZyAiIiBlCiAgICAgICAgICAgIGluCiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgp0eXBlIEZyb21QYXJlbnRQYXlsb2FkCiAgICA9IFVzZXJJbmZvUGF5bG9hZCBTdHJpbmcgU3RyaW5nCgoKZnJvbVBhcmVudFBheWxvYWQgPQogICAgRC5vbmVPZiBbIHVzZXJJbmZvUGF5bG9hZCBdCgoKdXNlckluZm9QYXlsb2FkID0KICAgIEQubWFwMiBVc2VySW5mb1BheWxvYWQKICAgICAgICAoRC5maWVsZCAiY29va2llIiBELnN0cmluZykKICAgICAgICAoRC5maWVsZCAidXNlcm5hbWUiIEQuc3RyaW5nKQoKCnR5cGUgYWxpYXMgTW9kZWwgPQogICAgRnJvbnRlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmZyb250ZW5kCiAgICAgICAgeyBpbml0ID0gaW5pdAogICAgICAgICwgb25VcmxSZXF1ZXN0ID0gVXJsQ2xpY2tlZAogICAgICAgICwgb25VcmxDaGFuZ2UgPSBVcmxDaGFuZ2VkCiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21CYWNrZW5kID0gdXBkYXRlRnJvbUJhY2tlbmQKICAgICAgICAsIHN1YnNjcmlwdGlvbnMgPQogICAgICAgICAgICBcbSAtPgogICAgICAgICAgICAgICAgU3ViLmJhdGNoCiAgICAgICAgICAgICAgICAgICAgWyBmcm9tUGFyZW50UG9ydCBHb3RJbmZvRnJvbVBhcmVudAogICAgICAgICAgICAgICAgICAgICwgaXNJRnJhbWVUZXN0UG9ydCBHb3RJRnJhbWVUZXN0UmVzdWx0CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICwgdmlldyA9IHZpZXcKICAgICAgICB9CgoKaW5pdCA6IFVybC5VcmwgLT4gTmF2LktleSAtPiAoIE1vZGVsLCBDbWQgRnJvbnRlbmRNc2cgKQppbml0IHVybCBrZXkgPQogICAgKCB7IGtleSA9IGtleQogICAgICAsIG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgdXNlcm5hbWUgPSBOb3RoaW5nCiAgICAgICwgdGhpc1BsYXllciA9IE5vdGhpbmcKICAgICAgLCBwbGF5ZXJzID0gW10KICAgICAgLCBrZ2dXb3JkSW5wdXQgPSBOb3RoaW5nCiAgICAgICwga2dnV3JvbmdXb3JkQnVmZmVyID0gTm90aGluZwogICAgICAsIGtnZ0NvbmZpZ0lucHV0cyA9CiAgICAgICAgICAgIHsga2dnUmFuZG9tS2FuamlJbnB1dCA9IE5vdGhpbmcKICAgICAgICAgICAgLCBrZ2dSb3VuZExlbmd0aElucHV0ID0gTm90aGluZwogICAgICAgICAgICAsIGtnZ1N0YXJ0aW5nQ291bnRkb3duSW5wdXQgPSBOb3RoaW5nCiAgICAgICAgICAgIH0KICAgICAgLCBrZ2dTeW5jaW5nID0gRmFsc2UKICAgICAgLCBpc0VtYmVkZGVkID0gTm90aGluZwogICAgICAsIG5vdyA9IFRpbWUubWlsbGlzVG9Qb3NpeCAwCiAgICAgIH0KICAgICwgQ21kLm5vbmUKICAgICAgLS1DbWQuYmF0Y2ggWyBMYW1kZXJhLnNlbmRUb0JhY2tlbmQgPHwgUGxheWVySW5mb1N1Ym1pdHRlZFRCICJmbG9yaWFuIiAiIiBdCiAgICAgIC0tLCBnZXRLYW5qaUtleXMKICAgICkKCgp1cGRhdGUgOiBGcm9udGVuZE1zZyAtPiBNb2RlbCAtPiAoIE1vZGVsLCBDbWQgRnJvbnRlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgVXJsQ2xpY2tlZCB1cmxSZXF1ZXN0IC0+CiAgICAgICAgICAgIGNhc2UgdXJsUmVxdWVzdCBvZgogICAgICAgICAgICAgICAgSW50ZXJuYWwgdXJsIC0+CiAgICAgICAgICAgICAgICAgICAgKCBtb2RlbAogICAgICAgICAgICAgICAgICAgICwgTmF2LnB1c2hVcmwgbW9kZWwua2V5IChVcmwudG9TdHJpbmcgdXJsKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFeHRlcm5hbCB1cmwgLT4KICAgICAgICAgICAgICAgICAgICAoIG1vZGVsCiAgICAgICAgICAgICAgICAgICAgLCBOYXYubG9hZCB1cmwKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIFVybENoYW5nZWQgdXJsIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCiAgICAgICAgR290SW5mb0Zyb21QYXJlbnQganNvblN0ciAtPgogICAgICAgICAgICBmcm9tUGFyZW50IG1vZGVsIGpzb25TdHIKCiAgICAgICAgR290SUZyYW1lVGVzdFJlc3VsdCBqc29uU3RyIC0+CiAgICAgICAgICAgIGdvdElGcmFtZVRlc3RSZXN1bHQgbW9kZWwganNvblN0cgoKICAgICAgICBVc2VybmFtZUlucHV0IG5hbWUgLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgdXNlcm5hbWUgPSBtYlN0ciBuYW1lIH0sIENtZC5ub25lICkKCiAgICAgICAgU2VuZFVzZXIgLT4KICAgICAgICAgICAgY2FzZSBtb2RlbC51c2VybmFtZSBvZgogICAgICAgICAgICAgICAgSnVzdCB1IC0+CiAgICAgICAgICAgICAgICAgICAgKCBtb2RlbCwgTGFtZGVyYS5zZW5kVG9CYWNrZW5kIDx8IFBsYXllckluZm9TdWJtaXR0ZWRUQiB1ICIiICkKCiAgICAgICAgICAgICAgICBOb3RoaW5nIC0+CiAgICAgICAgICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKICAgICAgICBSZXFHZXRLZXkgLT4KICAgICAgICAgICAgKCBtb2RlbCwgTGFtZGVyYS5zZW5kVG9CYWNrZW5kIEdldEtleXNUQiApCgogICAgICAgIEtnZ1NldEN1c3RvbUthbmppU2V0IGthbmppU3RyIC0+CiAgICAgICAgICAgIEtnZy5zZXRDdXN0b21LYW5qaVNldCBtb2RlbCBrYW5qaVN0cgoKICAgICAgICBLZ2dTZXRLYW5qaVNldCBrYW5qaVNldCBnYW1lSWQgLT4KICAgICAgICAgICAgS2dnLnNldEthbmppU2V0IG1vZGVsIGthbmppU2V0IGdhbWVJZAoKICAgICAgICBLZ2dIb3N0R2FtZSAtPgogICAgICAgICAgICBLZ2cuaG9zdEdhbWUgbW9kZWwKCiAgICAgICAgS2dnSm9pbkdhbWUgZ2FtZUlkIC0+CiAgICAgICAgICAgIEtnZy5qb2luR2FtZSBtb2RlbCBnYW1lSWQKCiAgICAgICAgS2dnTGVhdmVHYW1lIGdhbWVJZCAtPgogICAgICAgICAgICBLZ2cubGVhdmVHYW1lIG1vZGVsIGdhbWVJZAoKICAgICAgICBLZ2dXb3JkSW5wdXQgd29yZCAtPgogICAgICAgICAgICBLZ2cud29yZElucHV0IG1vZGVsIHdvcmQKCiAgICAgICAgS2dnU3RhcnRHYW1lIGdhbWVJZCAtPgogICAgICAgICAgICBLZ2cuc3RhcnRHYW1lIG1vZGVsIGdhbWVJZAoKICAgICAgICBLZ2dSZXF1ZXN0TmV4dEthbmppIGdhbWVJZCAtPgogICAgICAgICAgICBLZ2cucmVxdWVzdE5leHRLYW5qaSBtb2RlbCBnYW1lSWQKCiAgICAgICAgS2dnU2VuZFdvcmQgZ2FtZUlkIC0+CiAgICAgICAgICAgIEtnZy5zZW5kV29yZCBtb2RlbCBnYW1lSWQKCiAgICAgICAgLS1Hb3RLZXlzIHJlcyAtPgogICAgICAgIC0tICAgIGNhc2UgcmVzIG9mCiAgICAgICAgLS0gICAgICAgIE9rIHMgLT4KICAgICAgICAtLSAgICAgICAgICAgICggeyBtb2RlbCB8IG1lc3NhZ2UgPSBzIH0KICAgICAgICAtLSAgICAgICAgICAgICwgQ21kLm5vbmUKICAgICAgICAtLSAgICAgICAgICAgICkKICAgICAgICAtLSAgICAgICAgXyAtPgogICAgICAgIC0tICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQogICAgICAgIEdvdFRpbWVGIHRpbWUgLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgbm93ID0gdGltZSB9LCBDbWQubm9uZSApCgogICAgICAgIFNlbmRUb0JhY2tlbmRXaXRoVGltZSB0b0JhY2tlbmQgLT4KICAgICAgICAgICAgKCBtb2RlbCwgTGFtZGVyYS5zZW5kVG9CYWNrZW5kIHRvQmFja2VuZCApCgogICAgICAgIE5vT3BGcm9udGVuZE1zZyAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKYmFzZVVybCA9CiAgICAiaHR0cHM6Ly93d3cudW1pbm9raXJpbi5jb20iCgoKZ2V0S2FuamlLZXlzID0KICAgIEh0dHAuZ2V0CiAgICAgICAgeyB1cmwgPSBiYXNlVXJsICsrICIvYXBpL2dldEthbmppS2V5cyIKICAgICAgICAsIGV4cGVjdCA9IEh0dHAuZXhwZWN0U3RyaW5nIEdvdEtleXMKICAgICAgICB9CgoKdXBkYXRlRnJvbUJhY2tlbmQgOiBUb0Zyb250ZW5kIC0+IE1vZGVsIC0+ICggTW9kZWwsIENtZCBGcm9udGVuZE1zZyApCnVwZGF0ZUZyb21CYWNrZW5kIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIFRvRnJvbnRlbmRNc2dURiBzIC0+CiAgICAgICAgICAgICggeyBtb2RlbCB8IG1lc3NhZ2UgPSBzIH0sIENtZC5ub25lICkKCiAgICAgICAgR2FtZUJyb2FkY2FzdFRGIGdhbWUgLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwga2dnYW1lcyA9IERpY3QuaW5zZXJ0IGdhbWUuZ2FtZUlkIGdhbWUgbW9kZWwua2dnYW1lcyB9CiAgICAgICAgICAgICwgQ21kLm5vbmUKICAgICAgICAgICAgKQoKICAgICAgICBHYW1lVGltZXNCcm9hZGNhc3RURiBkYXRhIC0+CiAgICAgICAgICAgIGNhc2UgRGljdC5nZXQgZGF0YS5nYW1lSWQgbW9kZWwua2dnYW1lcyBvZgogICAgICAgICAgICAgICAgSnVzdCBnYW1lIC0+CiAgICAgICAgICAgICAgICAgICAgY2FzZSBnYW1lLmdhbWVTdGF0ZSBvZgogICAgICAgICAgICAgICAgICAgICAgICBJblBsYXkgc3Vic3RhdGUgLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0dhbWVTdGF0ZSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluUGxheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdWJzdGF0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdGltZVRpbGxSb3VuZEVuZCA9IGRhdGEudGltZVRpbGxSb3VuZEVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgdGltZVRpbGxHYW1lT3ZlciA9IGRhdGEudGltZVRpbGxHYW1lT3ZlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdHYW1lID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBnYW1lIHwgbGFzdFVwZGF0ZWQgPSBkYXRhLmxhc3RVcGRhdGVkLCBnYW1lU3RhdGUgPSBuZXdHYW1lU3RhdGUsIGJ1ZmZlcmluZyA9IGRhdGEuYnVmZmVyaW5nIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLmxvZyAibmV3R2FtZSIgbmV3R2FtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICggeyBtb2RlbCB8IGtnZ2FtZXMgPSBEaWN0Lmluc2VydCBkYXRhLmdhbWVJZCBuZXdHYW1lIG1vZGVsLmtnZ2FtZXMgfSwgQ21kLm5vbmUgKQoKICAgICAgICAgICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLmxvZyAibm90IGluIHBsYXkiIGRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgICAgICAgICBkID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLmxvZyAiZ2FtZSBtaXNzaW5nIiBkYXRhCiAgICAgICAgICAgICAgICAgICAgaW4KICAgICAgICAgICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIFdyb25nV29yZFRGIHdyb25nV29yZCAtPgogICAgICAgICAgICAoIHsgbW9kZWwgfCBrZ2dXcm9uZ1dvcmRCdWZmZXIgPSBKdXN0IHdyb25nV29yZCB9LCBDbWQubm9uZSApCgogICAgICAgIFBsYXllckluZm9SZWdpc3RlcmVkVEYgcGxheWVyIC0+CiAgICAgICAgICAgICggeyBtb2RlbCB8IHRoaXNQbGF5ZXIgPSBKdXN0IHBsYXllciB9LCBDbWQubm9uZSApCgogICAgICAgIE5vT3BURiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKdmlldyA6IE1vZGVsIC0+IEJyb3dzZXIuRG9jdW1lbnQgRnJvbnRlbmRNc2cKdmlldyBtb2RlbCA9CiAgICB7IHRpdGxlID0gIiIKICAgICwgYm9keSA9CiAgICAgICAgWyBFbGVtZW50LmxheW91dCBbXSA8fAogICAgICAgICAgICBjYXNlIG1vZGVsLnRoaXNQbGF5ZXIgb2YKICAgICAgICAgICAgICAgIEp1c3QgcGxheWVyIC0+CiAgICAgICAgICAgICAgICAgICAgS2dnLnZpZXcgbW9kZWwKCiAgICAgICAgICAgICAgICBOb3RoaW5nIC0+CiAgICAgICAgICAgICAgICAgICAgY2FzZSBtb2RlbC5pc0VtYmVkZGVkIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEp1c3QgVHJ1ZSAtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgS2dnLnZpZXcgbW9kZWwKCiAgICAgICAgICAgICAgICAgICAgICAgIEp1c3QgRmFsc2UgLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJJbnB1dFZpZXcgbW9kZWwKCiAgICAgICAgICAgICAgICAgICAgICAgIE5vdGhpbmcgLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsIFsgcGFkZGluZyAxNSBdIDx8IHRleHQgIkxvYWRpbmcuLi4iCiAgICAgICAgXQogICAgfQoKCnVzZXJJbnB1dFZpZXcgbW9kZWwgPQogICAgY29sdW1uCiAgICAgICAgWyBwYWRkaW5nIDE1IF0KICAgICAgICBbIGNvbHVtbiBbIHNwYWNpbmcgMTUgXQogICAgICAgICAgICBbIElucHV0LnRleHQgW10KICAgICAgICAgICAgICAgIHsgb25DaGFuZ2UgPSBVc2VybmFtZUlucHV0CiAgICAgICAgICAgICAgICAsIHRleHQgPSBtb2RlbC51c2VybmFtZSB8PiBNYXliZS53aXRoRGVmYXVsdCAiIgogICAgICAgICAgICAgICAgLCBwbGFjZWhvbGRlciA9IE5vdGhpbmcKICAgICAgICAgICAgICAgICwgbGFiZWwgPSBJbnB1dC5sYWJlbEFib3ZlIFtdIDx8IHRleHQgIlVzZXJuYW1lIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIElucHV0LmJ1dHRvbiAoYnV0dG9uU3R5bGVfIChtb2RlbC51c2VybmFtZSAvPSBOb3RoaW5nKSkKICAgICAgICAgICAgICAgIHsgb25QcmVzcyA9IE1heWJlLm1hcCAoYWx3YXlzIFNlbmRVc2VyKSBtb2RlbC51c2VybmFtZSwgbGFiZWwgPSB0ZXh0ICJFbnZveWVyIiB9CiAgICAgICAgICAgIF0KICAgICAgICBdCgAAAAAAAAAACiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2h0AAAAAAADaHQAAAAAAAAAAAAAAAPC/"
				],
				[
					922,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA2h0AAAAAAADaHQAAAAAAAAAAAAAAAPC/"
				],
				[
					925,
					1,
					"left_delete",
					null,
					"AQAAAGocAAAAAAAAahwAAAAAAAAIAAAAQ21kLm5vbmU",
					"AQAAAAAAAAABAAAAahwAAAAAAAByHAAAAAAAAAAAAAAAAPC/"
				],
				[
					926,
					1,
					"insert",
					{
						"characters": "snee"
					},
					"BAAAAGocAAAAAAAAaxwAAAAAAAAAAAAAaxwAAAAAAABsHAAAAAAAAAAAAABsHAAAAAAAAG0cAAAAAAAAAAAAAG0cAAAAAAAAbhwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAahwAAAAAAABqHAAAAAAAAAAAAAAAAPC/"
				],
				[
					929,
					1,
					"insert_completion",
					{
						"completion": "sendToBackend",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "sendToBackend"
					},
					"AgAAAGocAAAAAAAAahwAAAAAAAAEAAAAc25lZWocAAAAAAAAdxwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbhwAAAAAAABuHAAAAAAAAAAAAAAAAPC/"
				],
				[
					930,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHccAAAAAAAAeBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdxwAAAAAAAB3HAAAAAAAAAAAAAAAAPC/"
				],
				[
					931,
					1,
					"paste",
					null,
					"AQAAAHgcAAAAAAAAlhwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeBwAAAAAAAB4HAAAAAAAAAAAAAAAAPC/"
				],
				[
					932,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAAlhwAAAAAAACWHAAAAAAAAAAAAAAAAPC/"
				],
				[
					935,
					1,
					"insert",
					{
						"characters": "Lamdera."
					},
					"CAAAAGocAAAAAAAAaxwAAAAAAAAAAAAAaxwAAAAAAABsHAAAAAAAAAAAAABsHAAAAAAAAG0cAAAAAAAAAAAAAG0cAAAAAAAAbhwAAAAAAAAAAAAAbhwAAAAAAABvHAAAAAAAAAAAAABvHAAAAAAAAHAcAAAAAAAAAAAAAHAcAAAAAAAAcRwAAAAAAAAAAAAAcRwAAAAAAAByHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAahwAAAAAAABqHAAAAAAAAAAAAAAAAPC/"
				],
				[
					936,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAAchwAAAAAAAByHAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/GuessingGame.elm",
			"settings":
			{
				"buffer_size": 22556,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					150,
					1,
					"insert",
					{
						"characters": "fil"
					},
					"BAAAAMQWAAAAAAAAxRYAAAAAAAAAAAAAxRYAAAAAAADFFgAAAAAAAAkAAABjb25jYXRNYXDFFgAAAAAAAMYWAAAAAAAAAAAAAMYWAAAAAAAAxxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxBYAAAAAAADNFgAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert_completion",
					{
						"completion": "filter",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "filter"
					},
					"AgAAAMQWAAAAAAAAxBYAAAAAAAADAAAAZmlsxBYAAAAAAADKFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxxYAAAAAAADHFgAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					2,
					"left_delete",
					null,
					"AgAAAKcXAAAAAAAApxcAAAAAAAABAAAAXaYXAAAAAAAAphcAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAAqBcAAAAAAACoFwAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "Fa"
					},
					"AgAAAKYXAAAAAAAApxcAAAAAAAAAAAAApxcAAAAAAACoFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAphcAAAAAAACmFwAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert_completion",
					{
						"completion": "False",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "False"
					},
					"AgAAAKYXAAAAAAAAphcAAAAAAAACAAAARmGmFwAAAAAAAKsXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqBcAAAAAAACoFwAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"left_delete",
					null,
					"AQAAAJQWAAAAAAAAlBYAAAAAAAAaAAAAICAgICAgICAgICAgTGlzdC5tZW1iZXIgcAo",
					"AQAAAAAAAAABAAAAlBYAAAAAAACuFgAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "List.mem"
					},
					"CAAAAEAXAAAAAAAAQRcAAAAAAAAAAAAAQRcAAAAAAABCFwAAAAAAAAAAAABCFwAAAAAAAEMXAAAAAAAAAAAAAEMXAAAAAAAARBcAAAAAAAAAAAAARBcAAAAAAABFFwAAAAAAAAAAAABFFwAAAAAAAEYXAAAAAAAAAAAAAEYXAAAAAAAARxcAAAAAAAAAAAAARxcAAAAAAABIFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQBcAAAAAAABAFwAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": "ber"
					},
					"AwAAAEgXAAAAAAAASRcAAAAAAAAAAAAASRcAAAAAAABKFwAAAAAAAAAAAABKFwAAAAAAAEsXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASBcAAAAAAABIFwAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": " p"
					},
					"AgAAAEsXAAAAAAAATBcAAAAAAAAAAAAATBcAAAAAAABNFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASxcAAAAAAABLFwAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE0XAAAAAAAAThcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRcAAAAAAABNFwAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": " |>"
					},
					"AwAAAPcXAAAAAAAA+BcAAAAAAAAAAAAA+BcAAAAAAAD5FwAAAAAAAAAAAAD5FwAAAAAAAPoXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9xcAAAAAAAD3FwAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": " List."
					},
					"BgAAAPoXAAAAAAAA+xcAAAAAAAAAAAAA+xcAAAAAAAD8FwAAAAAAAAAAAAD8FwAAAAAAAP0XAAAAAAAAAAAAAP0XAAAAAAAA/hcAAAAAAAAAAAAA/hcAAAAAAAD/FwAAAAAAAAAAAAD/FwAAAAAAAAAYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+hcAAAAAAAD6FwAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": "he"
					},
					"AgAAAAAYAAAAAAAAARgAAAAAAAAAAAAAARgAAAAAAAACGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert_completion",
					{
						"completion": "head",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "head"
					},
					"AgAAAAAYAAAAAAAAABgAAAAAAAACAAAAaGUAGAAAAAAAAAQYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAhgAAAAAAAACGAAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAQYAAAAAAAABRgAAAAAAAAAAAAABRgAAAAAAAAVGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABBgAAAAAAAAEGAAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					2,
					"left_delete",
					null,
					"AgAAABEYAAAAAAAAERgAAAAAAAAEAAAAICAgIA0YAAAAAAAADRgAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAFRgAAAAAAAAVGAAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": "No"
					},
					"AgAAAA0YAAAAAAAADhgAAAAAAAAAAAAADhgAAAAAAAAPGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADRgAAAAAAAANGAAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert_completion",
					{
						"completion": "Nothing",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Nothing"
					},
					"AgAAAA0YAAAAAAAADRgAAAAAAAACAAAATm8NGAAAAAAAABQYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADxgAAAAAAAAPGAAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": " 0>"
					},
					"AwAAABQYAAAAAAAAFRgAAAAAAAAAAAAAFRgAAAAAAAAWGAAAAAAAAAAAAAAWGAAAAAAAABcYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFBgAAAAAAAAUGAAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					2,
					"left_delete",
					null,
					"AgAAABYYAAAAAAAAFhgAAAAAAAABAAAAPhUYAAAAAAAAFRgAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAFxgAAAAAAAAXGAAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": "-<"
					},
					"AgAAABUYAAAAAAAAFhgAAAAAAAAAAAAAFhgAAAAAAAAXGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFRgAAAAAAAAVGAAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"left_delete",
					null,
					"AQAAABYYAAAAAAAAFhgAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAAFxgAAAAAAAAXGAAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAABYYAAAAAAAAFxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFhgAAAAAAAAWGAAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": " N"
					},
					"AgAAABcYAAAAAAAAGBgAAAAAAAAAAAAAGBgAAAAAAAAZGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFxgAAAAAAAAXGAAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert_completion",
					{
						"completion": "Nothing",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Nothing"
					},
					"AgAAABgYAAAAAAAAGBgAAAAAAAABAAAAThgYAAAAAAAAHxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGRgAAAAAAAAZGAAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAn1cAAAAAAAC6VwAAbW9kdWxlIEd1ZXNzaW5nR2FtZSBleHBvc2luZyAoLi4pCgotLWltcG9ydCBQYWdlcy5BdXRoIGV4cG9zaW5nIChnZXRVc2VyTmFtZSkKCmltcG9ydCBCcm93c2VyLkRvbSBhcyBEb20KaW1wb3J0IENvZGVjIGV4cG9zaW5nICguLikKaW1wb3J0IERpY3QgZXhwb3NpbmcgKC4uKQppbXBvcnQgRWxlbWVudCBleHBvc2luZyAoLi4pCmltcG9ydCBFbGVtZW50LkJhY2tncm91bmQgYXMgQmFja2dyb3VuZAppbXBvcnQgRWxlbWVudC5Cb3JkZXIgYXMgQm9yZGVyCmltcG9ydCBFbGVtZW50LkV2ZW50cyBhcyBFdmVudHMKaW1wb3J0IEVsZW1lbnQuRm9udCBhcyBGb250CmltcG9ydCBFbGVtZW50LkhleENvbG9yIGV4cG9zaW5nIChyZ2JDU1NIZXgpCmltcG9ydCBFbGVtZW50LklucHV0IGFzIElucHV0CmltcG9ydCBIdG1sCmltcG9ydCBIdG1sLkF0dHJpYnV0ZXMgYXMgSHRtbEF0dHIKaW1wb3J0IEpzb24uRGVjb2RlIGFzIEQKaW1wb3J0IEpzb24uRW5jb2RlIGFzIEUKaW1wb3J0IEtleWJvYXJkIGFzIEsKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKHNlbmRUb0JhY2tlbmQpCmltcG9ydCBMaXN0LkV4dHJhCmltcG9ydCBTdHJpbmcuRXh0cmEKaW1wb3J0IFN0eWxlLkhlbHBlcnMgZXhwb3NpbmcgKC4uKQppbXBvcnQgU3R5bGUuUGFsZXR0ZSBleHBvc2luZyAoLi4pCmltcG9ydCBTdmcKaW1wb3J0IFN2Zy5BdHRyaWJ1dGVzIGFzIFN2Z2EKaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0b0NtZCBjID0KICAgIFRhc2sucGVyZm9ybSAoXF8gLT4gYykgKFRhc2suc3VjY2VlZCAiIikKCgptYlN0ciBzID0KICAgIGlmIHMgPT0gIiIgdGhlbgogICAgICAgIE5vdGhpbmcKCiAgICBlbHNlCiAgICAgICAgSnVzdCBzCgoKaG9zdEdhbWUgbW9kZWwgPQogICAgY2FzZSBtb2RlbC50aGlzUGxheWVyIG9mCiAgICAgICAgSnVzdCBwbGF5ZXIgLT4KICAgICAgICAgICAgKCBtb2RlbAogICAgICAgICAgICAsIHNlbmRUb0JhY2tlbmRXaXRoVGltZSA8fCBcdCAtPiBDcmVhdGVHYW1lVEIgcGxheWVyIHsga2FuamlTZXQgPSBKbHB0U2V0IFsgNSBdLCByb3VuZExlbmd0aCA9IDIwLCBzdGFydGluZ0NvdW50ZG93biA9IDEyMCB9IHQKICAgICAgICAgICAgKQoKICAgICAgICBfIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgpqb2luR2FtZSBtb2RlbCBnYW1lSWQgPQogICAgY2FzZSBtb2RlbC50aGlzUGxheWVyIG9mCiAgICAgICAgSnVzdCBwbGF5ZXIgLT4KICAgICAgICAgICAgKCBtb2RlbAogICAgICAgICAgICAsIHNlbmRUb0JhY2tlbmQgPHwgSm9pblRCIHBsYXllciBnYW1lSWQKICAgICAgICAgICAgKQoKICAgICAgICBfIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgpsZWF2ZUdhbWUgbW9kZWwgZ2FtZUlkID0KICAgIGNhc2UgbW9kZWwudGhpc1BsYXllciBvZgogICAgICAgIEp1c3QgcGxheWVyIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBzZW5kVG9CYWNrZW5kIDx8IExlYXZlVEIgcGxheWVyIGdhbWVJZAogICAgICAgICAgICApCgogICAgICAgIF8gLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnN0YXJ0R2FtZSBtb2RlbCBnYW1lSWQgPQogICAgY2FzZSAoIG1vZGVsLnRoaXNQbGF5ZXIsIGdldCBnYW1lSWQgbW9kZWwua2dnYW1lcyApIG9mCiAgICAgICAgKCBKdXN0IHAsIEp1c3QgeyBob3N0IH0gKSAtPgogICAgICAgICAgICBpZiBwID09IGhvc3QgdGhlbgogICAgICAgICAgICAgICAgKCBtb2RlbAogICAgICAgICAgICAgICAgLCBzZW5kVG9CYWNrZW5kV2l0aFRpbWUgKFx0IC0+IFN0YXJ0VEIgZ2FtZUlkIHQpCiAgICAgICAgICAgICAgICApCgogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIF8gLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnNlbmRUb0JhY2tlbmRXaXRoVGltZSA6IChUaW1lLlBvc2l4IC0+IFRvQmFja2VuZCkgLT4gQ21kIEZyb250ZW5kTXNnCnNlbmRUb0JhY2tlbmRXaXRoVGltZSBjYWxsYmFjayA9CiAgICBUYXNrLnBlcmZvcm0gKFx0aW1lIC0+IFNlbmRUb0JhY2tlbmRXaXRoVGltZSAoY2FsbGJhY2sgdGltZSkpIFRpbWUubm93CgoKd29yZElucHV0IG1vZGVsIHdvcmQgPQogICAgKCB7IG1vZGVsIHwga2dnV29yZElucHV0ID0gbWJTdHIgd29yZCwga2dnV3JvbmdXb3JkQnVmZmVyID0gTm90aGluZyB9LCBDbWQubm9uZSApCgoKc2VuZFdvcmQgbW9kZWwgZ2FtZUlkID0KICAgIGNhc2UgKCBtb2RlbC50aGlzUGxheWVyLCBtb2RlbC5rZ2dXb3JkSW5wdXQgKSBvZgogICAgICAgICggSnVzdCBwLCBKdXN0IHdvcmQgKSAtPgogICAgICAgICAgICAoIG1vZGVsCiAgICAgICAgICAgICwgc2VuZFRvQmFja2VuZCA8fCBBZGRXb3JkVEIgZ2FtZUlkIHAgd29yZAogICAgICAgICAgICApCgogICAgICAgIF8gLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkID0KICAgIGNhc2UgbW9kZWwudGhpc1BsYXllciBvZgogICAgICAgIEp1c3QgcCAtPgogICAgICAgICAgICAoIG1vZGVsCiAgICAgICAgICAgICwgc2VuZFRvQmFja2VuZCA8fCBSZXF1ZXN0TmV4dEthbmppVEIgZ2FtZUlkIHAKICAgICAgICAgICAgKQoKICAgICAgICBfIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgpzZXRLYW5qaVNldCA6IEZyb250ZW5kTW9kZWwgLT4gS2FuamlTZXQgLT4gSW50IC0+ICggRnJvbnRlbmRNb2RlbCwgQ21kIEZyb250ZW5kTXNnICkKc2V0S2FuamlTZXQgbW9kZWwga2FuamlTZXQgZ2FtZUlkID0KICAgIHVwZGF0ZUdhbWUgbW9kZWwKICAgICAgICBnYW1lSWQKICAgICAgICAoXGcgLT4KICAgICAgICAgICAgY2FzZSBnLmdhbWVTdGF0ZSBvZgogICAgICAgICAgICAgICAgTG9iYnkgY29uZmlnIC0+CiAgICAgICAgICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvbmZpZyA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGNvbmZpZyB8IGthbmppU2V0ID0ga2FuamlTZXQgfQogICAgICAgICAgICAgICAgICAgIGluCiAgICAgICAgICAgICAgICAgICAgKCB7IGcgfCBnYW1lU3RhdGUgPSBMb2JieSBuZXdDb25maWcgfSwgc2VuZFRvQmFja2VuZCA8fCBVcGRhdGVDb25maWdUQiBnYW1lSWQgbmV3Q29uZmlnICkKCiAgICAgICAgICAgICAgICBfIC0+CiAgICAgICAgICAgICAgICAgICAgKCBnLCBDbWQubm9uZSApCiAgICAgICAgKQoKCnNldEN1c3RvbUthbmppU2V0IDogRnJvbnRlbmRNb2RlbCAtPiBTdHJpbmcgLT4gKCBGcm9udGVuZE1vZGVsLCBDbWQgRnJvbnRlbmRNc2cgKQpzZXRDdXN0b21LYW5qaVNldCBtb2RlbCBrYW5qaVN0ciA9CiAgICAoIHsgbW9kZWwgfCBrZ2dDb25maWdJbnB1dHMgPSAoXGNpIC0+IHsgY2kgfCBrZ2dSYW5kb21LYW5qaUlucHV0ID0gbWJTdHIga2FuamlTdHIgfSkgbW9kZWwua2dnQ29uZmlnSW5wdXRzIH0KICAgICwgQ21kLm5vbmUKICAgICkKCgp1cGRhdGVHYW1lIG1vZGVsIGdhbWVJZCBzZXR0ZXIgPQogICAgY2FzZSBEaWN0LmdldCBnYW1lSWQgbW9kZWwua2dnYW1lcyBvZgogICAgICAgIEp1c3QgZyAtPgogICAgICAgICAgICBsZXQKICAgICAgICAgICAgICAgICggbmV3R2FtZSwgbmV3Q21kICkgPQogICAgICAgICAgICAgICAgICAgIHNldHRlciBnCiAgICAgICAgICAgIGluCiAgICAgICAgICAgICggeyBtb2RlbCB8IGtnZ2FtZXMgPSBEaWN0Lmluc2VydCBnYW1lSWQgbmV3R2FtZSBtb2RlbC5rZ2dhbWVzIH0sIG5ld0NtZCApCgogICAgICAgIF8gLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIFZpZXcKCgp2aWV3IDogRnJvbnRlbmRNb2RlbCAtPiBFbGVtZW50IEZyb250ZW5kTXNnCnZpZXcgbW9kZWwgPQogICAgbGV0CiAgICAgICAgbWJIb3N0R2FtZSA9CiAgICAgICAgICAgIGNhc2UgbW9kZWwudGhpc1BsYXllciBvZgogICAgICAgICAgICAgICAgSnVzdCBwIC0+CiAgICAgICAgICAgICAgICAgICAgSnVzdCA8fCBLZ2dIb3N0R2FtZQoKICAgICAgICAgICAgICAgIE5vdGhpbmcgLT4KICAgICAgICAgICAgICAgICAgICBOb3RoaW5nCiAgICBpbgogICAgY29sdW1uCiAgICAgICAgWyBwYWRkaW5nIDE1LCBzcGFjaW5nIDIwIF0KICAgICAgICBbIGVsIFsgRm9udC5ib2xkLCBGb250LnNpemUgMjUgXSAodGV4dCAiTWluaSBqZXUgS2FuamkiKQogICAgICAgICwgaWYgbm90IChpc0hvc3RpbmdHYW1lIG1vZGVsKSAmJiBub3QgKGlzQ3VycmVudGx5UGxheWluZyBtb2RlbCkgdGhlbgogICAgICAgICAgICBJbnB1dC5idXR0b24gKGJ1dHRvblN0eWxlXyAobWJIb3N0R2FtZSAvPSBOb3RoaW5nKSkKICAgICAgICAgICAgICAgIHsgb25QcmVzcyA9IG1iSG9zdEdhbWUKICAgICAgICAgICAgICAgICwgbGFiZWwgPSB0ZXh0ICJIw6liZXJnZXIgdW5lIG5vdXZlbGxlIHBhcnRpZSIKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICBlbHNlCiAgICAgICAgICAgIEVsZW1lbnQubm9uZQogICAgICAgICwgaWYgaXNDdXJyZW50bHlQbGF5aW5nIG1vZGVsIHRoZW4KICAgICAgICAgICAgRWxlbWVudC5ub25lCgogICAgICAgICAgZWxzZQogICAgICAgICAgICBjb2x1bW4KICAgICAgICAgICAgICAgIFsgc3BhY2luZyAzMCBdCiAgICAgICAgICAgICAgICAoTGlzdC5tYXAgKFxnIC0+IGdhbWVWaWV3IGcgbW9kZWwua2dnQ29uZmlnSW5wdXRzIG1vZGVsLnRoaXNQbGF5ZXIgbW9kZWwua2dnV29yZElucHV0IG1vZGVsLmtnZ1dyb25nV29yZEJ1ZmZlcikgKERpY3QudmFsdWVzIG1vZGVsLmtnZ2FtZXMpKQogICAgICAgIF0KCgppc0hvc3RpbmdHYW1lIDogRnJvbnRlbmRNb2RlbCAtPiBCb29sCmlzSG9zdGluZ0dhbWUgbW9kZWwgPQogICAgY2FzZSBtb2RlbC50aGlzUGxheWVyIG9mCiAgICAgICAgSnVzdCBwIC0+CiAgICAgICAgICAgIExpc3QubWVtYmVyIHAgKExpc3QubWFwIC5ob3N0IChEaWN0LnZhbHVlcyBtb2RlbC5rZ2dhbWVzKSkKCiAgICAgICAgTm90aGluZyAtPgogICAgICAgICAgICBGYWxzZQoKCmlzQ3VycmVudGx5UGxheWluZyA6IEZyb250ZW5kTW9kZWwgLT4gQm9vbAppc0N1cnJlbnRseVBsYXlpbmcgbW9kZWwgPQogICAgY2FzZSBtb2RlbC50aGlzUGxheWVyIG9mCiAgICAgICAgSnVzdCBwIC0+CiAgICAgICAgICAgIExpc3QubWVtYmVyIHAKICAgICAgICAgICAgICAgIChMaXN0LmNvbmNhdE1hcAogICAgICAgICAgICAgICAgICAgIChcZyAtPgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGcuZ2FtZVN0YXRlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJblBsYXkgXyAtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcucGxheWVycwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8gLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAoRGljdC52YWx1ZXMgbW9kZWwua2dnYW1lcykKICAgICAgICAgICAgICAgICkKCiAgICAgICAgTm90aGluZyAtPgogICAgICAgICAgICBGYWxzZQoKCmdldEN1cnJlbnRHYW1lIDogRnJvbnRlbmRNb2RlbCAtPiBNYXliZSBLYW5qaUd1ZXNzaW5nR2FtZQpnZXRDdXJyZW50R2FtZSBtb2RlbCA9CiAgICBjYXNlIG1vZGVsLnRoaXNQbGF5ZXIgb2YKICAgICAgICBKdXN0IHAgLT4KICAgICAgICAgICAgICAgIChMaXN0LmZpbHRlcgogICAgICAgICAgICAgICAgICAgIChcZyAtPgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGcuZ2FtZVN0YXRlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJblBsYXkgXyAtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExpc3QubWVtYmVyIHAgZy5wbGF5ZXJzCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXyAtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZhbHNlCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIChEaWN0LnZhbHVlcyBtb2RlbC5rZ2dhbWVzKQogICAgICAgICAgICAgICAgKSB8PiBMaXN0LmhlYWQKICAgICAgICBOb3RoaW5nIC0+IE5vdGhpbmcKCgpnYW1lVmlldyA6CiAgICBLYW5qaUd1ZXNzaW5nR2FtZQogICAgLT4KICAgICAgICB7IGtnZ1JhbmRvbUthbmppSW5wdXQgOiBNYXliZSBTdHJpbmcKICAgICAgICAsIGtnZ1JvdW5kTGVuZ3RoSW5wdXQgOiBNYXliZSBTdHJpbmcKICAgICAgICAsIGtnZ1N0YXJ0aW5nQ291bnRkb3duSW5wdXQgOiBNYXliZSBTdHJpbmcKICAgICAgICB9CiAgICAtPiBNYXliZSBQbGF5ZXIKICAgIC0+IE1heWJlIFN0cmluZwogICAgLT4gTWF5YmUgU3RyaW5nCiAgICAtPiBFbGVtZW50IEZyb250ZW5kTXNnCmdhbWVWaWV3IGdhbWUgY29uZmlnSW5wdXRzIG1iVGhpc1BsYXllciBidWZmZXIgd3JvbmdXb3JkID0KICAgIGxldAogICAgICAgIGlzSG9zdCA9CiAgICAgICAgICAgIEp1c3QgZ2FtZS5ob3N0ID09IG1iVGhpc1BsYXllcgoKICAgICAgICBoYXNKb2luZWQgPQogICAgICAgICAgICBpc0hvc3QgfHwgKE1heWJlLm1hcCAoXHAgLT4gTGlzdC5tZW1iZXIgcCBnYW1lLnBsYXllcnMpIG1iVGhpc1BsYXllciB8PiBNYXliZS53aXRoRGVmYXVsdCBGYWxzZSkKICAgIGluCiAgICBjYXNlIG1iVGhpc1BsYXllciBvZgogICAgICAgIEp1c3QgdGhpc1BsYXllciAtPgogICAgICAgICAgICBjb2x1bW4KICAgICAgICAgICAgICAgIFsgcGFkZGluZyAxNQogICAgICAgICAgICAgICAgLCBzcGFjaW5nIDE1CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICBbIC0tcm93IFtdIFsgdGV4dCAiZ2FtZSBpZDogIiwgdGV4dCA8fCBTdHJpbmcuZnJvbUludCBnYW1lLmdhbWVJZCBdCiAgICAgICAgICAgICAgICAgIC0tLCByb3cgW10gWyB0ZXh0ICJob3N0OiAiLCBwbGF5ZXJWaWV3IGdhbWUucGxheWVycyBnYW1lLmhvc3QgXQogICAgICAgICAgICAgICAgICAtLSwgY29sdW1uIFsgc3BhY2luZyAxMCBdIChMaXN0Lm1hcCAocGxheWVyVmlldyBnYW1lLnBsYXllcnMpIGdhbWUucGxheWVycykKICAgICAgICAgICAgICAgICAgZ2FtZVN0YXRlVmlldyBnYW1lLmdhbWVTdGF0ZSBjb25maWdJbnB1dHMgZ2FtZS5wbGF5ZXJzIHRoaXNQbGF5ZXIgZ2FtZS5nYW1lSWQgaXNIb3N0IGhhc0pvaW5lZCBidWZmZXIgd3JvbmdXb3JkIGdhbWUuYnVmZmVyaW5nCiAgICAgICAgICAgICAgICBdCgogICAgICAgIE5vdGhpbmcgLT4KICAgICAgICAgICAgZWwgWyBwYWRkaW5nIDE1IF0gKHRleHQgIkNoYXJnZW1lbnQgZW4gY291cnMuLi4iKQoKCnBsYXllclZpZXcgOiBMaXN0IFBsYXllciAtPiBQbGF5ZXIgLT4gRWxlbWVudCBtc2cKcGxheWVyVmlldyBwcyBwID0KICAgIGxldAogICAgICAgIGNvbG9yID0KICAgICAgICAgICAgcGxheWVyQ29sb3JzIHBzIHw+IERpY3QuZ2V0IHAubmFtZSB8PiBNYXliZS53aXRoRGVmYXVsdCBibGFjawogICAgaW4KICAgIGVsCiAgICAgICAgWyBwYWRkaW5nWFkgMTAgNwogICAgICAgICwgRm9udC5zaXplIDE2CiAgICAgICAgLCBGb250LmNvbG9yIHdoaXRlCiAgICAgICAgLCBCYWNrZ3JvdW5kLmNvbG9yIGNvbG9yCiAgICAgICAgLCBCb3JkZXIucm91bmRlZCA1CiAgICAgICAgXQogICAgICAgICh0ZXh0IHAubmFtZSkKCgpnYW1lU3RhdGVWaWV3IDoKICAgIEtHR2FtZVN0YXRlCiAgICAtPgogICAgICAgIHsga2dnUmFuZG9tS2FuamlJbnB1dCA6IE1heWJlIFN0cmluZwogICAgICAgICwga2dnUm91bmRMZW5ndGhJbnB1dCA6IE1heWJlIFN0cmluZwogICAgICAgICwga2dnU3RhcnRpbmdDb3VudGRvd25JbnB1dCA6IE1heWJlIFN0cmluZwogICAgICAgIH0KICAgIC0+IExpc3QgUGxheWVyCiAgICAtPiBQbGF5ZXIKICAgIC0+IEludAogICAgLT4gQm9vbAogICAgLT4gQm9vbAogICAgLT4gTWF5YmUgU3RyaW5nCiAgICAtPiBNYXliZSBTdHJpbmcKICAgIC0+IEJvb2wKICAgIC0+IEVsZW1lbnQgRnJvbnRlbmRNc2cKZ2FtZVN0YXRlVmlldyBnYW1lU3RhdGUgY29uZmlnSW5wdXRzIHBsYXllcnMgdGhpc1BsYXllciBnYW1lSWQgaXNIb3N0IGhhc0pvaW5lZCBidWZmZXIgd3JvbmdXb3JkIGJ1ZmZlcmluZyA9CiAgICBjYXNlIGdhbWVTdGF0ZSBvZgogICAgICAgIExvYmJ5IGNvbmZpZyAtPgogICAgICAgICAgICBsb2JieVZpZXcgY29uZmlnIGNvbmZpZ0lucHV0cyBnYW1lSWQgcGxheWVycyB0aGlzUGxheWVyIGlzSG9zdCBoYXNKb2luZWQgYnVmZmVyaW5nCgogICAgICAgIEluUGxheSBzdWJzdGF0ZSAtPgogICAgICAgICAgICBpblBsYXlWaWV3IGdhbWVJZCBwbGF5ZXJzIHRoaXNQbGF5ZXIgc3Vic3RhdGUgYnVmZmVyIHdyb25nV29yZCBidWZmZXJpbmcKCiAgICAgICAgR2FtZU92ZXIgc3Vic3RhdGUgLT4KICAgICAgICAgICAgZW5kZWRWaWV3IHN1YnN0YXRlCgogICAgICAgIFZpY3Rvcnkgc3Vic3RhdGUgLT4KICAgICAgICAgICAgdGV4dCAiVmljdG9yeSEiCgoKbG9iYnlWaWV3IDoKICAgIHsga2FuamlTZXQgOiBLYW5qaVNldCwgc3RhcnRpbmdDb3VudGRvd24gOiBJbnQsIHJvdW5kTGVuZ3RoIDogSW50IH0KICAgIC0+CiAgICAgICAgeyBrZ2dSYW5kb21LYW5qaUlucHV0IDogTWF5YmUgU3RyaW5nCiAgICAgICAgLCBrZ2dSb3VuZExlbmd0aElucHV0IDogTWF5YmUgU3RyaW5nCiAgICAgICAgLCBrZ2dTdGFydGluZ0NvdW50ZG93bklucHV0IDogTWF5YmUgU3RyaW5nCiAgICAgICAgfQogICAgLT4gR2FtZUlkCiAgICAtPiBMaXN0IFBsYXllcgogICAgLT4gUGxheWVyCiAgICAtPiBCb29sCiAgICAtPiBCb29sCiAgICAtPiBCb29sCiAgICAtPiBFbGVtZW50IEZyb250ZW5kTXNnCmxvYmJ5VmlldyBjb25maWcgY29uZmlnSW5wdXRzIGdhbWVJZCBwbGF5ZXJzIHRoaXNQbGF5ZXIgaXNIb3N0IGhhc0pvaW5lZCBidWZmZXJpbmcgPQogICAgY29sdW1uCiAgICAgICAgWyBwYWRkaW5nIDE1CiAgICAgICAgLCBzcGFjaW5nIDE1CiAgICAgICAgLCBjZW50ZXJYCiAgICAgICAgLCB3aWR0aCAocHggNDAwKQogICAgICAgIF0KICAgICAgICBbIGVsIFsgY2VudGVyWCwgRm9udC5zaXplIDIyLCBGb250LnNlbWlCb2xkIF0gKHRleHQgIk5vdXZlYXUgamV1IC0gQ29uZmlndXJhdGlvbiIpCiAgICAgICAgLCBwYXJhZ3JhcGggWyBGb250LmNlbnRlciwgd2lkdGggZmlsbCBdIChMaXN0Lm1hcCAoZWwgWyBwYWRkaW5nWFkgNyAwIF0gPDwgcGxheWVyVmlldyBwbGF5ZXJzKSBwbGF5ZXJzKQogICAgICAgICwgZWwgWyBjZW50ZXJYIF0gPHwKICAgICAgICAgICAgaWYgaXNIb3N0IHRoZW4KICAgICAgICAgICAgICAgIGNvbHVtbgogICAgICAgICAgICAgICAgICAgIFsgc3BhY2luZyAyMCwgY2VudGVyWCBdCiAgICAgICAgICAgICAgICAgICAgWyBjb2x1bW4KICAgICAgICAgICAgICAgICAgICAgICAgWyBzcGFjaW5nIDE1IF0KICAgICAgICAgICAgICAgICAgICAgICAgWyByb3cgWyBzcGFjaW5nIDE1IF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsgSW5wdXQuY2hlY2tib3ggW10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG9uQ2hhbmdlID0gYWx3YXlzIDx8IEtnZ1NldEthbmppU2V0ICh1cGRhdGVLYW5qaVNldEpscHQgY29uZmlnLmthbmppU2V0IDUpIGdhbWVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgaWNvbiA9IElucHV0LmRlZmF1bHRDaGVja2JveAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgY2hlY2tlZCA9IGthbmppU2V0SGFzSmxwdExldmVsIGNvbmZpZy5rYW5qaVNldCA1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBsYWJlbCA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElucHV0LmxhYmVsUmlnaHQgW10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0ZXh0ICJONSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBJbnB1dC5jaGVja2JveCBbXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgb25DaGFuZ2UgPSBhbHdheXMgPHwgS2dnU2V0S2FuamlTZXQgKHVwZGF0ZUthbmppU2V0SmxwdCBjb25maWcua2FuamlTZXQgNCkgZ2FtZUlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBpY29uID0gSW5wdXQuZGVmYXVsdENoZWNrYm94CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBjaGVja2VkID0ga2FuamlTZXRIYXNKbHB0TGV2ZWwgY29uZmlnLmthbmppU2V0IDQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGxhYmVsID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5wdXQubGFiZWxSaWdodCBbXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRleHQgIk40IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIElucHV0LmNoZWNrYm94IFtdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBvbkNoYW5nZSA9IGFsd2F5cyA8fCBLZ2dTZXRLYW5qaVNldCAodXBkYXRlS2FuamlTZXRKbHB0IGNvbmZpZy5rYW5qaVNldCAzKSBnYW1lSWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGljb24gPSBJbnB1dC5kZWZhdWx0Q2hlY2tib3gKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGNoZWNrZWQgPSBrYW5qaVNldEhhc0pscHRMZXZlbCBjb25maWcua2FuamlTZXQgMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgbGFiZWwgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnB1dC5sYWJlbFJpZ2h0IFtdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGV4dCAiTjMiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgSW5wdXQuY2hlY2tib3ggW10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG9uQ2hhbmdlID0gYWx3YXlzIDx8IEtnZ1NldEthbmppU2V0ICh1cGRhdGVLYW5qaVNldEpscHQgY29uZmlnLmthbmppU2V0IDIpIGdhbWVJZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgaWNvbiA9IElucHV0LmRlZmF1bHRDaGVja2JveAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgY2hlY2tlZCA9IGthbmppU2V0SGFzSmxwdExldmVsIGNvbmZpZy5rYW5qaVNldCAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBsYWJlbCA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElucHV0LmxhYmVsUmlnaHQgW10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0ZXh0ICJOMiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgLCBlbCBbIGNlbnRlclggXSA8fAogICAgICAgICAgICAgICAgICAgICAgICBJbnB1dC50ZXh0IHRleHRJbnB1dFN0eWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG9uQ2hhbmdlID0gS2dnU2V0Q3VzdG9tS2FuamlTZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgdGV4dCA9IGNvbmZpZ0lucHV0cy5rZ2dSYW5kb21LYW5qaUlucHV0IHw+IE1heWJlLndpdGhEZWZhdWx0ICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHBsYWNlaG9sZGVyID0gTm90aGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBsYWJlbCA9IElucHV0LmxhYmVsQWJvdmUgW10gKHRleHQgIkN1c3RvbSBrYW5qaSBzZXQiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICwgZWwgWyBjZW50ZXJYIF0gPHwKICAgICAgICAgICAgICAgICAgICAgICAgSW5wdXQuYnV0dG9uIChidXR0b25TdHlsZV8gVHJ1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgb25QcmVzcyA9IEp1c3QgKEtnZ1N0YXJ0R2FtZSBnYW1lSWQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGxhYmVsID0gdGV4dCAiQ29tbWVuY2VyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KCiAgICAgICAgICAgIGVsc2UgaWYgbm90IGhhc0pvaW5lZCB0aGVuCiAgICAgICAgICAgICAgICBjb2x1bW4gWyBzcGFjaW5nIDIwIF0KICAgICAgICAgICAgICAgICAgICBbIGNvbmZpZ1ZpZXcgY29uZmlnIGNvbmZpZ0lucHV0cwogICAgICAgICAgICAgICAgICAgICwgSW5wdXQuYnV0dG9uIChidXR0b25TdHlsZV8gVHJ1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgeyBvblByZXNzID0gSnVzdCAoS2dnSm9pbkdhbWUgZ2FtZUlkKQogICAgICAgICAgICAgICAgICAgICAgICAsIGxhYmVsID0gdGV4dCAiUmVqb2luZHJlIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQoKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgSW5wdXQuYnV0dG9uIChidXR0b25TdHlsZV8gVHJ1ZSkKICAgICAgICAgICAgICAgICAgICB7IG9uUHJlc3MgPSBKdXN0IChLZ2dMZWF2ZUdhbWUgZ2FtZUlkKQogICAgICAgICAgICAgICAgICAgICwgbGFiZWwgPSB0ZXh0ICJRdWl0dGVyIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICBdCgoKY29uZmlnVmlldyBjb25maWcgY29uZmlnSW5wdXRzID0KICAgIGNvbHVtbgogICAgICAgIFsgc3BhY2luZyAxNSBdCiAgICAgICAgWyBjYXNlIGNvbmZpZy5rYW5qaVNldCBvZgogICAgICAgICAgICBKbHB0U2V0IHNldCAtPgogICAgICAgICAgICAgICAgcm93CiAgICAgICAgICAgICAgICAgICAgW10KICAgICAgICAgICAgICAgICAgICBbIGVsIFsgRm9udC5zZW1pQm9sZCBdICh0ZXh0ICJOaXZlYXUgSkxQVDogIikKICAgICAgICAgICAgICAgICAgICAsIGVsIFsgRm9udC5zaXplIDE2IF0gKExpc3QubWFwIFN0cmluZy5mcm9tSW50IHNldCB8PiBTdHJpbmcuam9pbiAiLCAiIHw+IHRleHQpCiAgICAgICAgICAgICAgICAgICAgXQoKICAgICAgICAgICAgQ3VzdG9tS2FuamlTZXQga2FuamkgLT4KICAgICAgICAgICAgICAgIEVsZW1lbnQubm9uZQogICAgICAgIF0KCgprYW5qaVNldEhhc0pscHRMZXZlbCBrYW5qaXNldCBuID0KICAgIGNhc2Uga2FuamlzZXQgb2YKICAgICAgICBKbHB0U2V0IHhzIC0+CiAgICAgICAgICAgIExpc3QubWVtYmVyIG4geHMKCiAgICAgICAgXyAtPgogICAgICAgICAgICBGYWxzZQoKCnVwZGF0ZUthbmppU2V0SmxwdCBrYW5qaXNldCBuID0KICAgIGNhc2Uga2FuamlzZXQgb2YKICAgICAgICBKbHB0U2V0IHhzIC0+CiAgICAgICAgICAgIEpscHRTZXQgPHwKICAgICAgICAgICAgICAgIGlmIExpc3QubWVtYmVyIG4geHMgdGhlbgogICAgICAgICAgICAgICAgICAgIExpc3QuRXh0cmEucmVtb3ZlIG4geHMKCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgbiA6OiB4cwoKICAgICAgICBfIC0+CiAgICAgICAgICAgIGthbmppc2V0CgoKaW5QbGF5VmlldyBnYW1lSWQgcGxheWVycyB0aGlzUGxheWVyIHN1YnN0YXRlIGJ1ZmZlciB3cm9uZ1dvcmQgYnVmZmVyaW5nID0KICAgIGNvbHVtbgogICAgICAgIFsgcGFkZGluZyAxNQogICAgICAgICwgc3BhY2luZyAxNQogICAgICAgICwgY2VudGVyWAogICAgICAgICwgd2lkdGggKHB4IDQwMCkKICAgICAgICAsIGlmIGJ1ZmZlcmluZyB0aGVuCiAgICAgICAgICAgIGluRnJvbnQgPHwgZWwgWyBhbGlnblJpZ2h0LCBGb250LnNpemUgMTQgXSAodGV4dCAiYnVmZmVyaW5nISIpCgogICAgICAgICAgZWxzZQogICAgICAgICAgICBub0F0dHIKICAgICAgICBdCiAgICAgICAgWyBlbCBbIGNlbnRlclgsIEZvbnQuc2l6ZSAyMiwgRm9udC5zZW1pQm9sZCBdICh0ZXh0ICJQYXJ0aWUgZW4gY291cnMiKQogICAgICAgICwgcGFyYWdyYXBoIFsgRm9udC5jZW50ZXIsIHdpZHRoIGZpbGwgXSAoTGlzdC5tYXAgKGVsIFsgcGFkZGluZ1hZIDcgMCBdIDw8IHBsYXllclZpZXcgcGxheWVycykgcGxheWVycykKICAgICAgICAsIHJvdyBbIGNlbnRlclggXQogICAgICAgICAgICBbIGVsIFsgRm9udC5zaXplIDE4LCBGb250LnNlbWlCb2xkIF0gPHwgdGV4dCAiU2NvcmU6ICIKICAgICAgICAgICAgLCBlbCBbIEZvbnQuc2l6ZSAxNiBdIDx8IHRleHQgKFN0cmluZy5mcm9tSW50IHN1YnN0YXRlLnNjb3JlKQogICAgICAgICAgICBdCiAgICAgICAgLCBtYWluS2FuamlWaWV3IHN1YnN0YXRlLnJvdW5kTGVuZ3RoIHN1YnN0YXRlLnRpbWVUaWxsUm91bmRFbmQgc3Vic3RhdGUuY3VycmVudEthbmppCiAgICAgICAgLCBjb3VudERvd25WaWV3IHN1YnN0YXRlLnN0YXJ0aW5nQ291bnRkb3duIHN1YnN0YXRlLnRpbWVUaWxsR2FtZU92ZXIKCiAgICAgICAgLS0sIGVsCiAgICAgICAgLS0gICAgWyBjZW50ZXJYCiAgICAgICAgLS0gICAgLCBCb3JkZXIuY29sb3IgbGlnaHRCbHVlCiAgICAgICAgLS0gICAgLCBCb3JkZXIud2lkdGggMQogICAgICAgIC0tICAgICwgQm9yZGVyLnJvdW5kZWQgNQogICAgICAgIC0tICAgICwgRm9udC5zaXplIDg1CiAgICAgICAgLS0gICAgLCBwYWRkaW5nIDE1CiAgICAgICAgLS0gICAgXQogICAgICAgIC0tICA8fAogICAgICAgIC0tICAgIGVsIFsgbW92ZURvd24gNSBdICh0ZXh0IChTdHJpbmcuZnJvbUNoYXIgc3Vic3RhdGUuY3VycmVudEthbmppKSkKICAgICAgICAtLSwgcm93IFtdIFsgdGV4dCAicmVtYWluaW5nS2Fuamk6ICIsIHBhcmFncmFwaCBbXSA8fCBMaXN0Lm1hcCAoXGsgLT4gdGV4dCAoU3RyaW5nLmZyb21DaGFyIGspKSBzdWJzdGF0ZS5yZW1haW5pbmdLYW5qaSBdCiAgICAgICAgLS0sIHJvdyBbXSBbIHRleHQgImJ1ZmZlcmVkS2Fuamk6ICIsIHBhcmFncmFwaCBbXSA8fCBMaXN0Lm1hcCAoXGsgLT4gdGV4dCAoU3RyaW5nLmZyb21DaGFyIGspKSBzdWJzdGF0ZS5idWZmZXJlZEthbmppIF0KICAgICAgICAtLSwgcm93IFtdIFsgdGV4dCAibGFzdCB1cGRhdGVkOiAiLCB0ZXh0IDx8IFN0cmluZy5mcm9tSW50IGdhbWUubGFzdFVwZGF0ZWQgXQogICAgICAgIC0tLCByb3cgW10gWyB0ZXh0ICJyb3VuZExlbmd0aDogIiwgdGV4dCA8fCBTdHJpbmcuZnJvbUludCBzdWJzdGF0ZS50aW1lVGlsbFJvdW5kRW5kIF0KICAgICAgICAsIGFkZFdvcmRWaWV3IGdhbWVJZCB0aGlzUGxheWVyIGJ1ZmZlciB3cm9uZ1dvcmQKICAgICAgICAsIHBhcmFncmFwaAogICAgICAgICAgICBbIEZvbnQuY2VudGVyCiAgICAgICAgICAgICwgd2lkdGggZmlsbAogICAgICAgICAgICBdCiAgICAgICAgICAgIChEaWN0LnRvTGlzdCBzdWJzdGF0ZS53b3JkcwogICAgICAgICAgICAgICAgfD4gTGlzdC5tYXAKICAgICAgICAgICAgICAgICAgICAoXCggcElkLCB2ICkgLT4KICAgICAgICAgICAgICAgICAgICAgICAgcGFyYWdyYXBoIFsgc3BhY2luZyAxNSBdIDx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0Lm1hcCAoZWwgWyBwYWRkaW5nWFkgNSAxMCwgaHRtbEF0dHJpYnV0ZSA8fCBIdG1sQXR0ci5hdHRyaWJ1dGUgIndoaXRlLXNwYWNlIiAibm93cmFwIiBdIDw8IHdvcmRWaWV3IHBsYXllcnMgcElkKSB2CiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICApCiAgICAgICAgXQoKCmNvdW50RG93blZpZXcgc3RhcnRpbmdDb3VudGRvd24gdGltZVRpbGxHYW1lT3ZlciA9CiAgICBsZXQKICAgICAgICBsZW5ndGggPQogICAgICAgICAgICBpZiB0aW1lVGlsbEdhbWVPdmVyID4gc3RhcnRpbmdDb3VudGRvd24gdGhlbgogICAgICAgICAgICAgICAgMzAwCgogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICByb3VuZCA8fCAzMDAgKiB0b0Zsb2F0IHRpbWVUaWxsR2FtZU92ZXIgLyB0b0Zsb2F0IHN0YXJ0aW5nQ291bnRkb3duCiAgICBpbgogICAgZWwKICAgICAgICBbIGhlaWdodCAocHggNCkKICAgICAgICAsIHdpZHRoIChweCBsZW5ndGgpCiAgICAgICAgLCBCYWNrZ3JvdW5kLmNvbG9yIGxpZ2h0Qmx1ZQogICAgICAgICwgY2VudGVyWAogICAgICAgICwgQm9yZGVyLnJvdW5kZWQgMgogICAgICAgIF0KICAgICAgICBFbGVtZW50Lm5vbmUKCgptYWluS2FuamlWaWV3IHJvdW5kTGVuZ3RoIHRpbWVUaWxsUm91bmRFbmQga2FuamkgPQogICAgbGV0CiAgICAgICAgcmVtYWluaW5nVGltZUFuZ2xlID0KICAgICAgICAgICAgLS1pZiByb3VuZExlbmd0aCA9PSB0aW1lVGlsbFJvdW5kRW5kIHRoZW4KICAgICAgICAgICAgLS0gICAgLXBpIC8gMiArIDIgKiBwaQogICAgICAgICAgICAtLWVsc2UKICAgICAgICAgICAgLXBpIC8gMiArIDIgKiBwaSAqICh0b0Zsb2F0ICh0aW1lVGlsbFJvdW5kRW5kIC0gcm91bmRMZW5ndGgpIC8gdG9GbG9hdCByb3VuZExlbmd0aCkKCiAgICAgICAgZW5kWCA9CiAgICAgICAgICAgIFN0cmluZy5mcm9tSW50IDx8IHJvdW5kIDx8IDcwMCArIDYwMCAqIGNvcyByZW1haW5pbmdUaW1lQW5nbGUKCiAgICAgICAgZW5kWSA9CiAgICAgICAgICAgIFN0cmluZy5mcm9tSW50IDx8IHJvdW5kIDx8IDcwMCArIDYwMCAqIHNpbiByZW1haW5pbmdUaW1lQW5nbGUKCiAgICAgICAgbGFyZ2VBcmNGbGFnID0KICAgICAgICAgICAgLS1TdHJpbmcuZnJvbUludCA8fCAxCiAgICAgICAgICAgIFN0cmluZy5mcm9tSW50IDx8CiAgICAgICAgICAgICAgICBpZiByZW1haW5pbmdUaW1lQW5nbGUgPCAtcGkgLyAyICYmIHJlbWFpbmluZ1RpbWVBbmdsZSA+IC0zICogcGkgLyAyIHRoZW4KICAgICAgICAgICAgICAgICAgICAxCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIDAKICAgIGluCiAgICBlbAogICAgICAgIFsgY2VudGVyWAogICAgICAgICwgQm9yZGVyLmNvbG9yIGxpZ2h0Qmx1ZQogICAgICAgICwgd2lkdGggKHB4IDE0MCkKICAgICAgICAsIGhlaWdodCAocHggMTQwKQogICAgICAgICwgU3ZnLnN2ZwogICAgICAgICAgICBbIFN2Z2Eudmlld0JveCAiMCAwIDE0MDAgMTQwMCIKICAgICAgICAgICAgXQogICAgICAgICAgICBbIFN2Zy5yZWN0CiAgICAgICAgICAgICAgICBbIFN2Z2Eud2lkdGggIjEwMCUiCiAgICAgICAgICAgICAgICAsIFN2Z2EuaGVpZ2h0ICIxMDAlIgoKICAgICAgICAgICAgICAgIC0tLCBTdmdhLmZpbGwgInJnYmEoMjU1LCAyMTYsIDIzMCwgMC41KSIKICAgICAgICAgICAgICAgICwgU3ZnYS5maWxsICJub25lIgogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgW10KICAgICAgICAgICAgLCBTdmcuY2lyY2xlCiAgICAgICAgICAgICAgICBbIFN2Z2EuY3ggIjcwMCIKICAgICAgICAgICAgICAgICwgU3ZnYS5jeSAiNzAwIgogICAgICAgICAgICAgICAgLCBTdmdhLnIgIjYwMCIKICAgICAgICAgICAgICAgICwgU3ZnYS5maWxsICJub25lIgogICAgICAgICAgICAgICAgLCBTdmdhLnN0cm9rZSAiYmxhY2siCiAgICAgICAgICAgICAgICAsIFN2Z2Euc3Ryb2tlV2lkdGggIjEiCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICBbXQogICAgICAgICAgICAsIGlmIHJvdW5kTGVuZ3RoID09IHRpbWVUaWxsUm91bmRFbmQgdGhlbgogICAgICAgICAgICAgICAgU3ZnLmNpcmNsZQogICAgICAgICAgICAgICAgICAgIFsgU3ZnYS5jeCAiNzAwIgogICAgICAgICAgICAgICAgICAgICwgU3ZnYS5jeSAiNzAwIgogICAgICAgICAgICAgICAgICAgICwgU3ZnYS5yICI2MDAiCiAgICAgICAgICAgICAgICAgICAgLCBTdmdhLmZpbGwgIm5vbmUiCiAgICAgICAgICAgICAgICAgICAgLCBTdmdhLnN0cm9rZSAibGlnaHRHcmVlbiIKICAgICAgICAgICAgICAgICAgICAsIFN2Z2Euc3Ryb2tlV2lkdGggIjcwIgogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICBbXQoKICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBTdmcucGF0aAogICAgICAgICAgICAgICAgICAgIFsgU3ZnYS5kIDx8ICJNNzAwLDEwMCBBNjAwLDYwMCAwICIgKysgbGFyZ2VBcmNGbGFnICsrICIsMSAiICsrIGVuZFggKysgIiwiICsrIGVuZFkKICAgICAgICAgICAgICAgICAgICAsIFN2Z2EuZmlsbCAibm9uZSIKICAgICAgICAgICAgICAgICAgICAsIFN2Z2Euc3Ryb2tlICJsaWdodEdyZWVuIgogICAgICAgICAgICAgICAgICAgICwgU3ZnYS5zdHJva2VXaWR0aCAiNzAiCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIFtdCiAgICAgICAgICAgIF0KICAgICAgICAgICAgfD4gaHRtbAogICAgICAgICAgICB8PiBlbCBbIHdpZHRoIChweCAxNDApLCBoZWlnaHQgKHB4IDE0MCkgXQogICAgICAgICAgICB8PiBiZWhpbmRDb250ZW50CiAgICAgICAgXQogICAgPHwKICAgICAgICBlbCBbIG1vdmVEb3duIDM1LCBtb3ZlUmlnaHQgMjgsIEZvbnQuc2l6ZSA4NSBdICh0ZXh0IChTdHJpbmcuZnJvbUNoYXIga2FuamkpKQoKCndvcmRWaWV3IDogTGlzdCBQbGF5ZXIgLT4gU3RyaW5nIC0+IFN0cmluZyAtPiBFbGVtZW50IEZyb250ZW5kTXNnCndvcmRWaWV3IHBzIHBJZCB3ID0KICAgIGNhc2UgTGlzdC5maWx0ZXIgKFx7IGlkIH0gLT4gaWQgPT0gcElkKSBwcyBvZgogICAgICAgIHAgOjogW10gLT4KICAgICAgICAgICAgbGV0CiAgICAgICAgICAgICAgICBjb2xvciA9CiAgICAgICAgICAgICAgICAgICAgcGxheWVyQ29sb3JzIHBzIHw+IERpY3QuZ2V0IHAubmFtZSB8PiBNYXliZS53aXRoRGVmYXVsdCBibGFjawogICAgICAgICAgICBpbgogICAgICAgICAgICBlbAogICAgICAgICAgICAgICAgWyBwYWRkaW5nWFkgMTAgNwogICAgICAgICAgICAgICAgLCBGb250LnNpemUgMTYKICAgICAgICAgICAgICAgICwgRm9udC5jb2xvciB3aGl0ZQogICAgICAgICAgICAgICAgLCBCYWNrZ3JvdW5kLmNvbG9yIGNvbG9yCiAgICAgICAgICAgICAgICAsIEJvcmRlci5yb3VuZGVkIDUKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICh0ZXh0IHcpCgogICAgICAgIF8gLT4KICAgICAgICAgICAgRWxlbWVudC5ub25lCgoKYWRkV29yZFZpZXcgOiBJbnQgLT4gUGxheWVyIC0+IE1heWJlIFN0cmluZyAtPiBNYXliZSBTdHJpbmcgLT4gRWxlbWVudCBGcm9udGVuZE1zZwphZGRXb3JkVmlldyBnYW1lSWQgdGhpc1BsYXllciBidWZmZXIgd3JvbmdXb3JkID0KICAgIGNvbHVtbgogICAgICAgIFsgc3BhY2luZyAxNQogICAgICAgICwgaWYgd3JvbmdXb3JkIC89IE5vdGhpbmcgdGhlbgogICAgICAgICAgICBGb250LmNvbG9yIHJlZAoKICAgICAgICAgIGVsc2UKICAgICAgICAgICAgbm9BdHRyCiAgICAgICAgLCBjZW50ZXJYCiAgICAgICAgLCBwYWRkaW5nRWFjaCB7IHNpZGVzIHwgdG9wID0gNSB9CiAgICAgICAgXQogICAgICAgIFsgSW5wdXQudGV4dCAodGV4dElucHV0U3R5bGUgKysgWyBodG1sQXR0cmlidXRlIDx8IEh0bWxBdHRyLmlkICJwcm9tcHRpbmdJbnB1dCIgXSkKICAgICAgICAgICAgeyBvbkNoYW5nZSA9IEtnZ1dvcmRJbnB1dAogICAgICAgICAgICAsIHRleHQgPSBidWZmZXIgfD4gTWF5YmUud2l0aERlZmF1bHQgIiIKICAgICAgICAgICAgLCBwbGFjZWhvbGRlciA9IE5vdGhpbmcKICAgICAgICAgICAgLCBsYWJlbCA9IElucHV0LmxhYmVsSGlkZGVuICIiCiAgICAgICAgICAgIH0KICAgICAgICAsIHJvdwogICAgICAgICAgICBbIHNwYWNpbmcgMTUKICAgICAgICAgICAgLCBGb250LnNpemUgMTYKICAgICAgICAgICAgLCBjZW50ZXJYCiAgICAgICAgICAgIF0KICAgICAgICAgICAgWyBJbnB1dC5idXR0b24KICAgICAgICAgICAgICAgIChidXR0b25TdHlsZV8gVHJ1ZSkKICAgICAgICAgICAgICAgIHsgb25QcmVzcyA9IEp1c3QgKEtnZ1JlcXVlc3ROZXh0S2FuamkgZ2FtZUlkKQogICAgICAgICAgICAgICAgLCBsYWJlbCA9IHRleHQgIlN1aXZhbnQiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICwgSW5wdXQuYnV0dG9uCiAgICAgICAgICAgICAgICAoYnV0dG9uU3R5bGVfIChidWZmZXIgLz0gTm90aGluZykpCiAgICAgICAgICAgICAgICB7IG9uUHJlc3MgPSBNYXliZS5tYXAgKFx3IC0+IEtnZ1NlbmRXb3JkIGdhbWVJZCkgYnVmZmVyCiAgICAgICAgICAgICAgICAsIGxhYmVsID0gdGV4dCAiRW52b3llciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgIF0KCgplbmRlZFZpZXcgc3Vic3RhdGUgPQogICAgY29sdW1uCiAgICAgICAgWyBwYWRkaW5nIDE1CiAgICAgICAgLCBzcGFjaW5nIDE1CiAgICAgICAgXQogICAgICAgIFsgdGV4dCAiR0FNRU9WRVIiCiAgICAgICAgLCByb3cgW10gWyB0ZXh0ICJzY29yZTogIiwgdGV4dCAoU3RyaW5nLmZyb21JbnQgc3Vic3RhdGUuc2NvcmUpIF0KICAgICAgICBdCgoKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCgprZXlib2FyZE1zZyBtb2RlbCBrZXlNc2cgPQogICAgbGV0CiAgICAgICAgcHJlc3NlZEtleXMgPQogICAgICAgICAgICBLLnVwZGF0ZSBrZXlNc2cgW10KICAgIGluCiAgICAoIG1vZGVsCiAgICAsIGlmIExpc3QubWVtYmVyIEsuRW50ZXIgcHJlc3NlZEtleXMgdGhlbgogICAgICAgIHRvQ21kIDx8IEtnZ1NlbmRXb3JkIDAKCiAgICAgIGVsc2UKICAgICAgICBDbWQubm9uZQogICAgKQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKd2hpdGVUZXh0Q29sb3JzID0KICAgIExpc3QucmV2ZXJzZSA8fAogICAgICAgIExpc3QubWFwIHJnYkNTU0hleAogICAgICAgICAgICBbICIjNzQ1Mzk5IgogICAgICAgICAgICAsICIjMjUwZDAwIgogICAgICAgICAgICAsICIjYmI1NTQ4IgogICAgICAgICAgICAsICIjNzQzMjVjIgogICAgICAgICAgICAsICIjMDA3YjQzIgogICAgICAgICAgICAsICIjMzAyODMzIgogICAgICAgICAgICAsICIjMWU1MGEyIgogICAgICAgICAgICAsICIjN2E0MTcxIgogICAgICAgICAgICAsICIjMDA2ZTU0IgogICAgICAgICAgICAsICIjODk1YjhhIgogICAgICAgICAgICAsICIjOGQ2NDQ5IgogICAgICAgICAgICAsICIjNmU3OTU1IgogICAgICAgICAgICAsICIjNDM2NzZiIgogICAgICAgICAgICAsICIjNWE1NDRiIgogICAgICAgICAgICAsICIjMmM0ZjU0IgogICAgICAgICAgICAsICIjNDQ2MTdiIgogICAgICAgICAgICAsICIjMDA1NTJlIgogICAgICAgICAgICAsICIjMDA3YmJiIgogICAgICAgICAgICAsICIjZDkzMzNmIgogICAgICAgICAgICAsICIjM2U2MmFkIgogICAgICAgICAgICAsICIjYTIyMDQxIgogICAgICAgICAgICAsICIjMTkyZjYwIgogICAgICAgICAgICAsICIjMzE2NzQ1IgogICAgICAgICAgICAsICIjODg0ODk4IgogICAgICAgICAgICAsICIjNGY0NTVjIgogICAgICAgICAgICAsICIjYWE0YzhmIgogICAgICAgICAgICAsICIjYjU1MjMzIgogICAgICAgICAgICAsICIjNzI2ZDQwIgogICAgICAgICAgICAsICIjMTY1ZTgzIgogICAgICAgICAgICAsICIjNGQ1YWFmIgogICAgICAgICAgICAsICIjNjUzMThlIgogICAgICAgICAgICAsICIjMjUwZDAwIgogICAgICAgICAgICAsICIjYmI1NTQ4IgogICAgICAgICAgICAsICIjNzQzMjVjIgogICAgICAgICAgICAsICIjMDA3YjQzIgogICAgICAgICAgICAsICIjMzAyODMzIgogICAgICAgICAgICAsICIjMWU1MGEyIgogICAgICAgICAgICAsICIjN2E0MTcxIgogICAgICAgICAgICAsICIjMDA2ZTU0IgogICAgICAgICAgICAsICIjODk1YjhhIgogICAgICAgICAgICAsICIjOGQ2NDQ5IgogICAgICAgICAgICAsICIjNmU3OTU1IgogICAgICAgICAgICAsICIjNDM2NzZiIgogICAgICAgICAgICAsICIjNWE1NDRiIgogICAgICAgICAgICAsICIjMmM0ZjU0IgogICAgICAgICAgICAsICIjNDQ2MTdiIgogICAgICAgICAgICAsICIjMDA1NTJlIgogICAgICAgICAgICAsICIjMDA3YmJiIgogICAgICAgICAgICAsICIjZDkzMzNmIgogICAgICAgICAgICAsICIjM2U2MmFkIgogICAgICAgICAgICAsICIjYTIyMDQxIgogICAgICAgICAgICAsICIjMTkyZjYwIgogICAgICAgICAgICAsICIjMzE2NzQ1IgogICAgICAgICAgICAsICIjODg0ODk4IgogICAgICAgICAgICAsICIjNGY0NTVjIgogICAgICAgICAgICAsICIjYWE0YzhmIgogICAgICAgICAgICAsICIjYjU1MjMzIgogICAgICAgICAgICAsICIjNzI2ZDQwIgogICAgICAgICAgICAsICIjMTY1ZTgzIgogICAgICAgICAgICAsICIjNGQ1YWFmIgogICAgICAgICAgICAsICIjNjUzMThlIgogICAgICAgICAgICBdCgoKcGxheWVyQ29sb3JzIHAgPQogICAgTGlzdC5tYXAgLm5hbWUgcAogICAgICAgIHw+IExpc3QuRXh0cmEudW5pcXVlCiAgICAgICAgfD4gKFxzdGRzIC0+IExpc3QuRXh0cmEuemlwIHN0ZHMgd2hpdGVUZXh0Q29sb3JzKQogICAgICAgIHw+IERpY3QuZnJvbUxpc3QK",
					"AQAAAAAAAAABAAAAHxgAAAAAAAAfGAAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					2,
					"left_delete",
					null,
					"AgAAAAkSAAAAAAAACRIAAAAAAAABAAAAZggSAAAAAAAACBIAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAChIAAAAAAAAKEgAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": "case"
					},
					"BAAAAAgSAAAAAAAACRIAAAAAAAAAAAAACRIAAAAAAAAKEgAAAAAAAAAAAAAKEgAAAAAAAAsSAAAAAAAAAAAAAAsSAAAAAAAADBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACBIAAAAAAAAIEgAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": "get"
					},
					"BAAAAA0SAAAAAAAADhIAAAAAAAAAAAAADhIAAAAAAAAOEgAAAAAAABIAAABpc0N1cnJlbnRseVBsYXlpbmcOEgAAAAAAAA8SAAAAAAAAAAAAAA8SAAAAAAAAEBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADRIAAAAAAAAfEgAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"insert_completion",
					{
						"completion": "getCurrentGame",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "getCurrentGame"
					},
					"AgAAAA0SAAAAAAAADRIAAAAAAAADAAAAZ2V0DRIAAAAAAAAbEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEBIAAAAAAAAQEgAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": "of"
					},
					"AwAAACISAAAAAAAAIxIAAAAAAAAAAAAAIxIAAAAAAAAjEgAAAAAAAAQAAAB0aGVuIxIAAAAAAAAkEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhIAAAAAAAAmEgAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACQSAAAAAAAAJRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJBIAAAAAAAAkEgAAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					1,
					"left_delete",
					null,
					"AQAAACQSAAAAAAAAJBIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAJRIAAAAAAAAlEgAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": "Just"
					},
					"BQAAADESAAAAAAAAMhIAAAAAAAAAAAAAMhIAAAAAAAAyEgAAAAAAAAwAAABFbGVtZW50Lm5vbmUyEgAAAAAAADMSAAAAAAAAAAAAADMSAAAAAAAANBIAAAAAAAAAAAAANBIAAAAAAAA1EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMRIAAAAAAAA9EgAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					1,
					"insert",
					{
						"characters": " u"
					},
					"AgAAADUSAAAAAAAANhIAAAAAAAAAAAAANhIAAAAAAAA3EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANRIAAAAAAAA1EgAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"left_delete",
					null,
					"AQAAADYSAAAAAAAANhIAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAANxIAAAAAAAA3EgAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					1,
					"insert",
					{
						"characters": "cg"
					},
					"AgAAADYSAAAAAAAANxIAAAAAAAAAAAAANxIAAAAAAAA4EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANhIAAAAAAAA2EgAAAAAAAAAAAAAAAPC/"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAADgSAAAAAAAAORIAAAAAAAAAAAAAORIAAAAAAAA6EgAAAAAAAAAAAAA6EgAAAAAAADsSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOBIAAAAAAAA4EgAAAAAAAAAAAAAAAPC/"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADsSAAAAAAAAPBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOxIAAAAAAAA7EgAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAADwSAAAAAAAAPRIAAAAAAAAAAAAAPRIAAAAAAABJEgAAAAAAAAAAAABJEgAAAAAAAE0SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPBIAAAAAAAA8EgAAAAAAAAAAAAAAAPC/"
				],
				[
					240,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAADwSAAAAAAAAPRIAAAAAAAAAAAAAPRIAAAAAAABJEgAAAAAAAAAAAABJEgAAAAAAAE0SAAAAAAAAAAAAAE4SAAAAAAAAThIAAAAAAAAQAAAAICAgICAgICAgICAgICAgIA",
					"AQAAAAAAAAABAAAAPBIAAAAAAAA8EgAAAAAAAAAAAAAAAPC/"
				],
				[
					241,
					1,
					"paste",
					null,
					"AQAAAE0SAAAAAAAAqhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRIAAAAAAABNEgAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"left_delete",
					null,
					"AQAAAFYSAAAAAAAAVhIAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAVxIAAAAAAABXEgAAAAAAAAAAAAAAAPC/"
				],
				[
					245,
					1,
					"insert",
					{
						"characters": "cg"
					},
					"AgAAAFYSAAAAAAAAVxIAAAAAAAAAAAAAVxIAAAAAAABYEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVhIAAAAAAABWEgAAAAAAAAAAAAAAAPC/"
				],
				[
					252,
					1,
					"left_delete",
					null,
					"AQAAALgSAAAAAAAAuBIAAAAAAAAEAAAAZWxzZQ",
					"AQAAAAAAAAABAAAAuBIAAAAAAAC8EgAAAAAAAAAAAAAAAPC/"
				],
				[
					253,
					1,
					"insert",
					{
						"characters": "Nothi"
					},
					"BQAAALgSAAAAAAAAuRIAAAAAAAAAAAAAuRIAAAAAAAC6EgAAAAAAAAAAAAC6EgAAAAAAALsSAAAAAAAAAAAAALsSAAAAAAAAvBIAAAAAAAAAAAAAvBIAAAAAAAC9EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuBIAAAAAAAC4EgAAAAAAAAAAAAAAAPC/"
				],
				[
					254,
					1,
					"insert_completion",
					{
						"completion": "Nothing",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Nothing"
					},
					"AgAAALgSAAAAAAAAuBIAAAAAAAAFAAAATm90aGm4EgAAAAAAAL8SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvRIAAAAAAAC9EgAAAAAAAAAAAAAAAPC/"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAAL8SAAAAAAAAwBIAAAAAAAAAAAAAwBIAAAAAAADBEgAAAAAAAAAAAADBEgAAAAAAAMISAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvxIAAAAAAAC/EgAAAAAAAAAAAAAAAPC/"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMISAAAAAAAAwxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwhIAAAAAAADCEgAAAAAAAAAAAAAAAPC/"
				],
				[
					259,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAALgSAAAAAAAAuhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuBIAAAAAAAC4EgAAAAAAAAAAAAAAAPC/"
				],
				[
					260,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAAuhIAAAAAAAC6EgAAAAAAAAAAAAAAAPC/"
				],
				[
					264,
					1,
					"insert",
					{
						"characters": "Pla"
					},
					"AwAAAJsWAAAAAAAAnBYAAAAAAAAAAAAAnBYAAAAAAACdFgAAAAAAAAAAAACdFgAAAAAAAJ4WAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmxYAAAAAAACbFgAAAAAAAAAAAAAAAPC/"
				],
				[
					265,
					3,
					"left_delete",
					null,
					"AwAAAJ0WAAAAAAAAnRYAAAAAAAABAAAAYZwWAAAAAAAAnBYAAAAAAAABAAAAbJsWAAAAAAAAmxYAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAAnhYAAAAAAACeFgAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJAWAAAAAAAAkRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkBYAAAAAAACQFgAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": "gamesInL"
					},
					"CAAAAJAWAAAAAAAAkRYAAAAAAAAAAAAAkRYAAAAAAACSFgAAAAAAAAAAAACSFgAAAAAAAJMWAAAAAAAAAAAAAJMWAAAAAAAAlBYAAAAAAAAAAAAAlBYAAAAAAACVFgAAAAAAAAAAAACVFgAAAAAAAJYWAAAAAAAAAAAAAJYWAAAAAAAAlxYAAAAAAAAAAAAAlxYAAAAAAACYFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkBYAAAAAAACQFgAAAAAAAAAAAAAAAAAA"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": "obby"
					},
					"BAAAAJgWAAAAAAAAmRYAAAAAAAAAAAAAmRYAAAAAAACaFgAAAAAAAAAAAACaFgAAAAAAAJsWAAAAAAAAAAAAAJsWAAAAAAAAnBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmBYAAAAAAACYFgAAAAAAAAAAAAAAAPC/"
				],
				[
					274,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJwWAAAAAAAAnRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnBYAAAAAAACcFgAAAAAAAAAAAAAAAPC/"
				],
				[
					275,
					1,
					"left_delete",
					null,
					"AQAAAJwWAAAAAAAAnBYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAnRYAAAAAAACdFgAAAAAAAAAAAAAAAPC/"
				],
				[
					276,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAJwWAAAAAAAAnRYAAAAAAAAAAAAAnRYAAAAAAACeFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnBYAAAAAAACcFgAAAAAAAAAAAAAAAPC/"
				],
				[
					277,
					1,
					"insert",
					{
						"characters": " Fron"
					},
					"BQAAAJ4WAAAAAAAAnxYAAAAAAAAAAAAAnxYAAAAAAACgFgAAAAAAAAAAAACgFgAAAAAAAKEWAAAAAAAAAAAAAKEWAAAAAAAAohYAAAAAAAAAAAAAohYAAAAAAACjFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnhYAAAAAAACeFgAAAAAAAAAAAAAAAPC/"
				],
				[
					278,
					1,
					"insert_completion",
					{
						"completion": "FrontendModel",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "FrontendModel"
					},
					"AgAAAJ8WAAAAAAAAnxYAAAAAAAAEAAAARnJvbp8WAAAAAAAArBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoxYAAAAAAACjFgAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					5,
					"left_delete",
					null,
					"BQAAAKsWAAAAAAAAqxYAAAAAAAABAAAAbKoWAAAAAAAAqhYAAAAAAAABAAAAZakWAAAAAAAAqRYAAAAAAAABAAAAZKgWAAAAAAAAqBYAAAAAAAABAAAAb6cWAAAAAAAApxYAAAAAAAABAAAATQ",
					"AQAAAAAAAAABAAAArBYAAAAAAACsFgAAAAAAAAAAAAAAAPC/"
				],
				[
					280,
					1,
					"insert",
					{
						"characters": "Mo"
					},
					"AgAAAKcWAAAAAAAAqBYAAAAAAAAAAAAAqBYAAAAAAACpFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApxYAAAAAAACnFgAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					1,
					"insert_completion",
					{
						"completion": "FrontendModel",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "FrontendModel"
					},
					"AgAAAJ8WAAAAAAAAnxYAAAAAAAAKAAAARnJvbnRlbmRNb58WAAAAAAAArBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqRYAAAAAAACpFgAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKwWAAAAAAAArRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArBYAAAAAAACsFgAAAAAAAAAAAAAAAPC/"
				],
				[
					283,
					1,
					"left_delete",
					null,
					"AQAAAKwWAAAAAAAArBYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAArRYAAAAAAACtFgAAAAAAAAAAAAAAAPC/"
				],
				[
					284,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAAKwWAAAAAAAArRYAAAAAAAAAAAAArRYAAAAAAACuFgAAAAAAAAAAAACuFgAAAAAAAK8WAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArBYAAAAAAACsFgAAAAAAAAAAAAAAAPC/"
				],
				[
					285,
					1,
					"insert",
					{
						"characters": " Ma"
					},
					"AwAAAK8WAAAAAAAAsBYAAAAAAAAAAAAAsBYAAAAAAACxFgAAAAAAAAAAAACxFgAAAAAAALIWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArxYAAAAAAACvFgAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"insert_completion",
					{
						"completion": "Maybe",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Maybe"
					},
					"AgAAALAWAAAAAAAAsBYAAAAAAAACAAAATWGwFgAAAAAAALUWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAshYAAAAAAACyFgAAAAAAAAAAAAAAAPC/"
				],
				[
					287,
					8,
					"left_delete",
					null,
					"CAAAALQWAAAAAAAAtBYAAAAAAAABAAAAZbMWAAAAAAAAsxYAAAAAAAABAAAAYrIWAAAAAAAAshYAAAAAAAABAAAAebEWAAAAAAAAsRYAAAAAAAABAAAAYbAWAAAAAAAAsBYAAAAAAAABAAAATa8WAAAAAAAArxYAAAAAAAABAAAAIK4WAAAAAAAArhYAAAAAAAABAAAAPq0WAAAAAAAArRYAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAAtRYAAAAAAAC1FgAAAAAAAAAAAAAAAPC/"
				],
				[
					288,
					30,
					"left_delete",
					null,
					"HgAAAKwWAAAAAAAArBYAAAAAAAABAAAAIKsWAAAAAAAAqxYAAAAAAAABAAAAbKoWAAAAAAAAqhYAAAAAAAABAAAAZakWAAAAAAAAqRYAAAAAAAABAAAAZKgWAAAAAAAAqBYAAAAAAAABAAAAb6cWAAAAAAAApxYAAAAAAAABAAAATaYWAAAAAAAAphYAAAAAAAABAAAAZKUWAAAAAAAApRYAAAAAAAABAAAAbqQWAAAAAAAApBYAAAAAAAABAAAAZaMWAAAAAAAAoxYAAAAAAAABAAAAdKIWAAAAAAAAohYAAAAAAAABAAAAbqEWAAAAAAAAoRYAAAAAAAABAAAAb6AWAAAAAAAAoBYAAAAAAAABAAAAcp8WAAAAAAAAnxYAAAAAAAABAAAARp4WAAAAAAAAnhYAAAAAAAABAAAAIJ0WAAAAAAAAnRYAAAAAAAABAAAAOpwWAAAAAAAAnBYAAAAAAAABAAAAIJsWAAAAAAAAmxYAAAAAAAABAAAAeZoWAAAAAAAAmhYAAAAAAAABAAAAYpkWAAAAAAAAmRYAAAAAAAABAAAAYpgWAAAAAAAAmBYAAAAAAAABAAAAb5cWAAAAAAAAlxYAAAAAAAABAAAATJYWAAAAAAAAlhYAAAAAAAABAAAAbpUWAAAAAAAAlRYAAAAAAAABAAAASZQWAAAAAAAAlBYAAAAAAAABAAAAc5MWAAAAAAAAkxYAAAAAAAABAAAAZZIWAAAAAAAAkhYAAAAAAAABAAAAbZEWAAAAAAAAkRYAAAAAAAABAAAAYZAWAAAAAAAAkBYAAAAAAAABAAAAZ48WAAAAAAAAjxYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAArRYAAAAAAACtFgAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAAjxYAAAAAAACPFgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Types.elm",
			"settings":
			{
				"buffer_size": 7219,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					18,
					1,
					"insert",
					{
						"characters": "\n,"
					},
					"AwAAAPMCAAAAAAAA9AIAAAAAAAAAAAAA9AIAAAAAAAD4AgAAAAAAAAAAAAD4AgAAAAAAAPkCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wIAAAAAAADzAgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPkCAAAAAAAA+gIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QIAAAAAAAD5AgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"paste",
					null,
					"AQAAAPoCAAAAAAAABAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+gIAAAAAAAD6AgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAAQDAAAAAAAABQMAAAAAAAAAAAAABQMAAAAAAAAGAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAMAAAAAAAAEAwAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " Bol"
					},
					"BAAAAAYDAAAAAAAABwMAAAAAAAAAAAAABwMAAAAAAAAIAwAAAAAAAAAAAAAIAwAAAAAAAAkDAAAAAAAAAAAAAAkDAAAAAAAACgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgMAAAAAAAAGAwAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAoDAAAAAAAACwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgMAAAAAAAAKAwAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					2,
					"left_delete",
					null,
					"AgAAAAoDAAAAAAAACgMAAAAAAAABAAAAIAkDAAAAAAAACQMAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAACwMAAAAAAAALAwAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "ol"
					},
					"AgAAAAkDAAAAAAAACgMAAAAAAAAAAAAACgMAAAAAAAALAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQMAAAAAAAAJAwAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAACwMAAAAAAAALAwAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"left_delete",
					null,
					"AQAAAGUBAAAAAAAAZQEAAAAAAAAXAAAAICAgICwgbWVzc2FnZSA6IFN0cmluZwo",
					"AQAAAAAAAAABAAAAZQEAAAAAAAB8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAAcgEAAAAAAAByAQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "Maybe"
					},
					"BQAAAPACAAAAAAAA8QIAAAAAAAAAAAAA8QIAAAAAAADyAgAAAAAAAAAAAADyAgAAAAAAAPMCAAAAAAAAAAAAAPMCAAAAAAAA9AIAAAAAAAAAAAAA9AIAAAAAAAD1AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AIAAAAAAADwAgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPUCAAAAAAAA9gIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QIAAAAAAAD1AgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAPhsAAAAAAAA+GwAAbW9kdWxlIFR5cGVzIGV4cG9zaW5nICguLikKCmltcG9ydCBCcm93c2VyIGV4cG9zaW5nIChVcmxSZXF1ZXN0KQppbXBvcnQgQnJvd3Nlci5OYXZpZ2F0aW9uIGV4cG9zaW5nIChLZXkpCmltcG9ydCBDb2RlYwppbXBvcnQgRGljdCBleHBvc2luZyAoLi4pCmltcG9ydCBIdHRwCmltcG9ydCBKc29uLkRlY29kZSBhcyBECmltcG9ydCBMYW1kZXJhIGV4cG9zaW5nIChDbGllbnRJZCwgU2Vzc2lvbklkKQppbXBvcnQgUmFuZG9tIGV4cG9zaW5nIChTZWVkKQppbXBvcnQgVGltZSBleHBvc2luZyAoUG9zaXgpCmltcG9ydCBVcmwgZXhwb3NpbmcgKFVybCkKCgp0eXBlIGFsaWFzIEZyb250ZW5kTW9kZWwgPQogICAgeyBrZXkgOiBLZXkKICAgICwga2dnYW1lcyA6IERpY3QgSW50IEthbmppR3Vlc3NpbmdHYW1lCiAgICAsIHRoaXNQbGF5ZXIgOiBNYXliZSBQbGF5ZXIKICAgICwgcGxheWVycyA6IExpc3QgUGxheWVyCiAgICAsIGtnZ1dvcmRJbnB1dCA6IE1heWJlIFN0cmluZwogICAgLCBrZ2dXcm9uZ1dvcmRCdWZmZXIgOiBNYXliZSBTdHJpbmcKICAgICwga2dnQ29uZmlnSW5wdXRzIDoKICAgICAgICB7IGtnZ1JhbmRvbUthbmppSW5wdXQgOiBNYXliZSBTdHJpbmcKICAgICAgICAsIGtnZ1JvdW5kTGVuZ3RoSW5wdXQgOiBNYXliZSBTdHJpbmcKICAgICAgICAsIGtnZ1N0YXJ0aW5nQ291bnRkb3duSW5wdXQgOiBNYXliZSBTdHJpbmcKICAgICAgICB9CiAgICAsIGtnZ1N5bmNpbmcgOiBCb29sCiAgICAsIGlzRW1iZWRkZWQgOiBNYXliZSBCb29sCiAgICAsIG5vdyA6IFRpbWUuUG9zaXgKICAgIH0KCgp0eXBlIGFsaWFzIEJhY2tlbmRNb2RlbCA9CiAgICB7IG1lc3NhZ2UgOiBTdHJpbmcKICAgICwga2dnYW1lcyA6IERpY3QgSW50IEthbmppR3Vlc3NpbmdHYW1lCiAgICAsIHBsYXllcnMgOgogICAgICAgIERpY3QKICAgICAgICAgICAgU2Vzc2lvbklkCiAgICAgICAgICAgIHsgcGxheWVyIDogUGxheWVyCiAgICAgICAgICAgICwgcGhwU2Vzc2lvbklkIDogUGhwU2Vzc2lvbklkCiAgICAgICAgICAgIH0KICAgICwgc2VlZCA6IFNlZWQKICAgIH0KCgp0eXBlIGFsaWFzIFVzZXJuYW1lID0KICAgIFN0cmluZwoKCnR5cGUgYWxpYXMgUGhwU2Vzc2lvbklkID0KICAgIFN0cmluZwoKCnR5cGUgRnJvbnRlbmRNc2cKICAgID0gVXJsQ2xpY2tlZCBVcmxSZXF1ZXN0CiAgICB8IFVybENoYW5nZWQgVXJsCiAgICB8IEdvdEluZm9Gcm9tUGFyZW50IFN0cmluZwogICAgfCBHb3RJRnJhbWVUZXN0UmVzdWx0IFN0cmluZwogICAgfCBSZXFHZXRLZXkKICAgIHwgS2dnU2V0Q3VzdG9tS2FuamlTZXQgU3RyaW5nCiAgICB8IEtnZ1NldEthbmppU2V0IEthbmppU2V0IEludAogICAgfCBLZ2dTdGFydEdhbWUgR2FtZUlkCiAgICB8IEtnZ1dvcmRJbnB1dCBTdHJpbmcKICAgIHwgS2dnSG9zdEdhbWUKICAgIHwgS2dnSm9pbkdhbWUgSW50CiAgICB8IEtnZ0xlYXZlR2FtZSBJbnQKICAgIHwgS2dnU2VuZFdvcmQgR2FtZUlkCiAgICB8IEtnZ1JlcXVlc3ROZXh0S2FuamkgR2FtZUlkCiAgICB8IEdvdFRpbWVGIFRpbWUuUG9zaXgKICAgIHwgU2VuZFRvQmFja2VuZFdpdGhUaW1lIFRvQmFja2VuZAogICAgfCBOb09wRnJvbnRlbmRNc2cKCgp0eXBlIFRvQmFja2VuZAogICAgPSBHZXRLZXlzVEIKICAgIHwgUGxheWVySW5mb1N1Ym1pdHRlZFRCIFVzZXJuYW1lIFBocFNlc3Npb25JZAogICAgfCBDcmVhdGVHYW1lVEIgUGxheWVyIHsga2FuamlTZXQgOiBLYW5qaVNldCwgcm91bmRMZW5ndGggOiBJbnQsIHN0YXJ0aW5nQ291bnRkb3duIDogSW50IH0gVGltZS5Qb3NpeAogICAgfCBKb2luVEIgUGxheWVyIEdhbWVJZAogICAgfCBMZWF2ZVRCIFBsYXllciBHYW1lSWQKICAgIHwgVXBkYXRlQ29uZmlnVEIgR2FtZUlkIHsga2FuamlTZXQgOiBLYW5qaVNldCwgcm91bmRMZW5ndGggOiBJbnQsIHN0YXJ0aW5nQ291bnRkb3duIDogSW50IH0KICAgIHwgU3RhcnRUQiBHYW1lSWQgVGltZS5Qb3NpeAogICAgfCBSZXF1ZXN0TmV4dEthbmppVEIgR2FtZUlkIFBsYXllcgogICAgfCBBZGRXb3JkVEIgR2FtZUlkIFBsYXllciBTdHJpbmcKICAgIHwgTm9PcFRCCgoKdHlwZSBCYWNrZW5kTXNnCiAgICA9IENsaWVudENvbm5lY3RlZCBTZXNzaW9uSWQgQ2xpZW50SWQKICAgIHwgQ2xpZW50RGlzY29ubmVjdGVkIFNlc3Npb25JZCBDbGllbnRJZAogICAgfCBHb3RKTWRpY3RTZWFyY2hSZXN1bHRzIEdhbWVJZCBDaGFyIChSZXN1bHQgSHR0cC5FcnJvciAoTGlzdCBKYXBEaWN0RW50cnkpKQogICAgfCBHZXRLZXlzCiAgICB8IEdvdEtleXMgKFJlc3VsdCBIdHRwLkVycm9yIFN0cmluZykKICAgIHwgR290VGltZSBUaW1lLlBvc2l4CiAgICB8IFJ1bkdhbWVzIFRpbWUuUG9zaXgKICAgIHwgTm9PcEJhY2tlbmRNc2cKCgp0eXBlIFRvRnJvbnRlbmQKICAgID0gVG9Gcm9udGVuZE1zZ1RGIFN0cmluZwogICAgfCBHYW1lQnJvYWRjYXN0VEYgS2FuamlHdWVzc2luZ0dhbWUKICAgIHwgR2FtZVRpbWVzQnJvYWRjYXN0VEYKICAgICAgICB7IGdhbWVJZCA6IEdhbWVJZAogICAgICAgICwgbGFzdFVwZGF0ZWQgOiBJbnQKICAgICAgICAsIHRpbWVUaWxsR2FtZU92ZXIgOiBJbnQKICAgICAgICAsIHRpbWVUaWxsUm91bmRFbmQgOiBJbnQKICAgICAgICAsIGJ1ZmZlcmluZyA6IEJvb2wKICAgICAgICB9CiAgICB8IFdyb25nV29yZFRGIFN0cmluZwogICAgfCBQbGF5ZXJJbmZvUmVnaXN0ZXJlZFRGIFBsYXllcgogICAgfCBOb09wVEYKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCnR5cGUgU3RhdHVzCiAgICA9IEluaXRpYWwKICAgIHwgV2FpdGluZwogICAgfCBTdWNjZXNzCiAgICB8IEZhaWx1cmUKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCnR5cGUgYWxpYXMgUGxheWVyID0KICAgIHsgaWQgOiBDbGllbnRJZAogICAgLCBuYW1lIDogVXNlcm5hbWUKICAgIH0KCgp0eXBlIGFsaWFzIFBsYXllcklkID0KICAgIEludAoKCnR5cGUgYWxpYXMgR2FtZUlkID0KICAgIEludAoKCnR5cGUgYWxpYXMgS2FuamlHdWVzc2luZ0dhbWUgPQogICAgeyBnYW1lSWQgOiBJbnQKICAgICwgaG9zdCA6IFBsYXllcgogICAgLCBwbGF5ZXJzIDogTGlzdCBQbGF5ZXIKICAgICwgZ2FtZVN0YXRlIDogS0dHYW1lU3RhdGUKICAgICwgbGFzdFVwZGF0ZWQgOiBJbnQKICAgICwgYnVmZmVyaW5nIDogQm9vbAogICAgLCBpbml0aWFsQnVmZmVyIDogQm9vbAoKICAgIC0tLCByb3VuZExlbmd0aCA6IEludAogICAgfQoKCnR5cGUgS0dHYW1lU3RhdGUKICAgID0gTG9iYnkKICAgICAgICB7IGthbmppU2V0IDogS2FuamlTZXQKICAgICAgICAsIHJvdW5kTGVuZ3RoIDogSW50CiAgICAgICAgLCBzdGFydGluZ0NvdW50ZG93biA6IEludAogICAgICAgIH0KICAgIHwgSW5QbGF5CiAgICAgICAgeyBzY29yZSA6IEludAogICAgICAgICwgY3VycmVudEthbmppIDogQ2hhcgogICAgICAgICwgcmVtYWluaW5nS2FuamkgOiBMaXN0IENoYXIKICAgICAgICAsIGJ1ZmZlcmVkS2FuamkgOiBMaXN0IENoYXIKICAgICAgICAsIGthbmppU2VlbiA6IExpc3QgQ2hhcgogICAgICAgICwgd29yZHMgOiBEaWN0IENsaWVudElkIChMaXN0IFN0cmluZykKICAgICAgICAsIGFsbG93ZWRXb3JkcyA6IERpY3QgQ2hhciAoTGlzdCBTdHJpbmcpCiAgICAgICAgLCByZXF1ZXN0ZWRTa2lwIDogTGlzdCBQbGF5ZXIKICAgICAgICAsIHRpbWVUaWxsUm91bmRFbmQgOiBJbnQKICAgICAgICAsIHRpbWVUaWxsR2FtZU92ZXIgOiBJbnQKICAgICAgICAsIHJvdW5kTGVuZ3RoIDogSW50CiAgICAgICAgLCBzdGFydGluZ0NvdW50ZG93biA6IEludAogICAgICAgIH0KICAgIHwgVmljdG9yeSB7IHNjb3JlIDogSW50IH0KICAgIHwgR2FtZU92ZXIgeyBzY29yZSA6IEludCB9CgoKdHlwZSBLYW5qaVNldAogICAgPSBKbHB0U2V0IChMaXN0IEludCkKICAgIHwgQ3VzdG9tS2FuamlTZXQgKExpc3QgQ2hhcikKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCnR5cGUgYWxpYXMgS2FuamlkaWNFbnRyeSA9CiAgICB7IGthbmppIDogU3RyaW5nCiAgICAsIGNwVmFsdWVzIDogTGlzdCAoIFN0cmluZywgU3RyaW5nICkKICAgICwgcmFkVmFsdWVzIDogTGlzdCAoIFN0cmluZywgSW50ICkKCiAgICAtLSBtaXNjCiAgICAsIGdyYWRlIDogTWF5YmUgSW50CiAgICAsIHN0cm9rZUNvdW50IDogTGlzdCBJbnQKICAgICwgdmFyaWFudHMgOiBMaXN0ICggKCBTdHJpbmcsIFN0cmluZyApLCBNYXliZSBTdHJpbmcgKQogICAgLCBmcmVxIDogTWF5YmUgSW50CiAgICAsIHJhZE5hbWUgOiBMaXN0IFN0cmluZwogICAgLCBqbHB0IDogTWF5YmUgSW50CgogICAgLS0KICAgICwgZGljTnVtYmVyIDogTGlzdCAoIFN0cmluZywgU3RyaW5nICkKICAgICwgcXVlcnlDb2RlIDogTGlzdCAoIFN0cmluZywgU3RyaW5nICkKICAgICwgc2tpcE1pc3NjbGFzcyA6IExpc3QgKCBTdHJpbmcsIFN0cmluZyApCgogICAgLS0gcmVhZGluZy9tZWFuaW5nCiAgICAsIHJlYWRpbmdzIDogTGlzdCB7IHJUeXBlIDogU3RyaW5nLCBvblR5cGUgOiBNYXliZSBTdHJpbmcsIHJTdGF0dXMgOiBNYXliZSBTdHJpbmcsIHJlYWRpbmcgOiBTdHJpbmcgfQogICAgLCBtZWFuaW5ncyA6IExpc3QgKCBTdHJpbmcsIFN0cmluZyApCiAgICAsIG5hbm9yaSA6IExpc3QgU3RyaW5nCgogICAgLS0gY3VzdG9tIGZpZWxkcwogICAgLCBjb3JlTWVhbmluZ3MgOiBMaXN0ICggU3RyaW5nLCBTdHJpbmcgKQogICAgLCBleGFtcGxlcyA6IExpc3QgKCBTdHJpbmcsIFN0cmluZyApCiAgICAsIGRlY29tcG9zaXRpb24gOiBNYXliZSBTdHJpbmcKICAgICwgZXR5bW9sb2d5IDogTWF5YmUgeyBoaW50IDogTWF5YmUgU3RyaW5nLCBldHltIDogTWF5YmUgU3RyaW5nIH0KICAgIH0KCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLSBKTURpY3QKCgp0eXBlIGFsaWFzIEphcERpY3RFbnRyeSA9CiAgICB7IGVudF9zZXEgOiBJbnQKICAgICwga19lbGUgOiBMaXN0IEthbmppRWxlbWVudAogICAgLCByX2VsZSA6IExpc3QgUmVhZGluZ0VsZW1lbnQKICAgICwgc2Vuc2UgOiBMaXN0IFNlbnNlCiAgICAsIHNob3dpbmdFdmVyeVNlbnNlIDogQm9vbAogICAgfQoKCnR5cGUgYWxpYXMgS2FuamlFbGVtZW50ID0KICAgIHsga2ViIDogU3RyaW5nCiAgICAsIGtfaW5mIDogTGlzdCBTdHJpbmcKICAgICwga19wcmkgOiBMaXN0IFN0cmluZwogICAgfQoKCnR5cGUgYWxpYXMgUmVhZGluZ0VsZW1lbnQgPQogICAgeyByZWIgOiBTdHJpbmcKICAgICwgcmVfbm9rYW5qaSA6IEJvb2wKICAgICwgcmVfcmVzdHIgOiBMaXN0IFN0cmluZwogICAgLCByZV9pbmYgOiBMaXN0IFN0cmluZwogICAgLCByZV9wcmkgOiBMaXN0IFN0cmluZwogICAgfQoKCnR5cGUgYWxpYXMgU2Vuc2UgPQogICAgeyBzdGFnayA6IExpc3QgU3RyaW5nCiAgICAsIHN0YWdyIDogTGlzdCBTdHJpbmcKICAgICwgcG9zIDogTGlzdCBTdHJpbmcKICAgICwgeHJlZiA6IExpc3QgU3RyaW5nCiAgICAsIGFudCA6IExpc3QgU3RyaW5nCiAgICAsIGZpZWxkIDogTGlzdCBTdHJpbmcKICAgICwgbWlzYyA6IExpc3QgU3RyaW5nCiAgICAsIHNfaW5mIDogTGlzdCBTdHJpbmcKICAgICwgbHNvdXJjZSA6IExpc3QgTFNvdXJjZQogICAgLCBkaWFsIDogTGlzdCBTdHJpbmcKICAgICwgZ2xvc3MgOiBMaXN0IEdsb3NzCiAgICAsIGV4YW1wbGUgOiBMaXN0IEV4YW1wbGUKICAgIH0KCgp0eXBlIExTb3VyY2UKICAgID0gTFNvdXJjZQogICAgICAgIFN0cmluZwogICAgICAgIHsgeG1sTGFuZyA6IE1heWJlIFN0cmluZyAtLSBkZWYgZW5nCiAgICAgICAgLCBsc190eXBlIDogTWF5YmUgU3RyaW5nCiAgICAgICAgLCBsc193YXNlaSA6IEJvb2wKICAgICAgICB9CgoKdHlwZSBHbG9zcwogICAgPSBHbG9zcwogICAgICAgIFN0cmluZwogICAgICAgIHsgeG1sTGFuZyA6IE1heWJlIFN0cmluZyAtLSBkZWYgZW5nCiAgICAgICAgLCBnX2dlbmQgOiBNYXliZSBTdHJpbmcKICAgICAgICAsIGdfdHlwZSA6IE1heWJlIFN0cmluZwogICAgICAgIH0KCgp0eXBlIGFsaWFzIEV4YW1wbGUgPQogICAgeyBleF9zcmNlIDogU3RyaW5nCiAgICAsIGV4X3RleHQgOiBTdHJpbmcKICAgICwgZXhfc2VudCA6IExpc3QgRXhfc2VudAogICAgfQoKCnR5cGUgRXhfc2VudAogICAgPSBFeF9zZW50CiAgICAgICAgU3RyaW5nCiAgICAgICAgeyB4bWxMYW5nIDogTWF5YmUgU3RyaW5nCiAgICAgICAgLCBleF9zcmNlIDogTWF5YmUgU3RyaW5nCiAgICAgICAgfQoKCnR5cGUgSk1kaWN0TGFuZ3VhZ2UKICAgID0gU2VhcmNoSW5GcmVuY2gKICAgIHwgU2VhcmNoSW5FbmdsaXNoCiAgICB8IFNlYXJjaEV2ZXJ5dGhpbmcKCgp0eXBlIGFsaWFzIEpNZGljdEZyb21KYXBTZWFyY2ggPQogICAgeyBzZWFyY2hTdHIgOiBTdHJpbmcKICAgICwgaGFzS2FuamkgOiBCb29sCiAgICAsIHRhcmdldExhbmd1YWdlIDogSk1kaWN0TGFuZ3VhZ2UKICAgIH0KCgp0eXBlIGFsaWFzIEpNZGljdFRvSmFwU2VhcmNoID0KICAgIHsgc2VhcmNoU3RyIDogU3RyaW5nCiAgICAsIHRhcmdldExhbmd1YWdlIDogSk1kaWN0TGFuZ3VhZ2UKICAgIH0KCgp0eXBlIGFsaWFzIFRhdG9lYmFFeGFtcGxlID0KICAgIHsgdGV4dCA6IFN0cmluZwogICAgLCB0cmFuc2xhdGlvbnMgOiBMaXN0IFRhdG9lYmFUcmFuc2xhdGlvbgogICAgLCB0cmFuc2NyaXB0aW9ucyA6IExpc3QgVGF0b2ViYVRyYW5zY3JpcHRpb24KICAgIH0KCgp0eXBlIGFsaWFzIFRhdG9lYmFUcmFuc2xhdGlvbiA9CiAgICAoIFN0cmluZywgU3RyaW5nICkKCgp0eXBlIGFsaWFzIFRhdG9lYmFUcmFuc2NyaXB0aW9uID0KICAgIFN0cmluZwo",
					"AQAAAAAAAAABAAAA9gIAAAAAAAD2AgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGkBAAAAAAAAagEAAAAAAAAAAAAAagEAAAAAAABuAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQEAAAAAAABpAQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGkBAAAAAAAAagEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQEAAAAAAABpAQAAAAAAAAAAAAAAAERA"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " mess"
					},
					"BQAAAGoBAAAAAAAAawEAAAAAAAAAAAAAawEAAAAAAABsAQAAAAAAAAAAAABsAQAAAAAAAG0BAAAAAAAAAAAAAG0BAAAAAAAAbgEAAAAAAAAAAAAAbgEAAAAAAABvAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagEAAAAAAABqAQAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert_completion",
					{
						"completion": "message",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "message"
					},
					"AgAAAGsBAAAAAAAAawEAAAAAAAAEAAAAbWVzc2sBAAAAAAAAcgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwEAAAAAAABvAQAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAHIBAAAAAAAAcwEAAAAAAAAAAAAAcwEAAAAAAAB0AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgEAAAAAAAByAQAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHQBAAAAAAAAdQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAEAAAAAAAB0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAHUBAAAAAAAAdwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQEAAAAAAAB1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					2,
					"left_delete",
					null,
					"AgAAAHYBAAAAAAAAdgEAAAAAAAABAAAAInUBAAAAAAAAdQEAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAAdwEAAAAAAAB3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAHUBAAAAAAAAdgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQEAAAAAAAB1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert_completion",
					{
						"completion": "String",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "String"
					},
					"AgAAAHUBAAAAAAAAdQEAAAAAAAABAAAAU3UBAAAAAAAAewEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgEAAAAAAAB2AQAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAAewEAAAAAAAB7AQAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "\n|"
					},
					"AwAAAPsEAAAAAAAA/AQAAAAAAAAAAAAA/AQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAEFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+wQAAAAAAAD7BAAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " U"
					},
					"AgAAAAEFAAAAAAAAAgUAAAAAAAAAAAAAAgUAAAAAAAADBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQUAAAAAAAABBQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "sernae"
					},
					"BgAAAAMFAAAAAAAABAUAAAAAAAAAAAAABAUAAAAAAAAFBQAAAAAAAAAAAAAFBQAAAAAAAAYFAAAAAAAAAAAAAAYFAAAAAAAABwUAAAAAAAAAAAAABwUAAAAAAAAIBQAAAAAAAAAAAAAIBQAAAAAAAAkFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwUAAAAAAAADBQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAAkFAAAAAAAACgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQUAAAAAAAAJBQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"left_delete",
					null,
					"AQAAAAkFAAAAAAAACQUAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAACgUAAAAAAAAKBQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "ne"
					},
					"AgAAAAkFAAAAAAAACgUAAAAAAAAAAAAACgUAAAAAAAALBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQUAAAAAAAAJBQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					3,
					"left_delete",
					null,
					"AwAAAAoFAAAAAAAACgUAAAAAAAABAAAAZQkFAAAAAAAACQUAAAAAAAABAAAAbggFAAAAAAAACAUAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAACwUAAAAAAAALBQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "ne"
					},
					"AgAAAAgFAAAAAAAACQUAAAAAAAAAAAAACQUAAAAAAAAKBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAUAAAAAAAAIBQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					2,
					"left_delete",
					null,
					"AgAAAAkFAAAAAAAACQUAAAAAAAABAAAAZQgFAAAAAAAACAUAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAACgUAAAAAAAAKBQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "meInu"
					},
					"BQAAAAgFAAAAAAAACQUAAAAAAAAAAAAACQUAAAAAAAAKBQAAAAAAAAAAAAAKBQAAAAAAAAsFAAAAAAAAAAAAAAsFAAAAAAAADAUAAAAAAAAAAAAADAUAAAAAAAANBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAUAAAAAAAAIBQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"left_delete",
					null,
					"AQAAAAwFAAAAAAAADAUAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAADQUAAAAAAAANBQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "put"
					},
					"AwAAAAwFAAAAAAAADQUAAAAAAAAAAAAADQUAAAAAAAAOBQAAAAAAAAAAAAAOBQAAAAAAAA8FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAUAAAAAAAAMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": " S"
					},
					"AgAAAA8FAAAAAAAAEAUAAAAAAAAAAAAAEAUAAAAAAAARBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwUAAAAAAAAPBQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAABEFAAAAAAAAEgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQUAAAAAAAARBQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"left_delete",
					null,
					"AQAAABEFAAAAAAAAEQUAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAEgUAAAAAAAASBQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "tring"
					},
					"BQAAABEFAAAAAAAAEgUAAAAAAAAAAAAAEgUAAAAAAAATBQAAAAAAAAAAAAATBQAAAAAAABQFAAAAAAAAAAAAABQFAAAAAAAAFQUAAAAAAAAAAAAAFQUAAAAAAAAWBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQUAAAAAAAARBQAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABYFAAAAAAAAFwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgUAAAAAAAAWBQAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"left_delete",
					null,
					"AQAAABYFAAAAAAAAFgUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAFwUAAAAAAAAXBQAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "\n|"
					},
					"AwAAABYFAAAAAAAAFwUAAAAAAAAAAAAAFwUAAAAAAAAbBQAAAAAAAAAAAAAbBQAAAAAAABwFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgUAAAAAAAAWBQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " SendUse"
					},
					"CAAAABwFAAAAAAAAHQUAAAAAAAAAAAAAHQUAAAAAAAAeBQAAAAAAAAAAAAAeBQAAAAAAAB8FAAAAAAAAAAAAAB8FAAAAAAAAIAUAAAAAAAAAAAAAIAUAAAAAAAAhBQAAAAAAAAAAAAAhBQAAAAAAACIFAAAAAAAAAAAAACIFAAAAAAAAIwUAAAAAAAAAAAAAIwUAAAAAAAAkBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAUAAAAAAAAcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAACQFAAAAAAAAJQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAUAAAAAAAAkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					8,
					"left_delete",
					null,
					"CAAAACQFAAAAAAAAJAUAAAAAAAABAAAAciMFAAAAAAAAIwUAAAAAAAABAAAAZSIFAAAAAAAAIgUAAAAAAAABAAAAcyEFAAAAAAAAIQUAAAAAAAABAAAAVSAFAAAAAAAAIAUAAAAAAAABAAAAZB8FAAAAAAAAHwUAAAAAAAABAAAAbh4FAAAAAAAAHgUAAAAAAAABAAAAZR0FAAAAAAAAHQUAAAAAAAABAAAAUw",
					"AQAAAAAAAAABAAAAJQUAAAAAAAAlBQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "SendU"
					},
					"BQAAAB0FAAAAAAAAHgUAAAAAAAAAAAAAHgUAAAAAAAAfBQAAAAAAAAAAAAAfBQAAAAAAACAFAAAAAAAAAAAAACAFAAAAAAAAIQUAAAAAAAAAAAAAIQUAAAAAAAAiBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQUAAAAAAAAdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "ser"
					},
					"AwAAACIFAAAAAAAAIwUAAAAAAAAAAAAAIwUAAAAAAAAkBQAAAAAAAAAAAAAkBQAAAAAAACUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgUAAAAAAAAiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "\n,"
					},
					"AwAAAKYBAAAAAAAApwEAAAAAAAAAAAAApwEAAAAAAACrAQAAAAAAAAAAAACrAQAAAAAAAKwBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgEAAAAAAACmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": " user"
					},
					"BQAAAKwBAAAAAAAArQEAAAAAAAAAAAAArQEAAAAAAACuAQAAAAAAAAAAAACuAQAAAAAAAK8BAAAAAAAAAAAAAK8BAAAAAAAAsAEAAAAAAAAAAAAAsAEAAAAAAACxAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAEAAAAAAACsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert_completion",
					{
						"completion": "Username",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Username"
					},
					"AgAAAK0BAAAAAAAArQEAAAAAAAAEAAAAdXNlcq0BAAAAAAAAtQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQEAAAAAAACxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALUBAAAAAAAAtgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQEAAAAAAAC1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"left_delete",
					null,
					"AQAAAK0BAAAAAAAArQEAAAAAAAABAAAAVQ",
					"AQAAAAAAAAABAAAArgEAAAAAAACuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAK0BAAAAAAAArgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQEAAAAAAACtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAALYBAAAAAAAAtwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgEAAAAAAAC2AQAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": " Mayve"
					},
					"BgAAALcBAAAAAAAAuAEAAAAAAAAAAAAAuAEAAAAAAAC5AQAAAAAAAAAAAAC5AQAAAAAAALoBAAAAAAAAAAAAALoBAAAAAAAAuwEAAAAAAAAAAAAAuwEAAAAAAAC8AQAAAAAAAAAAAAC8AQAAAAAAAL0BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwEAAAAAAAC3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					2,
					"left_delete",
					null,
					"AgAAALwBAAAAAAAAvAEAAAAAAAABAAAAZbsBAAAAAAAAuwEAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAvQEAAAAAAAC9AQAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "be"
					},
					"AgAAALsBAAAAAAAAvAEAAAAAAAAAAAAAvAEAAAAAAAC9AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwEAAAAAAAC7AQAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " String"
					},
					"BwAAAL0BAAAAAAAAvgEAAAAAAAAAAAAAvgEAAAAAAAC/AQAAAAAAAAAAAAC/AQAAAAAAAMABAAAAAAAAAAAAAMABAAAAAAAAwQEAAAAAAAAAAAAAwQEAAAAAAADCAQAAAAAAAAAAAADCAQAAAAAAAMMBAAAAAAAAAAAAAMMBAAAAAAAAxAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQEAAAAAAAC9AQAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAnRsAAAAAAACdGwAAbW9kdWxlIFR5cGVzIGV4cG9zaW5nICguLikKCmltcG9ydCBCcm93c2VyIGV4cG9zaW5nIChVcmxSZXF1ZXN0KQppbXBvcnQgQnJvd3Nlci5OYXZpZ2F0aW9uIGV4cG9zaW5nIChLZXkpCmltcG9ydCBDb2RlYwppbXBvcnQgRGljdCBleHBvc2luZyAoLi4pCmltcG9ydCBIdHRwCmltcG9ydCBKc29uLkRlY29kZSBhcyBECmltcG9ydCBMYW1kZXJhIGV4cG9zaW5nIChDbGllbnRJZCwgU2Vzc2lvbklkKQppbXBvcnQgUmFuZG9tIGV4cG9zaW5nIChTZWVkKQppbXBvcnQgVGltZSBleHBvc2luZyAoUG9zaXgpCmltcG9ydCBVcmwgZXhwb3NpbmcgKFVybCkKCgp0eXBlIGFsaWFzIEZyb250ZW5kTW9kZWwgPQogICAgeyBrZXkgOiBLZXkKICAgICwgbWVzc2FnZSA6IFN0cmluZwogICAgLCBrZ2dhbWVzIDogRGljdCBJbnQgS2FuamlHdWVzc2luZ0dhbWUKICAgICwgdXNlcm5hbWUgOiBNYXliZSBTdHJpbmcKICAgICwgdGhpc1BsYXllciA6IE1heWJlIFBsYXllcgogICAgLCBwbGF5ZXJzIDogTGlzdCBQbGF5ZXIKICAgICwga2dnV29yZElucHV0IDogTWF5YmUgU3RyaW5nCiAgICAsIGtnZ1dyb25nV29yZEJ1ZmZlciA6IE1heWJlIFN0cmluZwogICAgLCBrZ2dDb25maWdJbnB1dHMgOgogICAgICAgIHsga2dnUmFuZG9tS2FuamlJbnB1dCA6IE1heWJlIFN0cmluZwogICAgICAgICwga2dnUm91bmRMZW5ndGhJbnB1dCA6IE1heWJlIFN0cmluZwogICAgICAgICwga2dnU3RhcnRpbmdDb3VudGRvd25JbnB1dCA6IE1heWJlIFN0cmluZwogICAgICAgIH0KICAgICwga2dnU3luY2luZyA6IEJvb2wKICAgICwgaXNFbWJlZGRlZCA6IE1heWJlIEJvb2wKICAgICwgbm93IDogVGltZS5Qb3NpeAogICAgfQoKCnR5cGUgYWxpYXMgQmFja2VuZE1vZGVsID0KICAgIHsgbWVzc2FnZSA6IFN0cmluZwogICAgLCBrZ2dhbWVzIDogRGljdCBJbnQgS2FuamlHdWVzc2luZ0dhbWUKICAgICwgcGxheWVycyA6CiAgICAgICAgRGljdAogICAgICAgICAgICBTZXNzaW9uSWQKICAgICAgICAgICAgeyBwbGF5ZXIgOiBQbGF5ZXIKICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgOiBQaHBTZXNzaW9uSWQKICAgICAgICAgICAgfQogICAgLCBzZWVkIDogU2VlZAogICAgfQoKCnR5cGUgYWxpYXMgVXNlcm5hbWUgPQogICAgU3RyaW5nCgoKdHlwZSBhbGlhcyBQaHBTZXNzaW9uSWQgPQogICAgU3RyaW5nCgoKdHlwZSBGcm9udGVuZE1zZwogICAgPSBVcmxDbGlja2VkIFVybFJlcXVlc3QKICAgIHwgVXJsQ2hhbmdlZCBVcmwKICAgIHwgR290SW5mb0Zyb21QYXJlbnQgU3RyaW5nCiAgICB8IEdvdElGcmFtZVRlc3RSZXN1bHQgU3RyaW5nCiAgICB8IFVzZXJuYW1lSW5wdXQgU3RyaW5nCiAgICB8IFNlbmRVc2VyCiAgICB8IFJlcUdldEtleQogICAgfCBLZ2dTZXRDdXN0b21LYW5qaVNldCBTdHJpbmcKICAgIHwgS2dnU2V0S2FuamlTZXQgS2FuamlTZXQgSW50CiAgICB8IEtnZ1N0YXJ0R2FtZSBHYW1lSWQKICAgIHwgS2dnV29yZElucHV0IFN0cmluZwogICAgfCBLZ2dIb3N0R2FtZQogICAgfCBLZ2dKb2luR2FtZSBJbnQKICAgIHwgS2dnTGVhdmVHYW1lIEludAogICAgfCBLZ2dTZW5kV29yZCBHYW1lSWQKICAgIHwgS2dnUmVxdWVzdE5leHRLYW5qaSBHYW1lSWQKICAgIHwgR290VGltZUYgVGltZS5Qb3NpeAogICAgfCBTZW5kVG9CYWNrZW5kV2l0aFRpbWUgVG9CYWNrZW5kCiAgICB8IE5vT3BGcm9udGVuZE1zZwoKCnR5cGUgVG9CYWNrZW5kCiAgICA9IEdldEtleXNUQgogICAgfCBQbGF5ZXJJbmZvU3VibWl0dGVkVEIgVXNlcm5hbWUgUGhwU2Vzc2lvbklkCiAgICB8IENyZWF0ZUdhbWVUQiBQbGF5ZXIgeyBrYW5qaVNldCA6IEthbmppU2V0LCByb3VuZExlbmd0aCA6IEludCwgc3RhcnRpbmdDb3VudGRvd24gOiBJbnQgfSBUaW1lLlBvc2l4CiAgICB8IEpvaW5UQiBQbGF5ZXIgR2FtZUlkCiAgICB8IExlYXZlVEIgUGxheWVyIEdhbWVJZAogICAgfCBVcGRhdGVDb25maWdUQiBHYW1lSWQgeyBrYW5qaVNldCA6IEthbmppU2V0LCByb3VuZExlbmd0aCA6IEludCwgc3RhcnRpbmdDb3VudGRvd24gOiBJbnQgfQogICAgfCBTdGFydFRCIEdhbWVJZCBUaW1lLlBvc2l4CiAgICB8IFJlcXVlc3ROZXh0S2FuamlUQiBHYW1lSWQgUGxheWVyCiAgICB8IEFkZFdvcmRUQiBHYW1lSWQgUGxheWVyIFN0cmluZwogICAgfCBOb09wVEIKCgp0eXBlIEJhY2tlbmRNc2cKICAgID0gQ2xpZW50Q29ubmVjdGVkIFNlc3Npb25JZCBDbGllbnRJZAogICAgfCBDbGllbnREaXNjb25uZWN0ZWQgU2Vzc2lvbklkIENsaWVudElkCiAgICB8IEdvdEpNZGljdFNlYXJjaFJlc3VsdHMgR2FtZUlkIENoYXIgKFJlc3VsdCBIdHRwLkVycm9yIChMaXN0IEphcERpY3RFbnRyeSkpCiAgICB8IEdldEtleXMKICAgIHwgR290S2V5cyAoUmVzdWx0IEh0dHAuRXJyb3IgU3RyaW5nKQogICAgfCBHb3RUaW1lIFRpbWUuUG9zaXgKICAgIHwgUnVuR2FtZXMgVGltZS5Qb3NpeAogICAgfCBOb09wQmFja2VuZE1zZwoKCnR5cGUgVG9Gcm9udGVuZAogICAgPSBUb0Zyb250ZW5kTXNnVEYgU3RyaW5nCiAgICB8IEdhbWVCcm9hZGNhc3RURiBLYW5qaUd1ZXNzaW5nR2FtZQogICAgfCBHYW1lVGltZXNCcm9hZGNhc3RURgogICAgICAgIHsgZ2FtZUlkIDogR2FtZUlkCiAgICAgICAgLCBsYXN0VXBkYXRlZCA6IEludAogICAgICAgICwgdGltZVRpbGxHYW1lT3ZlciA6IEludAogICAgICAgICwgdGltZVRpbGxSb3VuZEVuZCA6IEludAogICAgICAgICwgYnVmZmVyaW5nIDogQm9vbAogICAgICAgIH0KICAgIHwgV3JvbmdXb3JkVEYgU3RyaW5nCiAgICB8IFBsYXllckluZm9SZWdpc3RlcmVkVEYgUGxheWVyCiAgICB8IE5vT3BURgoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKdHlwZSBTdGF0dXMKICAgID0gSW5pdGlhbAogICAgfCBXYWl0aW5nCiAgICB8IFN1Y2Nlc3MKICAgIHwgRmFpbHVyZQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKdHlwZSBhbGlhcyBQbGF5ZXIgPQogICAgeyBpZCA6IENsaWVudElkCiAgICAsIG5hbWUgOiBVc2VybmFtZQogICAgfQoKCnR5cGUgYWxpYXMgUGxheWVySWQgPQogICAgSW50CgoKdHlwZSBhbGlhcyBHYW1lSWQgPQogICAgSW50CgoKdHlwZSBhbGlhcyBLYW5qaUd1ZXNzaW5nR2FtZSA9CiAgICB7IGdhbWVJZCA6IEludAogICAgLCBob3N0IDogUGxheWVyCiAgICAsIHBsYXllcnMgOiBMaXN0IFBsYXllcgogICAgLCBnYW1lU3RhdGUgOiBLR0dhbWVTdGF0ZQogICAgLCBsYXN0VXBkYXRlZCA6IEludAogICAgLCBidWZmZXJpbmcgOiBCb29sCiAgICAsIGluaXRpYWxCdWZmZXIgOiBCb29sCgogICAgLS0sIHJvdW5kTGVuZ3RoIDogSW50CiAgICB9CgoKdHlwZSBLR0dhbWVTdGF0ZQogICAgPSBMb2JieQogICAgICAgIHsga2FuamlTZXQgOiBLYW5qaVNldAogICAgICAgICwgcm91bmRMZW5ndGggOiBJbnQKICAgICAgICAsIHN0YXJ0aW5nQ291bnRkb3duIDogSW50CiAgICAgICAgfQogICAgfCBJblBsYXkKICAgICAgICB7IHNjb3JlIDogSW50CiAgICAgICAgLCBjdXJyZW50S2FuamkgOiBDaGFyCiAgICAgICAgLCByZW1haW5pbmdLYW5qaSA6IExpc3QgQ2hhcgogICAgICAgICwgYnVmZmVyZWRLYW5qaSA6IExpc3QgQ2hhcgogICAgICAgICwga2FuamlTZWVuIDogTGlzdCBDaGFyCiAgICAgICAgLCB3b3JkcyA6IERpY3QgQ2xpZW50SWQgKExpc3QgU3RyaW5nKQogICAgICAgICwgYWxsb3dlZFdvcmRzIDogRGljdCBDaGFyIChMaXN0IFN0cmluZykKICAgICAgICAsIHJlcXVlc3RlZFNraXAgOiBMaXN0IFBsYXllcgogICAgICAgICwgdGltZVRpbGxSb3VuZEVuZCA6IEludAogICAgICAgICwgdGltZVRpbGxHYW1lT3ZlciA6IEludAogICAgICAgICwgcm91bmRMZW5ndGggOiBJbnQKICAgICAgICAsIHN0YXJ0aW5nQ291bnRkb3duIDogSW50CiAgICAgICAgfQogICAgfCBWaWN0b3J5IHsgc2NvcmUgOiBJbnQgfQogICAgfCBHYW1lT3ZlciB7IHNjb3JlIDogSW50IH0KCgp0eXBlIEthbmppU2V0CiAgICA9IEpscHRTZXQgKExpc3QgSW50KQogICAgfCBDdXN0b21LYW5qaVNldCAoTGlzdCBDaGFyKQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKdHlwZSBhbGlhcyBLYW5qaWRpY0VudHJ5ID0KICAgIHsga2FuamkgOiBTdHJpbmcKICAgICwgY3BWYWx1ZXMgOiBMaXN0ICggU3RyaW5nLCBTdHJpbmcgKQogICAgLCByYWRWYWx1ZXMgOiBMaXN0ICggU3RyaW5nLCBJbnQgKQoKICAgIC0tIG1pc2MKICAgICwgZ3JhZGUgOiBNYXliZSBJbnQKICAgICwgc3Ryb2tlQ291bnQgOiBMaXN0IEludAogICAgLCB2YXJpYW50cyA6IExpc3QgKCAoIFN0cmluZywgU3RyaW5nICksIE1heWJlIFN0cmluZyApCiAgICAsIGZyZXEgOiBNYXliZSBJbnQKICAgICwgcmFkTmFtZSA6IExpc3QgU3RyaW5nCiAgICAsIGpscHQgOiBNYXliZSBJbnQKCiAgICAtLQogICAgLCBkaWNOdW1iZXIgOiBMaXN0ICggU3RyaW5nLCBTdHJpbmcgKQogICAgLCBxdWVyeUNvZGUgOiBMaXN0ICggU3RyaW5nLCBTdHJpbmcgKQogICAgLCBza2lwTWlzc2NsYXNzIDogTGlzdCAoIFN0cmluZywgU3RyaW5nICkKCiAgICAtLSByZWFkaW5nL21lYW5pbmcKICAgICwgcmVhZGluZ3MgOiBMaXN0IHsgclR5cGUgOiBTdHJpbmcsIG9uVHlwZSA6IE1heWJlIFN0cmluZywgclN0YXR1cyA6IE1heWJlIFN0cmluZywgcmVhZGluZyA6IFN0cmluZyB9CiAgICAsIG1lYW5pbmdzIDogTGlzdCAoIFN0cmluZywgU3RyaW5nICkKICAgICwgbmFub3JpIDogTGlzdCBTdHJpbmcKCiAgICAtLSBjdXN0b20gZmllbGRzCiAgICAsIGNvcmVNZWFuaW5ncyA6IExpc3QgKCBTdHJpbmcsIFN0cmluZyApCiAgICAsIGV4YW1wbGVzIDogTGlzdCAoIFN0cmluZywgU3RyaW5nICkKICAgICwgZGVjb21wb3NpdGlvbiA6IE1heWJlIFN0cmluZwogICAgLCBldHltb2xvZ3kgOiBNYXliZSB7IGhpbnQgOiBNYXliZSBTdHJpbmcsIGV0eW0gOiBNYXliZSBTdHJpbmcgfQogICAgfQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIEpNRGljdAoKCnR5cGUgYWxpYXMgSmFwRGljdEVudHJ5ID0KICAgIHsgZW50X3NlcSA6IEludAogICAgLCBrX2VsZSA6IExpc3QgS2FuamlFbGVtZW50CiAgICAsIHJfZWxlIDogTGlzdCBSZWFkaW5nRWxlbWVudAogICAgLCBzZW5zZSA6IExpc3QgU2Vuc2UKICAgICwgc2hvd2luZ0V2ZXJ5U2Vuc2UgOiBCb29sCiAgICB9CgoKdHlwZSBhbGlhcyBLYW5qaUVsZW1lbnQgPQogICAgeyBrZWIgOiBTdHJpbmcKICAgICwga19pbmYgOiBMaXN0IFN0cmluZwogICAgLCBrX3ByaSA6IExpc3QgU3RyaW5nCiAgICB9CgoKdHlwZSBhbGlhcyBSZWFkaW5nRWxlbWVudCA9CiAgICB7IHJlYiA6IFN0cmluZwogICAgLCByZV9ub2thbmppIDogQm9vbAogICAgLCByZV9yZXN0ciA6IExpc3QgU3RyaW5nCiAgICAsIHJlX2luZiA6IExpc3QgU3RyaW5nCiAgICAsIHJlX3ByaSA6IExpc3QgU3RyaW5nCiAgICB9CgoKdHlwZSBhbGlhcyBTZW5zZSA9CiAgICB7IHN0YWdrIDogTGlzdCBTdHJpbmcKICAgICwgc3RhZ3IgOiBMaXN0IFN0cmluZwogICAgLCBwb3MgOiBMaXN0IFN0cmluZwogICAgLCB4cmVmIDogTGlzdCBTdHJpbmcKICAgICwgYW50IDogTGlzdCBTdHJpbmcKICAgICwgZmllbGQgOiBMaXN0IFN0cmluZwogICAgLCBtaXNjIDogTGlzdCBTdHJpbmcKICAgICwgc19pbmYgOiBMaXN0IFN0cmluZwogICAgLCBsc291cmNlIDogTGlzdCBMU291cmNlCiAgICAsIGRpYWwgOiBMaXN0IFN0cmluZwogICAgLCBnbG9zcyA6IExpc3QgR2xvc3MKICAgICwgZXhhbXBsZSA6IExpc3QgRXhhbXBsZQogICAgfQoKCnR5cGUgTFNvdXJjZQogICAgPSBMU291cmNlCiAgICAgICAgU3RyaW5nCiAgICAgICAgeyB4bWxMYW5nIDogTWF5YmUgU3RyaW5nIC0tIGRlZiBlbmcKICAgICAgICAsIGxzX3R5cGUgOiBNYXliZSBTdHJpbmcKICAgICAgICAsIGxzX3dhc2VpIDogQm9vbAogICAgICAgIH0KCgp0eXBlIEdsb3NzCiAgICA9IEdsb3NzCiAgICAgICAgU3RyaW5nCiAgICAgICAgeyB4bWxMYW5nIDogTWF5YmUgU3RyaW5nIC0tIGRlZiBlbmcKICAgICAgICAsIGdfZ2VuZCA6IE1heWJlIFN0cmluZwogICAgICAgICwgZ190eXBlIDogTWF5YmUgU3RyaW5nCiAgICAgICAgfQoKCnR5cGUgYWxpYXMgRXhhbXBsZSA9CiAgICB7IGV4X3NyY2UgOiBTdHJpbmcKICAgICwgZXhfdGV4dCA6IFN0cmluZwogICAgLCBleF9zZW50IDogTGlzdCBFeF9zZW50CiAgICB9CgoKdHlwZSBFeF9zZW50CiAgICA9IEV4X3NlbnQKICAgICAgICBTdHJpbmcKICAgICAgICB7IHhtbExhbmcgOiBNYXliZSBTdHJpbmcKICAgICAgICAsIGV4X3NyY2UgOiBNYXliZSBTdHJpbmcKICAgICAgICB9CgoKdHlwZSBKTWRpY3RMYW5ndWFnZQogICAgPSBTZWFyY2hJbkZyZW5jaAogICAgfCBTZWFyY2hJbkVuZ2xpc2gKICAgIHwgU2VhcmNoRXZlcnl0aGluZwoKCnR5cGUgYWxpYXMgSk1kaWN0RnJvbUphcFNlYXJjaCA9CiAgICB7IHNlYXJjaFN0ciA6IFN0cmluZwogICAgLCBoYXNLYW5qaSA6IEJvb2wKICAgICwgdGFyZ2V0TGFuZ3VhZ2UgOiBKTWRpY3RMYW5ndWFnZQogICAgfQoKCnR5cGUgYWxpYXMgSk1kaWN0VG9KYXBTZWFyY2ggPQogICAgeyBzZWFyY2hTdHIgOiBTdHJpbmcKICAgICwgdGFyZ2V0TGFuZ3VhZ2UgOiBKTWRpY3RMYW5ndWFnZQogICAgfQoKCnR5cGUgYWxpYXMgVGF0b2ViYUV4YW1wbGUgPQogICAgeyB0ZXh0IDogU3RyaW5nCiAgICAsIHRyYW5zbGF0aW9ucyA6IExpc3QgVGF0b2ViYVRyYW5zbGF0aW9uCiAgICAsIHRyYW5zY3JpcHRpb25zIDogTGlzdCBUYXRvZWJhVHJhbnNjcmlwdGlvbgogICAgfQoKCnR5cGUgYWxpYXMgVGF0b2ViYVRyYW5zbGF0aW9uID0KICAgICggU3RyaW5nLCBTdHJpbmcgKQoKCnR5cGUgYWxpYXMgVGF0b2ViYVRyYW5zY3JpcHRpb24gPQogICAgU3RyaW5nCg",
					"AQAAAAAAAAABAAAAdwEAAAAAAAB3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAdwEAAAAAAAB3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAdwEAAAAAAAB3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAdwEAAAAAAAB3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAdwEAAAAAAAB3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "\n|"
					},
					"AwAAAO0GAAAAAAAA7gYAAAAAAAAAAAAA7gYAAAAAAADyBgAAAAAAAAAAAADyBgAAAAAAAPMGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QYAAAAAAADtBgAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPMGAAAAAAAA9AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wYAAAAAAADzBgAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"paste",
					null,
					"AQAAAPQGAAAAAAAAEgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AYAAAAAAAD0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAAsgcAAAAAAACyBwAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAE0DAAAAAAAATgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQMAAAAAAABNAwAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": "type"
					},
					"BAAAAE4DAAAAAAAATwMAAAAAAAAAAAAATwMAAAAAAABQAwAAAAAAAAAAAABQAwAAAAAAAFEDAAAAAAAAAAAAAFEDAAAAAAAAUgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgMAAAAAAABOAwAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": " Front"
					},
					"BgAAAFIDAAAAAAAAUwMAAAAAAAAAAAAAUwMAAAAAAABUAwAAAAAAAAAAAABUAwAAAAAAAFUDAAAAAAAAAAAAAFUDAAAAAAAAVgMAAAAAAAAAAAAAVgMAAAAAAABXAwAAAAAAAAAAAABXAwAAAAAAAFgDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgMAAAAAAABSAwAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": "EndSta"
					},
					"BgAAAFgDAAAAAAAAWQMAAAAAAAAAAAAAWQMAAAAAAABaAwAAAAAAAAAAAABaAwAAAAAAAFsDAAAAAAAAAAAAAFsDAAAAAAAAXAMAAAAAAAAAAAAAXAMAAAAAAABdAwAAAAAAAAAAAABdAwAAAAAAAF4DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAMAAAAAAABYAwAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "tus"
					},
					"AwAAAF4DAAAAAAAAXwMAAAAAAAAAAAAAXwMAAAAAAABgAwAAAAAAAAAAAABgAwAAAAAAAGEDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgMAAAAAAABeAwAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGEDAAAAAAAAYgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQMAAAAAAABhAwAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"left_delete",
					null,
					"AQAAAGEDAAAAAAAAYQMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAYgMAAAAAAABiAwAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAGEDAAAAAAAAYgMAAAAAAAAAAAAAYgMAAAAAAABjAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQMAAAAAAABhAwAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGMDAAAAAAAAZAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwMAAAAAAABjAwAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"left_delete",
					null,
					"AQAAAGMDAAAAAAAAYwMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAZAMAAAAAAABkAwAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGMDAAAAAAAAZAMAAAAAAAAAAAAAZAMAAAAAAABoAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwMAAAAAAABjAwAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "WaitingFo"
					},
					"CQAAAGgDAAAAAAAAaQMAAAAAAAAAAAAAaQMAAAAAAABqAwAAAAAAAAAAAABqAwAAAAAAAGsDAAAAAAAAAAAAAGsDAAAAAAAAbAMAAAAAAAAAAAAAbAMAAAAAAABtAwAAAAAAAAAAAABtAwAAAAAAAG4DAAAAAAAAAAAAAG4DAAAAAAAAbwMAAAAAAAAAAAAAbwMAAAAAAABwAwAAAAAAAAAAAABwAwAAAAAAAHEDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAMAAAAAAABoAwAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "rEm"
					},
					"AwAAAHEDAAAAAAAAcgMAAAAAAAAAAAAAcgMAAAAAAABzAwAAAAAAAAAAAABzAwAAAAAAAHQDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQMAAAAAAABxAwAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "bedTest"
					},
					"BwAAAHQDAAAAAAAAdQMAAAAAAAAAAAAAdQMAAAAAAAB2AwAAAAAAAAAAAAB2AwAAAAAAAHcDAAAAAAAAAAAAAHcDAAAAAAAAeAMAAAAAAAAAAAAAeAMAAAAAAAB5AwAAAAAAAAAAAAB5AwAAAAAAAHoDAAAAAAAAAAAAAHoDAAAAAAAAewMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAMAAAAAAAB0AwAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHsDAAAAAAAAfAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewMAAAAAAAB7AwAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"left_delete",
					null,
					"AQAAAHsDAAAAAAAAewMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAfAMAAAAAAAB8AwAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": "\n|"
					},
					"AwAAAHsDAAAAAAAAfAMAAAAAAAAAAAAAfAMAAAAAAACAAwAAAAAAAAAAAACAAwAAAAAAAIEDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewMAAAAAAAB7AwAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIEDAAAAAAAAggMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQMAAAAAAACBAwAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "Waiting"
					},
					"BwAAAIIDAAAAAAAAgwMAAAAAAAAAAAAAgwMAAAAAAACEAwAAAAAAAAAAAACEAwAAAAAAAIUDAAAAAAAAAAAAAIUDAAAAAAAAhgMAAAAAAAAAAAAAhgMAAAAAAACHAwAAAAAAAAAAAACHAwAAAAAAAIgDAAAAAAAAAAAAAIgDAAAAAAAAiQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggMAAAAAAACCAwAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "ForP"
					},
					"BAAAAIkDAAAAAAAAigMAAAAAAAAAAAAAigMAAAAAAACLAwAAAAAAAAAAAACLAwAAAAAAAIwDAAAAAAAAAAAAAIwDAAAAAAAAjQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQMAAAAAAACJAwAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "layerIn"
					},
					"BwAAAI0DAAAAAAAAjgMAAAAAAAAAAAAAjgMAAAAAAACPAwAAAAAAAAAAAACPAwAAAAAAAJADAAAAAAAAAAAAAJADAAAAAAAAkQMAAAAAAAAAAAAAkQMAAAAAAACSAwAAAAAAAAAAAACSAwAAAAAAAJMDAAAAAAAAAAAAAJMDAAAAAAAAlAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQMAAAAAAACNAwAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "fo"
					},
					"AgAAAJQDAAAAAAAAlQMAAAAAAAAAAAAAlQMAAAAAAACWAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAMAAAAAAACUAwAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJYDAAAAAAAAlwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgMAAAAAAACWAwAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"left_delete",
					null,
					"AQAAAJYDAAAAAAAAlgMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAlwMAAAAAAACXAwAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "\n|"
					},
					"AwAAAJYDAAAAAAAAlwMAAAAAAAAAAAAAlwMAAAAAAACbAwAAAAAAAAAAAACbAwAAAAAAAJwDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgMAAAAAAACWAwAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": " Wa"
					},
					"AwAAAJwDAAAAAAAAnQMAAAAAAAAAAAAAnQMAAAAAAACeAwAAAAAAAAAAAACeAwAAAAAAAJ8DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAMAAAAAAACcAwAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "iting"
					},
					"BQAAAJ8DAAAAAAAAoAMAAAAAAAAAAAAAoAMAAAAAAAChAwAAAAAAAAAAAAChAwAAAAAAAKIDAAAAAAAAAAAAAKIDAAAAAAAAowMAAAAAAAAAAAAAowMAAAAAAACkAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwMAAAAAAACfAwAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": "For"
					},
					"AwAAAKQDAAAAAAAApQMAAAAAAAAAAAAApQMAAAAAAACmAwAAAAAAAAAAAACmAwAAAAAAAKcDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAMAAAAAAACkAwAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKcDAAAAAAAAqAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwMAAAAAAACnAwAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"left_delete",
					null,
					"AQAAAKcDAAAAAAAApwMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAqAMAAAAAAACoAwAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "Initial"
					},
					"BwAAAKcDAAAAAAAAqAMAAAAAAAAAAAAAqAMAAAAAAACpAwAAAAAAAAAAAACpAwAAAAAAAKoDAAAAAAAAAAAAAKoDAAAAAAAAqwMAAAAAAAAAAAAAqwMAAAAAAACsAwAAAAAAAAAAAACsAwAAAAAAAK0DAAAAAAAAAAAAAK0DAAAAAAAArgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwMAAAAAAACnAwAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "GamesN"
					},
					"BgAAAK4DAAAAAAAArwMAAAAAAAAAAAAArwMAAAAAAACwAwAAAAAAAAAAAACwAwAAAAAAALEDAAAAAAAAAAAAALEDAAAAAAAAsgMAAAAAAAAAAAAAsgMAAAAAAACzAwAAAAAAAAAAAACzAwAAAAAAALQDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgMAAAAAAACuAwAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"left_delete",
					null,
					"AQAAALMDAAAAAAAAswMAAAAAAAABAAAATg",
					"AQAAAAAAAAABAAAAtAMAAAAAAAC0AwAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": "Broad"
					},
					"BQAAALMDAAAAAAAAtAMAAAAAAAAAAAAAtAMAAAAAAAC1AwAAAAAAAAAAAAC1AwAAAAAAALYDAAAAAAAAAAAAALYDAAAAAAAAtwMAAAAAAAAAAAAAtwMAAAAAAAC4AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswMAAAAAAACzAwAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "cast"
					},
					"BAAAALgDAAAAAAAAuQMAAAAAAAAAAAAAuQMAAAAAAAC6AwAAAAAAAAAAAAC6AwAAAAAAALsDAAAAAAAAAAAAALsDAAAAAAAAvAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAMAAAAAAAC4AwAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALwDAAAAAAAAvQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAMAAAAAAAC8AwAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"left_delete",
					null,
					"AQAAALwDAAAAAAAAvAMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAvQMAAAAAAAC9AwAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALwDAAAAAAAAvQMAAAAAAAAAAAAAvQMAAAAAAADBAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAMAAAAAAAC8AwAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": "|"
					},
					"AQAAAMEDAAAAAAAAwgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQMAAAAAAADBAwAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"left_delete",
					null,
					"AQAAAMEDAAAAAAAAwQMAAAAAAAABAAAAfA",
					"AQAAAAAAAAABAAAAwgMAAAAAAADCAwAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "\n,"
					},
					"BAAAAKYBAAAAAAAApwEAAAAAAAAAAAAApwEAAAAAAACrAQAAAAAAAAAAAADCAwAAAAAAAMIDAAAAAAAABAAAACAgICCrAQAAAAAAAKwBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgEAAAAAAACmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": " fron"
					},
					"BQAAAKwBAAAAAAAArQEAAAAAAAAAAAAArQEAAAAAAACuAQAAAAAAAAAAAACuAQAAAAAAAK8BAAAAAAAAAAAAAK8BAAAAAAAAsAEAAAAAAAAAAAAAsAEAAAAAAACxAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAEAAAAAAACsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": "tEnd"
					},
					"BAAAALEBAAAAAAAAsgEAAAAAAAAAAAAAsgEAAAAAAACzAQAAAAAAAAAAAACzAQAAAAAAALQBAAAAAAAAAAAAALQBAAAAAAAAtQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQEAAAAAAACxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert_completion",
					{
						"completion": "FrontEndStatus",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "FrontEndStatus"
					},
					"AgAAAK0BAAAAAAAArQEAAAAAAAAIAAAAZnJvbnRFbmStAQAAAAAAALsBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQEAAAAAAAC1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"left_delete",
					null,
					"AQAAAK0BAAAAAAAArQEAAAAAAAABAAAARg",
					"AQAAAAAAAAABAAAArgEAAAAAAACuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAK0BAAAAAAAArgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQEAAAAAAACtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"left_delete",
					null,
					"AQAAAK0BAAAAAAAArQEAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAArgEAAAAAAACuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAK0BAAAAAAAArgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQEAAAAAAACtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAALsBAAAAAAAAvAEAAAAAAAAAAAAAvAEAAAAAAAC9AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwEAAAAAAAC7AQAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL0BAAAAAAAAvgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQEAAAAAAAC9AQAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"left_delete",
					null,
					"AQAAAKcBAAAAAAAApwEAAAAAAAAYAAAAICAgICwgZnJvbnRFbmRTdGF0dXMgOiAK",
					"AQAAAAAAAAABAAAApwEAAAAAAAC/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAApwEAAAAAAACnAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/ApiCalls.elm",
			"settings":
			{
				"buffer_size": 20668,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAFwNAAAAAAAAXA0AAAAAAAACAAAALS0",
					"AQAAAAAAAAABAAAAdw0AAAAAAAB3DQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAACYNAAAAAAAAKA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPA0AAAAAAAA8DQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAAPg0AAAAAAAA+DQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAACYNAAAAAAAAJg0AAAAAAAACAAAALS0",
					"AQAAAAAAAAABAAAARQ0AAAAAAABFDQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAF0NAAAAAAAAXw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQ0AAAAAAAB5DQAAAAAAAAAAAAAAoHRA"
				],
				[
					21,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAAew0AAAAAAAB7DQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACENAAAAAAAAIg0AAAAAAAAAAAAAIg0AAAAAAAAmDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQ0AAAAAAAAhDQAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"paste",
					null,
					"AQAAACYNAAAAAAAATA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJg0AAAAAAAAmDQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAADsNAAAAAAAAPw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOw0AAAAAAAA7DQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BgAAAFANAAAAAAAAUQ0AAAAAAAAAAAAAUQ0AAAAAAABZDQAAAAAAAAAAAABZDQAAAAAAAF0NAAAAAAAAAAAAAF0NAAAAAAAAXg0AAAAAAAAAAAAAXg0AAAAAAABqDQAAAAAAAAAAAABRDQAAAAAAAFENAAAAAAAADAAAACAgICAgICAgICAgIA",
					"AQAAAAAAAAABAAAAUA0AAAAAAABQDQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AQAAAFoNAAAAAAAAWg0AAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAXg0AAAAAAABeDQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"paste",
					null,
					"AQAAAFoNAAAAAAAAbA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWg0AAAAAAABaDQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAHENAAAAAAAAdQ0AAAAAAAAAAAAAdQ0AAAAAAAB5DQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQ0AAAAAAABxDQAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAFANAAAAAAAAUQ0AAAAAAAAAAAAAUQ0AAAAAAABZDQAAAAAAAAAAAABZDQAAAAAAAF0NAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUA0AAAAAAABQDQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"paste",
					null,
					"AQAAAF0NAAAAAAAAeQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQ0AAAAAAABdDQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"left_delete",
					null,
					"AQAAANgNAAAAAAAA2A0AAAAAAABEAAAALS0iaHR0cHM6Ly93d3cudW1pbm9raXJpbi5jb20iCi0tImh0dHBzOi8vd3d3LnVtaW5va2lyaW4ubG9jYWw6ODA4MyI",
					"AQAAAAAAAAABAAAAHA4AAAAAAADYDQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAA2A0AAAAAAADYDQAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "imo"
					},
					"AwAAAKABAAAAAAAAoQEAAAAAAAAAAAAAoQEAAAAAAACiAQAAAAAAAAAAAACiAQAAAAAAAKMBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAEAAAAAAACgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"left_delete",
					null,
					"AQAAAKIBAAAAAAAAogEAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAowEAAAAAAACjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "port"
					},
					"BAAAAKIBAAAAAAAAowEAAAAAAAAAAAAAowEAAAAAAACkAQAAAAAAAAAAAACkAQAAAAAAAKUBAAAAAAAAAAAAAKUBAAAAAAAApgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogEAAAAAAACiAQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " Env"
					},
					"BAAAAKYBAAAAAAAApwEAAAAAAAAAAAAApwEAAAAAAACoAQAAAAAAAAAAAACoAQAAAAAAAKkBAAAAAAAAAAAAAKkBAAAAAAAAqgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgEAAAAAAACmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"elm_format",
					null,
					"",
					"AQAAAAAAAAABAAAAqgEAAAAAAACqAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Backend.elm",
			"settings":
			{
				"buffer_size": 3934,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAF4GAAAAAAAAXwYAAAAAAAAAAAAAXwYAAAAAAABrBgAAAAAAAAAAAABrBgAAAAAAAGwGAAAAAAAAAAAAAGwGAAAAAAAAeAYAAAAAAAAAAAAAXwYAAAAAAABfBgAAAAAAAAwAAAAgICAgICAgICAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeBgAAAAAAAF4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"left_delete",
					null,
					"AQAAAGgGAAAAAAAAaAYAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsBgAAAAAAAGwGAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAGgGAAAAAAAAeQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoBgAAAAAAAGgGAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " dva;"
					},
					"BQAAAHkGAAAAAAAAegYAAAAAAAAAAAAAegYAAAAAAAB7BgAAAAAAAAAAAAB7BgAAAAAAAHwGAAAAAAAAAAAAAHwGAAAAAAAAfQYAAAAAAAAAAAAAfQYAAAAAAAB+BgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5BgAAAAAAAHkGAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH4GAAAAAAAAfwYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+BgAAAAAAAH4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					2,
					"left_delete",
					null,
					"AgAAAH4GAAAAAAAAfgYAAAAAAAABAAAAIH0GAAAAAAAAfQYAAAAAAAABAAAAOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/BgAAAAAAAH8GAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAH0GAAAAAAAAfgYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9BgAAAAAAAH0GAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAAH4GAAAAAAAAfwYAAAAAAAAAAAAAfwYAAAAAAACABgAAAAAAAAAAAACABgAAAAAAAIEGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+BgAAAAAAAH4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIEGAAAAAAAAggYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBBgAAAAAAAIEGAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAIIGAAAAAAAAgwYAAAAAAAAAAAAAgwYAAAAAAACLBgAAAAAAAAAAAACLBgAAAAAAAI8GAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCBgAAAAAAAIIGAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"paste",
					null,
					"AQAAAI8GAAAAAAAAmQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPBgAAAAAAAI8GAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " model"
					},
					"BgAAAJkGAAAAAAAAmgYAAAAAAAAAAAAAmgYAAAAAAACbBgAAAAAAAAAAAACbBgAAAAAAAJwGAAAAAAAAAAAAAJwGAAAAAAAAnQYAAAAAAAAAAAAAnQYAAAAAAACeBgAAAAAAAAAAAACeBgAAAAAAAJ8GAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZBgAAAAAAAJkGAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " dVal"
					},
					"BQAAAJ8GAAAAAAAAoAYAAAAAAAAAAAAAoAYAAAAAAAChBgAAAAAAAAAAAAChBgAAAAAAAKIGAAAAAAAAAAAAAKIGAAAAAAAAowYAAAAAAAAAAAAAowYAAAAAAACkBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfBgAAAAAAAJ8GAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAmA8AAAAAAACbDwAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIEdvdEluZm9Gcm9tUGFyZW50IGR2YWwgLT4gCiAgICAgICAgICAgIGZyb21QYXJlbnQgbW9kZWwgZFZhbAoKICAgICAgICAtLWJyb2FkY2FzdCAoTWVzc2FnZVJlY2VpdmVkIChMZWZ0IGNsaWVudElkKSkgKQogICAgICAgIEdvdEpNZGljdFNlYXJjaFJlc3VsdHMgZ2FtZUlkIGthbmppIHJlcyAtPgogICAgICAgICAgICBnb3RKTWRpY3RTZWFyY2hSZXN1bHRzIG1vZGVsIGdhbWVJZCBrYW5qaSByZXMKCiAgICAgICAgR2V0S2V5cyAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQuYmF0Y2ggWyBnZXRLYW5qaUtleXMgXSApCgogICAgICAgIEdvdEtleXMgcmVzIC0+CiAgICAgICAgICAgIGxldAogICAgICAgICAgICAgICAgZCA9CiAgICAgICAgICAgICAgICAgICAgRGVidWcubG9nICJ0ZXN0IiByZXMKICAgICAgICAgICAgaW4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkBgAAAAAAAKQGAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"left_delete",
					null,
					"AQAAALQHAAAAAAAAtAcAAAAAAABPAAAAbGV0CiAgICAgICAgICAgICAgICBkID0KICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5sb2cgInRlc3QiIHJlcwogICAgICAgICAgICBpbg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0BwAAAAAAAAMIAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAPA8AAAAAAABLDwAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIEdvdEluZm9Gcm9tUGFyZW50IGR2YWwgLT4KICAgICAgICAgICAgZnJvbVBhcmVudCBtb2RlbCBkVmFsCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgCiAgICAgICAgICAgIGNhc2UgcmVzIG9mCiAgICAgICAgICAgICAgICBPayBzIC0+CiAgICAgICAgICAgICAgICAgICAgKCB7IG1vZGVsIHwgbWVzc2FnZSA9IHMgfQogICAgICAgICAgICAgICAgICAgICwgYnJvYWRjYXN0IChUb0Zyb250ZW5kTXNnVEYgcykKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgRXJyIGUgLT4KICAgICAgICAgICAgICAgICAgICAoIG1vZGVsCiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiAoaHR0cEVycm9yVG9TdHJpbmcgZSkpCiAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICBHb3RUaW1lIHBvc2l4IC0+CiAgICAgICAgICAgICggeyBtb2RlbCB8IHNlZWQgPSBSYW5kb20uaW5pdGlhbFNlZWQgKFRpbWUucG9zaXhUb01pbGxpcyBwb3NpeCkgfSwgQ21kLm5vbmUgKQoKICAgICAgICBSdW5HYW1lcyBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZXMgbW9kZWwgbm93CgogICAgICAgIE5vT3BCYWNrZW5kTXNnIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgp1cGRhdGVGcm9tRnJvbnRlbmQgOiBTZXNzaW9uSWQgLT4gQ2xpZW50SWQgLT4gVG9CYWNrZW5kIC0+IE1vZGVsIC0+ICggTW9kZWwsIENtZCBCYWNrZW5kTXNnICkKdXBkYXRlRnJvbUZyb250ZW5kIHNlc3Npb25JZCBjbGllbnRJZCBtc2cgbW9kZWwgPQogICAgY2FzZSBtc2cgb2YKICAgICAgICBHZXRLZXlzVEIgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKICAgICAgICBDcmVhdGVHYW1lVEIgaG9zdCBjb25maWcgbm93IC0+CiAgICAgICAgICAgIGNyZWF0ZUdhbWUgbW9kZWwgbm93IGhvc3QgY29uZmlnCgogICAgICAgIEpvaW5UQiBwbGF5ZXIgZ2FtZUlkIC0+CiAgICAgICAgICAgIGpvaW5HYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgTGVhdmVUQiBwbGF5ZXIgZ2FtZUlkIC0+CiAgICAgICAgICAgIGxlYXZlR2FtZSBtb2RlbCBwbGF5ZXIgZ2FtZUlkCgogICAgICAgIFVwZGF0ZUNvbmZpZ1RCIGdhbWVJZCBjb25maWcgLT4KICAgICAgICAgICAgdXBkYXRlQ29uZmlnIG1vZGVsIGdhbWVJZCBjb25maWcKCiAgICAgICAgU3RhcnRUQiBnYW1lSWQgbm93IC0+CiAgICAgICAgICAgIHJ1bkdhbWUgbW9kZWwgbm93IGdhbWVJZAoKICAgICAgICBSZXF1ZXN0TmV4dEthbmppVEIgZ2FtZUlkIHBsYXllciAtPgogICAgICAgICAgICByZXF1ZXN0TmV4dEthbmppIG1vZGVsIGdhbWVJZCBwbGF5ZXIKCiAgICAgICAgQWRkV29yZFRCIGdhbWVJZCBwbGF5ZXIgd29yZCAtPgogICAgICAgICAgICBhZGRXb3JkIG1vZGVsIGdhbWVJZCBwbGF5ZXIgd29yZAoKICAgICAgICBQbGF5ZXJJbmZvU3VibWl0dGVkVEIgdXNlcm5hbWUgcGhwU2Vzc2lvbklkIC0+CiAgICAgICAgICAgICggeyBtb2RlbAogICAgICAgICAgICAgICAgfCBwbGF5ZXJzID0KICAgICAgICAgICAgICAgICAgICBEaWN0Lmluc2VydCBzZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgeyBwbGF5ZXIgPSB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICAgICAgICAgICAgICwgcGhwU2Vzc2lvbklkID0gcGhwU2Vzc2lvbklkCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwucGxheWVycwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgLCBMYW1kZXJhLnNlbmRUb0Zyb250ZW5kIGNsaWVudElkIDx8IFBsYXllckluZm9SZWdpc3RlcmVkVEYgeyBuYW1lID0gdXNlcm5hbWUsIGlkID0gY2xpZW50SWQgfQogICAgICAgICAgICApCgogICAgICAgIE5vT3BUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0K",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0BwAAAAAAALQHAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAAHsGAAAAAAAAewYAAAAAAAABAAAAdg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8BgAAAAAAAHwGAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "V"
					},
					"AQAAAHsGAAAAAAAAfAYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7BgAAAAAAAHsGAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAPA8AAAAAAAA+DwAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIEdvdEluZm9Gcm9tUGFyZW50IGRWYWwgLT4KICAgICAgICAgICAgZnJvbVBhcmVudCBtb2RlbCBkVmFsCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8BgAAAAAAAHwGAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"cut",
					null,
					"AQAAAGgGAAAAAAAAaAYAAAAAAAA7AAAAR290SW5mb0Zyb21QYXJlbnQgZFZhbCAtPgogICAgICAgICAgICBmcm9tUGFyZW50IG1vZGVsIGRWYWw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoBgAAAAAAAKMGAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAA9w4AAAAAAAADDwAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIAoKICAgICAgICAtLWJyb2FkY2FzdCAoTWVzc2FnZVJlY2VpdmVkIChMZWZ0IGNsaWVudElkKSkgKQogICAgICAgIEdvdEpNZGljdFNlYXJjaFJlc3VsdHMgZ2FtZUlkIGthbmppIHJlcyAtPgogICAgICAgICAgICBnb3RKTWRpY3RTZWFyY2hSZXN1bHRzIG1vZGVsIGdhbWVJZCBrYW5qaSByZXMKCiAgICAgICAgR2V0S2V5cyAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQuYmF0Y2ggWyBnZXRLYW5qaUtleXMgXSApCgogICAgICAgIEdvdEtleXMgcmVzIC0+CiAgICAgICAgICAgIGNhc2UgcmVzIG9mCiAgICAgICAgICAgICAgICBPayBzIC0+CiAgICAgICAgICAgICAgICAgICAgKCB7IG1vZGVsIHwgbWVzc2FnZSA9IHMgfQogICAgICAgICAgICAgICAgICAgICwgYnJvYWRjYXN0IChUb0Zyb250ZW5kTXNnVEYgcykKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgRXJyIGUgLT4KICAgICAgICAgICAgICAgICAgICAoIG1vZGVsCiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiAoaHR0cEVycm9yVG9TdHJpbmcgZSkpCiAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICBHb3RUaW1lIHBvc2l4IC0+CiAgICAgICAgICAgICggeyBtb2RlbCB8IHNlZWQgPSBSYW5kb20uaW5pdGlhbFNlZWQgKFRpbWUucG9zaXhUb01pbGxpcyBwb3NpeCkgfSwgQ21kLm5vbmUgKQoKICAgICAgICBSdW5HYW1lcyBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZXMgbW9kZWwgbm93CgogICAgICAgIE5vT3BCYWNrZW5kTXNnIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgp1cGRhdGVGcm9tRnJvbnRlbmQgOiBTZXNzaW9uSWQgLT4gQ2xpZW50SWQgLT4gVG9CYWNrZW5kIC0+IE1vZGVsIC0+ICggTW9kZWwsIENtZCBCYWNrZW5kTXNnICkKdXBkYXRlRnJvbUZyb250ZW5kIHNlc3Npb25JZCBjbGllbnRJZCBtc2cgbW9kZWwgPQogICAgY2FzZSBtc2cgb2YKICAgICAgICBHZXRLZXlzVEIgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKICAgICAgICBDcmVhdGVHYW1lVEIgaG9zdCBjb25maWcgbm93IC0+CiAgICAgICAgICAgIGNyZWF0ZUdhbWUgbW9kZWwgbm93IGhvc3QgY29uZmlnCgogICAgICAgIEpvaW5UQiBwbGF5ZXIgZ2FtZUlkIC0+CiAgICAgICAgICAgIGpvaW5HYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgTGVhdmVUQiBwbGF5ZXIgZ2FtZUlkIC0+CiAgICAgICAgICAgIGxlYXZlR2FtZSBtb2RlbCBwbGF5ZXIgZ2FtZUlkCgogICAgICAgIFVwZGF0ZUNvbmZpZ1RCIGdhbWVJZCBjb25maWcgLT4KICAgICAgICAgICAgdXBkYXRlQ29uZmlnIG1vZGVsIGdhbWVJZCBjb25maWcKCiAgICAgICAgU3RhcnRUQiBnYW1lSWQgbm93IC0+CiAgICAgICAgICAgIHJ1bkdhbWUgbW9kZWwgbm93IGdhbWVJZAoKICAgICAgICBSZXF1ZXN0TmV4dEthbmppVEIgZ2FtZUlkIHBsYXllciAtPgogICAgICAgICAgICByZXF1ZXN0TmV4dEthbmppIG1vZGVsIGdhbWVJZCBwbGF5ZXIKCiAgICAgICAgQWRkV29yZFRCIGdhbWVJZCBwbGF5ZXIgd29yZCAtPgogICAgICAgICAgICBhZGRXb3JkIG1vZGVsIGdhbWVJZCBwbGF5ZXIgd29yZAoKICAgICAgICBQbGF5ZXJJbmZvU3VibWl0dGVkVEIgdXNlcm5hbWUgcGhwU2Vzc2lvbklkIC0+CiAgICAgICAgICAgICggeyBtb2RlbAogICAgICAgICAgICAgICAgfCBwbGF5ZXJzID0KICAgICAgICAgICAgICAgICAgICBEaWN0Lmluc2VydCBzZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgeyBwbGF5ZXIgPSB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICAgICAgICAgICAgICwgcGhwU2Vzc2lvbklkID0gcGhwU2Vzc2lvbklkCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwucGxheWVycwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgLCBMYW1kZXJhLnNlbmRUb0Zyb250ZW5kIGNsaWVudElkIDx8IFBsYXllckluZm9SZWdpc3RlcmVkVEYgeyBuYW1lID0gdXNlcm5hbWUsIGlkID0gY2xpZW50SWQgfQogICAgICAgICAgICApCgogICAgICAgIE5vT3BUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgoKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0K",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoBgAAAAAAAGgGAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeBgAAAAAAAF4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeBgAAAAAAAF4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeBgAAAAAAAF4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeBgAAAAAAAF4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeBgAAAAAAAF4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeBgAAAAAAAF4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeBgAAAAAAAF4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAAAAAAAAAAAA9w4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeBgAAAAAAAF4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgYAAAAAAABeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgYAAAAAAABeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgYAAAAAAABeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5DgAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKCiAgICAgICAgTm9PcFRCIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5ub25lICkKCgoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoAAAAAAAAAAPcOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgYAAAAAAABeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHAOAAAAAAAAcQ4AAAAAAAAAAAAAcQ4AAAAAAAB9DgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcA4AAAAAAABwDgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"left_delete",
					null,
					"AQAAAHkOAAAAAAAAeQ4AAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAfQ4AAAAAAAB9DgAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "Request"
					},
					"BwAAAHkOAAAAAAAAeg4AAAAAAAAAAAAAeg4AAAAAAAB7DgAAAAAAAAAAAAB7DgAAAAAAAHwOAAAAAAAAAAAAAHwOAAAAAAAAfQ4AAAAAAAAAAAAAfQ4AAAAAAAB+DgAAAAAAAAAAAAB+DgAAAAAAAH8OAAAAAAAAAAAAAH8OAAAAAAAAgA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQ4AAAAAAAB5DgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "Initila"
					},
					"BwAAAIAOAAAAAAAAgQ4AAAAAAAAAAAAAgQ4AAAAAAACCDgAAAAAAAAAAAACCDgAAAAAAAIMOAAAAAAAAAAAAAIMOAAAAAAAAhA4AAAAAAAAAAAAAhA4AAAAAAACFDgAAAAAAAAAAAACFDgAAAAAAAIYOAAAAAAAAAAAAAIYOAAAAAAAAhw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgA4AAAAAAACADgAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					2,
					"left_delete",
					null,
					"AgAAAIYOAAAAAAAAhg4AAAAAAAABAAAAYYUOAAAAAAAAhQ4AAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAhw4AAAAAAACHDgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "alGames"
					},
					"BwAAAIUOAAAAAAAAhg4AAAAAAAAAAAAAhg4AAAAAAACHDgAAAAAAAAAAAACHDgAAAAAAAIgOAAAAAAAAAAAAAIgOAAAAAAAAiQ4AAAAAAAAAAAAAiQ4AAAAAAACKDgAAAAAAAAAAAACKDgAAAAAAAIsOAAAAAAAAAAAAAIsOAAAAAAAAjA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQ4AAAAAAACFDgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "Bor"
					},
					"AwAAAIwOAAAAAAAAjQ4AAAAAAAAAAAAAjQ4AAAAAAACODgAAAAAAAAAAAACODgAAAAAAAI8OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjA4AAAAAAACMDgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					2,
					"left_delete",
					null,
					"AgAAAI4OAAAAAAAAjg4AAAAAAAABAAAAco0OAAAAAAAAjQ4AAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAjw4AAAAAAACPDgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "road"
					},
					"BAAAAI0OAAAAAAAAjg4AAAAAAAAAAAAAjg4AAAAAAACPDgAAAAAAAAAAAACPDgAAAAAAAJAOAAAAAAAAAAAAAJAOAAAAAAAAkQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQ4AAAAAAACNDgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "CastT"
					},
					"BQAAAJEOAAAAAAAAkg4AAAAAAAAAAAAAkg4AAAAAAACTDgAAAAAAAAAAAACTDgAAAAAAAJQOAAAAAAAAAAAAAJQOAAAAAAAAlQ4AAAAAAAAAAAAAlQ4AAAAAAACWDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQ4AAAAAAACRDgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAJYOAAAAAAAAlw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlg4AAAAAAACWDgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"left_delete",
					null,
					"AQAAAJYOAAAAAAAAlg4AAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAlw4AAAAAAACXDgAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "B"
					},
					"AQAAAJYOAAAAAAAAlw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlg4AAAAAAACWDgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJcOAAAAAAAAmA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlw4AAAAAAACXDgAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAJgOAAAAAAAAmQ4AAAAAAAAAAAAAmQ4AAAAAAACaDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmA4AAAAAAACYDgAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJoOAAAAAAAAmw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmg4AAAAAAACaDgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAJsOAAAAAAAAnA4AAAAAAAAAAAAAnA4AAAAAAACkDgAAAAAAAAAAAACkDgAAAAAAAKgOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmw4AAAAAAACbDgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKgOAAAAAAAAqg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqA4AAAAAAACoDgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "model,"
					},
					"BgAAAKkOAAAAAAAAqg4AAAAAAAAAAAAAqg4AAAAAAACrDgAAAAAAAAAAAACrDgAAAAAAAKwOAAAAAAAAAAAAAKwOAAAAAAAArQ4AAAAAAAAAAAAArQ4AAAAAAACuDgAAAAAAAAAAAACuDgAAAAAAAK8OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQ4AAAAAAACpDgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK8OAAAAAAAAsA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArw4AAAAAAACvDgAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "ini"
					},
					"AwAAALAOAAAAAAAAsQ4AAAAAAAAAAAAAsQ4AAAAAAACyDgAAAAAAAAAAAACyDgAAAAAAALMOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsA4AAAAAAACwDgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					2,
					"left_delete",
					null,
					"AgAAALIOAAAAAAAAsg4AAAAAAAABAAAAabEOAAAAAAAAsQ4AAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAsw4AAAAAAACzDgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAALAOAAAAAAAAsA4AAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAsQ4AAAAAAACxDgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"paste",
					null,
					"AQAAALAOAAAAAAAAxQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsA4AAAAAAACwDgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " model"
					},
					"BgAAAMUOAAAAAAAAxg4AAAAAAAAAAAAAxg4AAAAAAADHDgAAAAAAAAAAAADHDgAAAAAAAMgOAAAAAAAAAAAAAMgOAAAAAAAAyQ4AAAAAAAAAAAAAyQ4AAAAAAADKDgAAAAAAAAAAAADKDgAAAAAAAMsOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQ4AAAAAAADFDgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " cl"
					},
					"AwAAAMsOAAAAAAAAzA4AAAAAAAAAAAAAzA4AAAAAAADNDgAAAAAAAAAAAADNDgAAAAAAAM4OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyw4AAAAAAADLDgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert_completion",
					{
						"completion": "clientId",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "clientId"
					},
					"AgAAAMwOAAAAAAAAzA4AAAAAAAACAAAAY2zMDgAAAAAAANQOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzg4AAAAAAADODgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"elm_format",
					null,
					"AQAAAAAAAAAAAAAAXg8AAAAAAABeDwAAbW9kdWxlIEJhY2tlbmQgZXhwb3NpbmcgKC4uKQoKLS1pbXBvcnQgRGVidWdBcHAKLS1pbXBvcnQgRGVidWdneS5BcHAKCmltcG9ydCBBcGlDYWxscyBleHBvc2luZyAoLi4pCmltcG9ydCBEZWxheQppbXBvcnQgRGljdAppbXBvcnQgR2FtZSBleHBvc2luZyAoLi4pCmltcG9ydCBIZWxwZXJzIGV4cG9zaW5nICguLikKaW1wb3J0IExhbWRlcmEgZXhwb3NpbmcgKENsaWVudElkLCBTZXNzaW9uSWQsIGJyb2FkY2FzdCwgc2VuZFRvRnJvbnRlbmQpCmltcG9ydCBSYW5kb20KaW1wb3J0IFRhc2sKaW1wb3J0IFRpbWUKaW1wb3J0IFR5cGVzIGV4cG9zaW5nICguLikKCgp0eXBlIGFsaWFzIE1vZGVsID0KICAgIEJhY2tlbmRNb2RlbAoKCmFwcCA9CiAgICBMYW1kZXJhLmJhY2tlbmQKICAgICAgICAtLU5vT3BCYWNrZW5kTXNnCiAgICAgICAgLS0iMjIzODEzOGZkMTU2MGI0YyIKICAgICAgICB7IGluaXQgPSBpbml0CiAgICAgICAgLCB1cGRhdGUgPSB1cGRhdGUKICAgICAgICAsIHVwZGF0ZUZyb21Gcm9udGVuZCA9IHVwZGF0ZUZyb21Gcm9udGVuZAogICAgICAgICwgc3Vic2NyaXB0aW9ucyA9CiAgICAgICAgICAgIFxtIC0+CiAgICAgICAgICAgICAgICBpZiBnYW1lc1J1bm5pbmcgbSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGltZS5ldmVyeSAxMDAwIFJ1bkdhbWVzCgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFN1Yi5ub25lCiAgICAgICAgfQoKCmluaXQgOiAoIE1vZGVsLCBDbWQgQmFja2VuZE1zZyApCmluaXQgPQogICAgKCB7IG1lc3NhZ2UgPSAiIgogICAgICAsIGtnZ2FtZXMgPSBEaWN0LmVtcHR5CiAgICAgICwgcGxheWVycyA9IERpY3QuZW1wdHkKICAgICAgLCBzZWVkID0gUmFuZG9tLmluaXRpYWxTZWVkIDAKICAgICAgfQogICAgICAtLSwgZ2V0V29yZHMgJ+iqnicKICAgICAgLS0sIENtZC5ub25lCiAgICAsIENtZC5iYXRjaAogICAgICAgIFsgVGFzay5wZXJmb3JtIEdvdFRpbWUgVGltZS5ub3cgXQogICAgKQoKCnVwZGF0ZSA6IEJhY2tlbmRNc2cgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGUgbXNnIG1vZGVsID0KICAgIGNhc2UgbXNnIG9mCiAgICAgICAgLS0gQSBuZXcgY2xpZW50IGhhcyBqb2luZWQhIFNlbmQgdGhlbSBoaXN0b3J5LCBhbmQgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnRDb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAtLXttb2RlbCB8IHBsYXllcnMgPX0KICAgICAgICAgICAgLCBDbWQuYmF0Y2ggW10KICAgICAgICAgICAgICAtLVsgYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKEpvaW5lZCBjbGllbnRJZCkpCiAgICAgICAgICAgICAgLS0sIHNlbmRUb0Zyb250ZW5kIGNsaWVudElkIChIaXN0b3J5UmVjZWl2ZWQgbW9kZWwubWVzc2FnZXMpCiAgICAgICAgICAgICAgLS1dCiAgICAgICAgICAgICkKCiAgICAgICAgLS0gQSBjbGllbnQgaGFzIGRpc2Nvbm5lY3RlZCwgbGV0IGV2ZXJ5b25lIGtub3cKICAgICAgICBDbGllbnREaXNjb25uZWN0ZWQgc2Vzc2lvbklkIGNsaWVudElkIC0+CiAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgLCBDbWQubm9uZQogICAgICAgICAgICApCgogICAgICAgIC0tYnJvYWRjYXN0IChNZXNzYWdlUmVjZWl2ZWQgKExlZnQgY2xpZW50SWQpKSApCiAgICAgICAgR290Sk1kaWN0U2VhcmNoUmVzdWx0cyBnYW1lSWQga2FuamkgcmVzIC0+CiAgICAgICAgICAgIGdvdEpNZGljdFNlYXJjaFJlc3VsdHMgbW9kZWwgZ2FtZUlkIGthbmppIHJlcwoKICAgICAgICBHZXRLZXlzIC0+CiAgICAgICAgICAgICggbW9kZWwsIENtZC5iYXRjaCBbIGdldEthbmppS2V5cyBdICkKCiAgICAgICAgR290S2V5cyByZXMgLT4KICAgICAgICAgICAgY2FzZSByZXMgb2YKICAgICAgICAgICAgICAgIE9rIHMgLT4KICAgICAgICAgICAgICAgICAgICAoIHsgbW9kZWwgfCBtZXNzYWdlID0gcyB9CiAgICAgICAgICAgICAgICAgICAgLCBicm9hZGNhc3QgKFRvRnJvbnRlbmRNc2dURiBzKQogICAgICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICBFcnIgZSAtPgogICAgICAgICAgICAgICAgICAgICggbW9kZWwKICAgICAgICAgICAgICAgICAgICAsIGJyb2FkY2FzdCAoVG9Gcm9udGVuZE1zZ1RGIChodHRwRXJyb3JUb1N0cmluZyBlKSkKICAgICAgICAgICAgICAgICAgICApCgogICAgICAgIEdvdFRpbWUgcG9zaXggLT4KICAgICAgICAgICAgKCB7IG1vZGVsIHwgc2VlZCA9IFJhbmRvbS5pbml0aWFsU2VlZCAoVGltZS5wb3NpeFRvTWlsbGlzIHBvc2l4KSB9LCBDbWQubm9uZSApCgogICAgICAgIFJ1bkdhbWVzIG5vdyAtPgogICAgICAgICAgICBydW5HYW1lcyBtb2RlbCBub3cKCiAgICAgICAgTm9PcEJhY2tlbmRNc2cgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCnVwZGF0ZUZyb21Gcm9udGVuZCA6IFNlc3Npb25JZCAtPiBDbGllbnRJZCAtPiBUb0JhY2tlbmQgLT4gTW9kZWwgLT4gKCBNb2RlbCwgQ21kIEJhY2tlbmRNc2cgKQp1cGRhdGVGcm9tRnJvbnRlbmQgc2Vzc2lvbklkIGNsaWVudElkIG1zZyBtb2RlbCA9CiAgICBjYXNlIG1zZyBvZgogICAgICAgIEdldEtleXNUQiAtPgogICAgICAgICAgICAoIG1vZGVsLCBDbWQubm9uZSApCgogICAgICAgIENyZWF0ZUdhbWVUQiBob3N0IGNvbmZpZyBub3cgLT4KICAgICAgICAgICAgY3JlYXRlR2FtZSBtb2RlbCBub3cgaG9zdCBjb25maWcKCiAgICAgICAgSm9pblRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgam9pbkdhbWUgbW9kZWwgcGxheWVyIGdhbWVJZAoKICAgICAgICBMZWF2ZVRCIHBsYXllciBnYW1lSWQgLT4KICAgICAgICAgICAgbGVhdmVHYW1lIG1vZGVsIHBsYXllciBnYW1lSWQKCiAgICAgICAgVXBkYXRlQ29uZmlnVEIgZ2FtZUlkIGNvbmZpZyAtPgogICAgICAgICAgICB1cGRhdGVDb25maWcgbW9kZWwgZ2FtZUlkIGNvbmZpZwoKICAgICAgICBTdGFydFRCIGdhbWVJZCBub3cgLT4KICAgICAgICAgICAgcnVuR2FtZSBtb2RlbCBub3cgZ2FtZUlkCgogICAgICAgIFJlcXVlc3ROZXh0S2FuamlUQiBnYW1lSWQgcGxheWVyIC0+CiAgICAgICAgICAgIHJlcXVlc3ROZXh0S2FuamkgbW9kZWwgZ2FtZUlkIHBsYXllcgoKICAgICAgICBBZGRXb3JkVEIgZ2FtZUlkIHBsYXllciB3b3JkIC0+CiAgICAgICAgICAgIGFkZFdvcmQgbW9kZWwgZ2FtZUlkIHBsYXllciB3b3JkCgogICAgICAgIFBsYXllckluZm9TdWJtaXR0ZWRUQiB1c2VybmFtZSBwaHBTZXNzaW9uSWQgLT4KICAgICAgICAgICAgKCB7IG1vZGVsCiAgICAgICAgICAgICAgICB8IHBsYXllcnMgPQogICAgICAgICAgICAgICAgICAgIERpY3QuaW5zZXJ0IHNlc3Npb25JZAogICAgICAgICAgICAgICAgICAgICAgICB7IHBsYXllciA9IHsgbmFtZSA9IHVzZXJuYW1lLCBpZCA9IGNsaWVudElkIH0KICAgICAgICAgICAgICAgICAgICAgICAgLCBwaHBTZXNzaW9uSWQgPSBwaHBTZXNzaW9uSWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wbGF5ZXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAsIExhbWRlcmEuc2VuZFRvRnJvbnRlbmQgY2xpZW50SWQgPHwgUGxheWVySW5mb1JlZ2lzdGVyZWRURiB7IG5hbWUgPSB1c2VybmFtZSwgaWQgPSBjbGllbnRJZCB9CiAgICAgICAgICAgICkKICAgICAgICBSZXF1ZXN0SW5pdGlhbEdhbWVzQnJvYWRDYXN0VEIgLT4gCiAgICAgICAgICAgIChtb2RlbCwgaW5pdGlhbEdhbWVzQnJvYWRjYXN0IG1vZGVsIGNsaWVudElkKQoKICAgICAgICBOb09wVEIgLT4KICAgICAgICAgICAgKCBtb2RlbCwgQ21kLm5vbmUgKQoKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCg",
					"AQAAAAAAAAABAAAAmAwAAAAAAACYDAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "elm-pkg-js-includes.js",
			"settings":
			{
				"buffer_size": 564,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAAiAIAAAAAAAB+AgAALy8gQE5PVEUgdGhpcyBmaWxlIHdpbGwgaG9wZWZ1bGx5IGJlIGF1dG8tZ2VuZXJhdGVkIGJ5IGVsbS1wa2ctanMgaW4gZnV0dXJlIQovLyBGb3Igbm93LCBpdHMgcHJlc2Vuc2Ugd2lsbCBtZWFuIExhbWRlcmEgZGV0ZWN0cyB0aGUgZXh0cmEgSlMgYW5kIHBhY2thZ2VzCi8vIEluIGZ1dHVyZSB0aGlzIHdpbGwgYmUgbW9yZSBzdHJ1Y3R1cmVkICsgcmVzdHJpY3RlZCBvbmNlIHRoZSBkZXNpZ24gaXMgZG9uZQpjb25zdCBnZW9Mb2MgPSByZXF1aXJlKCcuL2VsbS1wa2ctanMvZ2VvbG9jLmpzJykKY29uc3QgaW1nUHJvYyA9IHJlcXVpcmUoJy4vZWxtLXBrZy1qcy9pbWFnZV9sb2FkZXIuanMnKQoKZXhwb3J0cy5pbml0ID0gYXN5bmMgZnVuY3Rpb24gaW5pdChhcHApIHsKICAvLyBAV0FSTklORzogdGhpcyBvbmx5IHJ1bnMgZm9yIExhbWRlcmEgcHJvZHVjdGlvbiBkZXBsb3lzIQogIC8vIFRoaXMgZmlsZSB3aWxsIG5vdCBydW4gaW4gTG9jYWwgZGV2ZWxvcG1lbnQsIGFuIGVxdWl2YWxlbnQgdG8gdGhpcyBpcwogIC8vIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGluIExvY2FsIERldmVsb3BtZW50IGZvciBldmVyeSBmaWxlIGluIGVsbS1wa2ctanMvCiAgZ2VvTG9jLmluaXQoYXBwKQogIGltZ1Byb2MuaW5pdChhcHApCn0",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "coms"
					},
					"BQAAAA4BAAAAAAAADwEAAAAAAAAAAAAADwEAAAAAAAAPAQAAAAAAAAYAAABnZW9sb2MPAQAAAAAAABABAAAAAAAAAAAAABABAAAAAAAAEQEAAAAAAAAAAAAAEQEAAAAAAAASAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAQAAAAAAABQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAABgBAAAAAAAAGAEAAAAAAAA4AAAAY29uc3QgaW1nUHJvYyA9IHJlcXVpcmUoJy4vZWxtLXBrZy1qcy9pbWFnZV9sb2FkZXIuanMnKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYAQAAAAAAAFABAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "coms"
					},
					"BQAAAO8AAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAADwAAAAAAAAAAYAAABnZW9Mb2PwAAAAAAAAAPEAAAAAAAAAAAAAAPEAAAAAAAAA8gAAAAAAAAAAAAAA8gAAAAAAAADzAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvAAAAAAAAAPUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "coms"
					},
					"BQAAACQCAAAAAAAAJQIAAAAAAAAAAAAAJQIAAAAAAAAlAgAAAAAAAAYAAABnZW9Mb2MlAgAAAAAAACYCAAAAAAAAAAAAACYCAAAAAAAAJwIAAAAAAAAAAAAAJwIAAAAAAAAoAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkAgAAAAAAACoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"left_delete",
					null,
					"AQAAADMCAAAAAAAAMwIAAAAAAAAWAAAAICAgIGltZ1Byb2MuaW5pdChhcHApCg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzAgAAAAAAAEkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"clang_format",
					{
						"whole_buffer": true
					},
					"AQAAAAAAAAAAAAAANAIAAAAAAAA0AgAALy8gQE5PVEUgdGhpcyBmaWxlIHdpbGwgaG9wZWZ1bGx5IGJlIGF1dG8tZ2VuZXJhdGVkIGJ5IGVsbS1wa2ctanMgaW4gZnV0dXJlIQovLyBGb3Igbm93LCBpdHMgcHJlc2Vuc2Ugd2lsbCBtZWFuIExhbWRlcmEgZGV0ZWN0cyB0aGUgZXh0cmEgSlMgYW5kIHBhY2thZ2VzCi8vIEluIGZ1dHVyZSB0aGlzIHdpbGwgYmUgbW9yZSBzdHJ1Y3R1cmVkICsgcmVzdHJpY3RlZCBvbmNlIHRoZSBkZXNpZ24gaXMgZG9uZQpjb25zdCBjb21zID0gcmVxdWlyZSgnLi9lbG0tcGtnLWpzL2NvbXMuanMnKQoKZXhwb3J0cy5pbml0ID0gYXN5bmMgZnVuY3Rpb24gaW5pdChhcHApIHsKICAgIC8vIEBXQVJOSU5HOiB0aGlzIG9ubHkgcnVucyBmb3IgTGFtZGVyYSBwcm9kdWN0aW9uIGRlcGxveXMhCiAgICAvLyBUaGlzIGZpbGUgd2lsbCBub3QgcnVuIGluIExvY2FsIGRldmVsb3BtZW50LCBhbiBlcXVpdmFsZW50IHRvIHRoaXMgaXMKICAgIC8vIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGluIExvY2FsIERldmVsb3BtZW50IGZvciBldmVyeSBmaWxlIGluIGVsbS1wa2ctanMvCiAgICBjb21zLmluaXQoYXBwKQp9",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzAgAAAAAAADMCAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"up",
				"Package Control: Upgrade Package"
			],
			[
				"terminus",
				"Terminus: Toggle Panel"
			],
			[
				"term",
				"Terminal: Open"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"teminus ope",
				"Terminus: Toggle Panel"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"open",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"terminus ",
				"Terminus: Close All"
			],
			[
				"terminus open",
				"Terminus: Toggle Panel"
			],
			[
				"terminus: io",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"Package Control: up",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"floo",
				"Floobits - Settings (~/.floorc.json)"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"pac",
				"Package Control: Upgrade Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 159.0,
		"history":
		[
			"terminus",
			"teminus",
			"Terminus: Open Default Shell in Tab"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/eniac314/prog/elm/kgg",
		"/Users/eniac314/prog/elm/kgg/elm-pkg-js",
		"/Users/eniac314/prog/elm/kgg/src",
		"/Users/eniac314/prog/elm/kgg/src/Evergreen",
		"/Users/eniac314/prog/elm/kgg/src/Evergreen/Migrate"
	],
	"file_history":
	[
		"/Users/eniac314/prog/elm/kgg/src/Evergreen/Migrate/V6.elm",
		"/Users/eniac314/prog/elm/kgg/src/Evergreen/Migrate/V4.elm",
		"/Users/eniac314/prog/elm/kgg/src/GuessingGame.elm",
		"/Users/eniac314/prog/elm/kanjiGame/auth-src/Auth/Common.elm",
		"/Users/eniac314/prog/elm/kanjiGame/src/Types.elm",
		"/Users/eniac314/prog/elm/kanjiGame/elm.json",
		"/Users/eniac314/prog/elm/kanjiGameOld/src/Types.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Types.elm",
		"/Users/eniac314/prog/elm/kanjiGame/src/Auth.elm",
		"/Users/eniac314/prog/elm/kanjiGame/src/Env.elm",
		"/Users/eniac314/prog/elm/kanjiGame/src/Backend.elm",
		"/Users/eniac314/prog/elm/kanjiGame/src/Frontend.elm",
		"/Users/eniac314/prog/elm/kanjiGame/src/Config.elm",
		"/Users/eniac314/Desktop/trad momoko.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Main.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Routes.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/restricted/membersBlog/Notes Révisions MNN1.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/index.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Plugins/Decomposer.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Blog.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Home.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 29/grammar_less_29.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Kanji/Data.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/JapaneseDictionary.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Verbs/VerbsFormsTable.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Kanji/Conversion.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Markdown/MarkdownParser.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Markdown/MarkdownEditor.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Markdown/JapPreprocessor.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Utils/Utils.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Plugins/QCM.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Verbs.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Verbs/VerbsData.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/MnnManual.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/restricted/pdfConfigs/less01Romaji.json",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/restricted/MinnaNoNihongo1Romaji/lessons/splitter.sh",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Markdown/Renderer.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Plugins/Whiteboard.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Kanji/KanjiEditor.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Kanji/KanjiQuiz.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Verbs/VerbsQuiz.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Yann/06-2024/Notes 29-06",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 27/grammar_less_27.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/08-2024/Notes 04-08.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/08-2024/Notes 02-08",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/07-2024/notes 31-07",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Adjectives/AdjectivesQuiz.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/07-2024/notes 19-07",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/07-2024/notes 12-07.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Plugins/PdfReader.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/07-2024/notes 10-07",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/07-2024/notes themes version",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/07-2024/notes 08-07.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Verbs/VerbsLessons.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Classical/ClassicalQuizes.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Classical/InflectedForms.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Classical/InflectedFormsDataSet.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Kanji.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 20/grammar_less_20.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 23/grammar_less_23.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Plugins/PitchAccent.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/blog/Variations de niveau de language.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/02-2024/Notes 28-02.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 11/leçon 11.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 05/leçon 05.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Adjectives/AdjectivesData.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 09/leçon 09.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/assets/batchUpdateVocPitchAccent.py",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/blog/L'accent en japonais.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Vocabulary.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/modules/vocabulary/update_mnn_voc_entry.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/assets/python_scripts/updateVoc.py",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/classNotes/Aurelien/02-2024/Notes 23-02.txt",
		"/Users/eniac314/Downloads/images étiquettes amarante/etiquettes.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 14/leçon 14.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 27/leçon 27.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 01/leçon 01Voc.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 17/leçon 17Voc.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/assets/accents.sql",
		"/opt/homebrew/etc/php/8.3/php.ini",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/assets/accents.py",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/assets/accents.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/elm.json",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Presentation.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Adjectives.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Auth.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/Notes.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/MnnGrammar.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/Less 19/grammar_less_19.md",
		"/Users/eniac314/Desktop/tmp/\u001f漢字.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/assets/KanjiJLPT.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Style/Palette.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Style/Helpers.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/Fonts/font.css",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/blog/Donner et recevoir : あげる、くれる、もらう.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Plugins/VocMemo.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/apiIndex.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/modules/japTokenization/tokenizeJapStrings.inc.php",
		"/opt/homebrew/etc/httpd/httpd.conf",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/.htaccess",
		"/opt/homebrew/etc/httpd/extra/httpd-ssl.conf",
		"/opt/homebrew/etc/httpd/extra/httpd-vhosts.conf",
		"/Users/eniac314/Sites/https/Readme.md",
		"/opt/homebrew/etc/httpd/server.crt",
		"/opt/homebrew/var/log/httpd/error_log",
		"/usr/local/etc/httpd/httpd.conf",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/exosKanji/exosGen.md",
		"/Users/eniac314/Downloads/yomitan-settings-2024-01-03-10-40-17.json",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/public/data/exosKanji/exosGenFurigana.md",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/modules/auth/refresh.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Auth/Login.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Auth/Logout.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/FlashCards/FlashCardsViews.elm",
		"/Users/eniac314/prog/elm/laTerreDuChat2.0/apache/includes/config.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/includes/config.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/modules/japTokenization/furigana.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/LegacyKana/KanaVirtKeyb.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/includes/private.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/includes/utils.inc.php",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/LegacyKana/PracticeContent.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/restricted/pdfConfigs/less15.json",
		"/Users/eniac314/Sites/backupPaniersSaison/fk_dump.sql",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/Kanji/MainView.elm",
		"/Users/eniac314/prog/elm/uminokirin2.0/src/Pages/FlashCards.elm",
		"/Users/eniac314/Downloads/matomodb5000151866_hosting-data_io.sql",
		"/Users/eniac314/prog/elm/laTerreDuChat2.0/apache/includes/prodDB.inc.php",
		"/Users/eniac314/Desktop/pass.txt",
		"/Users/eniac314/prog/elm/uminokirin2.0/apache/modules/flashcards/get_deck_cards.inc.php"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 457.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"isCurrentlyPlaying",
			"broadcastGame",
			"KggSendWord",
			"K",
			"Unimplementеd",
			"gotIFrameTestResult",
			"Unimplementеd"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "elm-pkg-js/coms.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1231,
						"regions":
						{
						},
						"selection":
						[
							[
								147,
								147
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".\"'/@<",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-typescript"
								}
							],
							"incomplete_sync": null,
							"lsp_active": true,
							"lsp_uri": "file:///Users/eniac314/prog/elm/kgg/elm-pkg-js/coms.js",
							"remote_loading": false,
							"show_definitions": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Game.elm",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19358,
						"regions":
						{
						},
						"selection":
						[
							[
								16820,
								16820
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"lsp_uri": "file:///Users/eniac314/prog/elm/kgg/src/Game.elm",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8407.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Frontend.elm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8502,
						"regions":
						{
						},
						"selection":
						[
							[
								7282,
								7282
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"lsp_uri": "file:///Users/eniac314/prog/elm/kgg/src/Frontend.elm",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5081.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": true,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/GuessingGame.elm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22556,
						"regions":
						{
						},
						"selection":
						[
							[
								5775,
								5775
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"lsp_uri": "file:///Users/eniac314/prog/elm/kgg/src/GuessingGame.elm",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3832.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Types.elm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7219,
						"regions":
						{
						},
						"selection":
						[
							[
								424,
								424
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"lsp_uri": "file:///Users/eniac314/prog/elm/kgg/src/Types.elm",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 887.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/ApiCalls.elm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20668,
						"regions":
						{
						},
						"selection":
						[
							[
								427,
								427
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"lsp_uri": "file:///Users/eniac314/prog/elm/kgg/src/ApiCalls.elm",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/Backend.elm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3934,
						"regions":
						{
						},
						"selection":
						[
							[
								3226,
								3226
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"lsp_uri": "file:///Users/eniac314/prog/elm/kgg/src/Backend.elm",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Elm Syntax Highlighting/src/elm.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2022.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "elm-pkg-js-includes.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 564,
						"regions":
						{
						},
						"selection":
						[
							[
								563,
								563
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".\"'/@<",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-typescript"
								}
							],
							"incomplete_sync": null,
							"lsp_active": true,
							"lsp_uri": "file:///Users/eniac314/prog/elm/kgg/elm-pkg-js-includes.js",
							"remote_loading": false,
							"show_definitions": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 155.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.LSP Log Panel":
	{
		"height": 0.0
	},
	"output.SFTP":
	{
		"height": 0.0
	},
	"output.Terminus":
	{
		"height": 243.0
	},
	"output.Terminus 2":
	{
		"height": 102.0
	},
	"output.Terminus 3":
	{
		"height": 114.0
	},
	"output.Terminus 4":
	{
		"height": 114.0
	},
	"output.Terminus 5":
	{
		"height": 114.0
	},
	"output.Terminus 6":
	{
		"height": 114.0
	},
	"output.diagnostics":
	{
		"height": 0.0
	},
	"output.elm_format":
	{
		"height": 228.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "kgg.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"secre",
				"apacheBackup/vendor/paragonie/halite/src/Asymmetric/SecretKey.php"
			],
			[
				"getFeuill",
				"html/feuillesLiaison/getFeuilleLiaison.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 501.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/prog/elm/paniersSaison/paniersSaison.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 305.0,
		"last_filter": "subs",
		"selected_items":
		[
			[
				"subs",
				"subscriptions"
			],
			[
				"edit",
				"defEditingSelectedArtwork"
			],
			[
				"mobiel",
				"mobileNavView"
			],
			[
				"compute",
				"computeDisplayMinHeight"
			],
			[
				"contactV",
				"contactView"
			],
			[
				"content",
				"content"
			]
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
		"lsp_show_inlay_hints": false
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 251.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
